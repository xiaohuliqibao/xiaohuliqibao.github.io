<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>有一些话</title>
    <url>/2023/05/09/01-someword/</url>
    <content><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a><strong>写在前面：</strong></h2><p>总算下了决心把博客做一个迁移了，就像是和一个老朋友做了道别一样，有点疲倦和无奈。放一张以前博客的截图。</p>
<p><img src="https://resources.kagerou.top/img/deemo/AI05newworld.webp" alt="七宝的小窝"></p>
<p>自从购买了阿里云的数据库RDS之后，将博客的数据库链接分到了别的服务器上，博客服务器和数据库通信的延迟就直接番了好几倍，体验真的差了很多。但是也没有办法，同期QQ机器人的开发和数据存储又需要一个比较好的数据服务，也导致后来博客就慢慢的不在使用了。后来因为工作的原因，机器人也没用，很多东西感觉放太久了，就像放在橱窗里的橘子一样，虽然有厚厚的皮包裹着不容易坏掉，但是也没有最开始的新鲜的味道了。想重新拾起来，却总是找百般借口。</p>
<p>最近一直都很迷茫，找不到一件主心骨的事情，浑浑噩噩的。做了内网穿透使用的是<strong>nps</strong>+<strong>npc</strong>,将以前的手机root后装上了<strong>termux</strong>开始了一个新的Linux鼓捣方向，还好整个过程都还算顺利，做了Arai的下载服务，本博客的部署。当然也有不顺利的地方：FTP服务总是没有办法配置好，想配合电视盒子做一个视频服务器的，可惜没有如愿。哈哈哈之后换个路由器和能刷盒子系统的时候再来尝试一下。</p>
<p>前几天买了几个郁金香的种子回来，想种种花，爸妈问我能不能去做一下其他行业的事情，我才发现，我似乎除了<del>写写代码</del>，其他的似乎什么都做不来。年纪有这么大了，像新手一样重头学起嘛？会考虑很多，想一下徒增烦恼的问题，很烦啊。冷静一下来写写博客吧！即使只是搬运，有事情总比没有的好。</p>
]]></content>
      <categories>
        <category>废话</category>
      </categories>
      <tags>
        <tag>随便写写</tag>
        <tag>话痨</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库表结构调整(带数据)</title>
    <url>/2023/06/05/change-table/</url>
    <content><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>数据备份 -&gt; 表删除 -&gt; 表重建 -&gt; 数据迁移 -&gt; 备份删除</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TEMPORARY <span class="keyword">TABLE</span> temp1 <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  group_number,</span><br><span class="line">  q_key,</span><br><span class="line">  q_message,</span><br><span class="line">  sender_number</span><br><span class="line"><span class="keyword">FROM</span> t_customize_message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> t_customize_message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_customize_message (</span><br><span class="line">group_number <span class="type">NUMERIC</span>,</span><br><span class="line">q_key NVARCHAR,</span><br><span class="line">q_message NVARCHAR,</span><br><span class="line">sender_number <span class="type">NUMERIC</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_customize_message</span><br><span class="line"> (group_number,</span><br><span class="line">  q_key,</span><br><span class="line">  q_message,</span><br><span class="line">  sender_number)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  group_number,</span><br><span class="line">  q_key,</span><br><span class="line">  q_message,</span><br><span class="line">  sender_number</span><br><span class="line"><span class="keyword">FROM</span> temp1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> temp1;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>SQLite</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>将PNG图片快速转化为Webp格式</title>
    <url>/2023/05/22/Png2Webp/</url>
    <content><![CDATA[<h4 id="PNG格式介绍"><a href="#PNG格式介绍" class="headerlink" title="PNG格式介绍"></a>PNG格式介绍</h4><p>PNG（Portable Network Graphics），便携式网络图形，是一种采用无损压缩算法的位图格式，支持索引、灰度、RGB三种颜色方案以及Alpha通道等特性。其设计目的是试图替代GIF和TIFF文件格式，同时增加一些GIF文件格式所不具备的特性。PNG使用从LZ77派生的无损数据压缩算法，一般应用于JAVA程序、网页或S60程序中，原因是它压缩比高，生成文件体积小。PNG文件的扩展名为.png</p>
<h4 id="Webp格式介绍"><a href="#Webp格式介绍" class="headerlink" title="Webp格式介绍"></a>Webp格式介绍</h4><p>不想写</p>
<h4 id="使用Pillow转换"><a href="#使用Pillow转换" class="headerlink" title="使用Pillow转换"></a>使用Pillow转换</h4><p>使用的Python的图像库Pillow中 Image.open().save()函数来做图片的处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;./imagining.png&#x27;</span>) <span class="comment">#读入文件</span></span><br><span class="line">im.save(<span class="string">&#x27;./imagining.webp&#x27;</span>) <span class="comment">#保存</span></span><br></pre></td></tr></table></figure>

<h4 id="批量的目录读取-转化"><a href="#批量的目录读取-转化" class="headerlink" title="批量的目录读取+转化"></a>批量的目录读取+转化</h4><p>使用os.walk()来读取指定目录和目录下的所有文件信息，遍历后对匹配的文件进行Pillow的函数转化。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment">#im = Image.open(&quot;./ephemeral.png&quot;) #读入文件</span></span><br><span class="line"><span class="comment">#im.save(&quot;./ephemeral.webp&quot;) #保存</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pic_webp</span>(<span class="params">picpath</span>):</span><br><span class="line">    imagePath = picpath.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>] <span class="comment">#文件名称</span></span><br><span class="line">    outputPath = imagePath +<span class="string">&quot;.webp&quot;</span><span class="comment">#输出文件名称</span></span><br><span class="line">    im = Image.<span class="built_in">open</span>(picpath) <span class="comment">#读入文件</span></span><br><span class="line">    im.save(outputPath) <span class="comment">#保存</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> dirpath,dirname,dirfiles <span class="keyword">in</span> os.walk(<span class="string">&quot;./&quot;</span>,topdown=<span class="literal">False</span>):</span><br><span class="line">    <span class="keyword">for</span> dirfile <span class="keyword">in</span> dirfiles:</span><br><span class="line">        <span class="keyword">if</span> dirfile.split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>] <span class="keyword">in</span> [<span class="string">&quot;png&quot;</span>,<span class="string">&quot;jpeg&quot;</span>,<span class="string">&quot;jpg&quot;</span>]:</span><br><span class="line">            pic_webp(dirfile)</span><br></pre></td></tr></table></figure>

<h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>如果你没有安装Pillow，请先安装Pillow。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install Pillow </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>图片处理</tag>
      </tags>
  </entry>
  <entry>
    <title>Blog的二次开发-上传图片</title>
    <url>/2023/08/02/express01/</url>
    <content><![CDATA[<p>之前想着的是使用狼宝来上传博客图片，后来规划了一下，发现这个不是很适合使用直觉，后来问了好多次ChatGpt发现上传图片都需要有一个后端的服务器，然后就接触到了express。在ChatGpt的真实帮助下用express写了一个上传图片的客户端。</p>
<h3 id="Express介绍"><a href="#Express介绍" class="headerlink" title="Express介绍"></a>Express介绍</h3><p>Express是一个流行的Node.js Web应用程序框架，它简化了构建Web应用程序和API的过程。它提供了一组简洁而灵活的功能，使得处理HTTP请求、路由、中间件和视图模板等任务变得更加容易。</p>
<p>下面是一些Express框架的主要特点：</p>
<ol>
<li><p><strong>快速而简洁</strong>: Express具有简洁的API设计，使得构建Web应用程序变得简单而直观。它提供了一些核心功能，同时也允许开发者根据需求进行扩展。</p>
</li>
<li><p><strong>路由</strong>: Express提供了灵活的路由功能，可以根据URL路径和HTTP方法来处理请求。通过定义路由，您可以将不同的请求映射到相应的处理程序函数，使代码结构清晰且易于维护。</p>
</li>
<li><p><strong>中间件</strong>: Express的中间件是处理HTTP请求的函数。它们可以执行各种任务，例如身份验证、日志记录、错误处理等。中间件函数可以按照顺序串联起来，形成一个处理请求的管道。这种模式使得处理请求的逻辑可以被分解为可重用的组件。</p>
</li>
<li><p><strong>模板引擎</strong>: Express支持各种模板引擎，例如EJS、Pug（以前称为Jade）、Handlebars等。这些模板引擎使得在服务器端生成动态HTML变得容易，可以方便地将数据注入到模板中，生成最终的响应。</p>
</li>
<li><p><strong>中间件和路由的生态系统</strong>: Express有一个庞大的中间件和路由插件生态系统，可以帮助开发者快速集成各种功能，如身份验证、会话管理、数据库连接等。这些插件可以大大提高开发效率，并且经过了广泛的测试和使用。</p>
</li>
</ol>
<p>总的来说，Express是一个轻量级、灵活且易于使用的框架，适用于构建各种类型的Web应用程序和API。它的简单性和丰富的生态系统使得开发者可以更快地构建高性能的Web应用程序，并以可维护的方式组织和扩展代码。</p>
<p>ChatGpt就是人类之光！！！</p>
<h3 id="初始化Express项目"><a href="#初始化Express项目" class="headerlink" title="初始化Express项目"></a>初始化Express项目</h3><p>这部分是跟着教程网站的一个引导走的<a href="https://developer.mozilla.org/zh-CN/docs/Learn/Server-side/Express_Nodejs/skeleton_website">站点</a></p>
<p>首先你的有nodejs，其次使用 npm install express-generator -g 安装生成器，接着在一个空目录下使用express –view&#x3D;pug ，然后使用npm install 安装依赖，最后在使用npm run start启动项目。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install express-generator -g</span><br><span class="line">mkdir express-tutorial &amp;&amp; cd express-tutorial</span><br><span class="line">express --view=pug</span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure>

<p>浏览器中导航至 <a href="http://localhost:3000/">http://localhost:3000/</a> ，就可以访问该应用。你应该可以看到：<br>[图片]</p>
<p>目录结构</p>
<pre>/express-locallibrary-tutorial
    app.js
    /bin
        www
    package.json
    /node_modules
        [约 4,500 个子文件夹和文件]
    /public
        /images
        /javascripts
        /stylesheets
            style.css
    /routes
        index.js
        users.js
    /views
        error.pug
        index.pug
        layout.pug
</pre>

<h3 id="开始自定义"><a href="#开始自定义" class="headerlink" title="开始自定义"></a>开始自定义</h3><h4 id="修改访问端口和地址"><a href="#修改访问端口和地址" class="headerlink" title="修改访问端口和地址"></a>修改访问端口和地址</h4><p>由于整体是在服务器上开发，所有我们测试的时候需要调整端口和开启外网访问。在app.js文件中加入如下的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">listen</span>(<span class="number">17777</span>,<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server started on port 17777&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="添加整体需要的模块-x2F-依赖"><a href="#添加整体需要的模块-x2F-依赖" class="headerlink" title="添加整体需要的模块&#x2F;依赖"></a>添加整体需要的模块&#x2F;依赖</h4><p>图片上传的功能需要js-yaml、multer、sharp<br>js-yaml是用来处理上传文件后将图片信息写到博客对应的配置文件里。<br>multer是上传文件的主要模块<br>sharp是图片处理模块，把所有的图片都转化为了webp格式放到指定的位置。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install js-yaml multer sharp --save</span><br></pre></td></tr></table></figure>

<h4 id="修改router-x2F-index-js-添加上传图片的路由和功能"><a href="#修改router-x2F-index-js-添加上传图片的路由和功能" class="headerlink" title="修改router&#x2F;index.js 添加上传图片的路由和功能"></a>修改router&#x2F;index.js 添加上传图片的路由和功能</h4><p>首先还是引入依赖<br>var sharp &#x3D; require(‘sharp’);<br>var multer &#x3D; require(‘multer’);<br>var fs &#x3D; require(‘fs’);<br>var yaml &#x3D; require(‘js-yaml’);</p>
<p>设置上载的目录<br>var uploadDest &#x3D; multer({dest: ‘.&#x2F;tmp&#x2F;‘}) &#x2F;&#x2F; 其实没什么屌用因为我有sharp</p>
<p>新增上载的路由<br>router.post(‘&#x2F;upload&#x2F;:path?’,uploadDest.single(‘image’), function(req, res, next) {});</p>
<p>重命名图片名字并图片格式转化<br>const filenameNew &#x3D; new Date().getTime();<br>sharp(req.file.path)<br>  .webp({ quality: 80 })<br>  .toFile(<code>/root/file/resources/img/$&#123;req.params.path&#125;/$&#123;filenameNew&#125;.webp</code>, (err, info) &#x3D;&gt; {<br>    if (err) {<br>      console.error(err);<br>      res.status(500).send(‘Internal Server Error’);<br>    } else {<br>      console.log(info);<br>      return res.send(‘Image uploaded and converted to webp’);<br>    }<br>});</p>
<p>修改博客配置文件<br>try {<br>  const yamlData &#x3D; fs.readFileSync(‘&#x2F;root&#x2F;code&#x2F;blog&#x2F;source&#x2F;_data&#x2F;album.yml’, ‘utf8’);<br>  const parsedData &#x3D; yaml.load(yamlData);<br>  &#x2F;&#x2F; 查找path_name为&#x2F;foodPhoto的数据<br>  parsedData.find(item &#x3D;&gt; item.path_name &#x3D;&#x3D;&#x3D; <code>/$&#123;req.params.path&#125;Photo</code>).album_list[0].image.push(<code>https://resources.kagerou.top/img/$&#123;req.params.path&#125;&#123;filenameNew&#125;.webp</code>);<br>  const updatedYamlData &#x3D; yaml.dump(parsedData);<br>  fs.writeFileSync(‘&#x2F;root&#x2F;code&#x2F;blog&#x2F;source&#x2F;_data&#x2F;album.yml’, updatedYamlData, ‘utf8’);<br>  &#x2F;&#x2F;更新blog<br>  return res.send(‘seccess’);<br>}catch (err) {<br>  console.error(‘无法读取YAML文件：’, err);<br>}</p>
<p>整体index.js代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> sharp = <span class="built_in">require</span>(<span class="string">&#x27;sharp&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> yaml = <span class="built_in">require</span>(<span class="string">&#x27;js-yaml&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uploadDest = <span class="title function_">multer</span>(&#123;<span class="attr">dest</span>: <span class="string">&#x27;./tmp/&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, &#123; <span class="attr">title</span>: <span class="string">&#x27;Express&#x27;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*upload single file  */</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/upload/:path?&#x27;</span>,uploadDest.<span class="title function_">single</span>(<span class="string">&#x27;image&#x27;</span>), <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> filenameNew = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">  <span class="title function_">sharp</span>(req.<span class="property">file</span>.<span class="property">path</span>)</span><br><span class="line">    .<span class="title function_">webp</span>(&#123; <span class="attr">quality</span>: <span class="number">80</span> &#125;)</span><br><span class="line">    .<span class="title function_">toFile</span>(<span class="string">`/root/file/resources/img/<span class="subst">$&#123;req.params.path&#125;</span>/<span class="subst">$&#123;filenameNew&#125;</span>.webp`</span>, <span class="function">(<span class="params">err, info</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Internal Server Error&#x27;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(info);</span><br><span class="line">        <span class="comment">//修改blog中的album.yml</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> yamlData = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;/root/code/blog/source/_data/album.yml&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">          <span class="keyword">const</span> parsedData = yaml.<span class="title function_">load</span>(yamlData);</span><br><span class="line">          <span class="comment">// 查找path_name为/foodPhoto的数据</span></span><br><span class="line">          parsedData.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">path_name</span> === <span class="string">`/<span class="subst">$&#123;req.params.path&#125;</span>Photo`</span>).<span class="property">album_list</span>[<span class="number">0</span>].<span class="property">image</span>.<span class="title function_">push</span>(<span class="string">`https://resources.kagerou.top/img/<span class="subst">$&#123;req.params.path&#125;</span>/<span class="subst">$&#123;filenameNew&#125;</span>.webp`</span>);</span><br><span class="line">          <span class="keyword">const</span> updatedYamlData = yaml.<span class="title function_">dump</span>(parsedData);  </span><br><span class="line">          fs.<span class="title function_">writeFileSync</span>(<span class="string">&#x27;/root/code/blog/source/_data/album.yml&#x27;</span>, updatedYamlData, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">          <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&#x27;Image uploaded and converted to webp&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (err) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;无法读取YAML文件：&#x27;</span>, err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&#x27;Image uploaded and converted to webp&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure>

<h4 id="多图片上传"><a href="#多图片上传" class="headerlink" title="多图片上传"></a>多图片上传</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/uploads/:path?&#x27;</span>,uploadDest.<span class="title function_">array</span>(<span class="string">&#x27;images&#x27;</span>,<span class="number">9</span>), <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  req.<span class="property">files</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> filenameNew = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">    <span class="title function_">sharp</span>(file.<span class="property">path</span>)</span><br><span class="line">      .<span class="title function_">webp</span>(&#123; <span class="attr">quality</span>: <span class="number">80</span> &#125;)</span><br><span class="line">      .<span class="title function_">toFile</span>(<span class="string">`/usr/qibao/upload/<span class="subst">$&#123;req.params.path&#125;</span>/<span class="subst">$&#123;filenameNew&#125;</span>.webp`</span>, <span class="function">(<span class="params">err, info</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">          res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Internal Server Error&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(info);</span><br><span class="line">          res.<span class="title function_">send</span>(<span class="string">&#x27;Images uploaded and converted to webp&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="启动express"><a href="#启动express" class="headerlink" title="启动express"></a>启动express</h4><p>使用npm run start启动就好了</p>
<h3 id="上传页面（还在新建文件夹）"><a href="#上传页面（还在新建文件夹）" class="headerlink" title="上传页面（还在新建文件夹）"></a>上传页面（还在新建文件夹）</h3>]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>express</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS8的基本配置</title>
    <url>/2023/12/12/centos_yum/</url>
    <content><![CDATA[<h3 id="CLI指令"><a href="#CLI指令" class="headerlink" title="CLI指令"></a>CLI指令</h3><p>指令的基本含义为-设置容器名称-映射宿主机端口-挂载文件夹-设置root权限-拉取镜像名称</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -itd --name centOS8 -p 7022:22 -p 7080:80 -p 7443:443 -p 7088:8080 -v /root/cengos8:/root --privileged=<span class="literal">true</span> centos:centos8</span><br></pre></td></tr></table></figure>

<h3 id="CentOS8的基本配置"><a href="#CentOS8的基本配置" class="headerlink" title="CentOS8的基本配置"></a>CentOS8的基本配置</h3><p>使用docker安装的CentOS容器一般会遇到两个问题，一个是yum源异常导致无法安装各类软件，一个是不知道root密码，不能直接ssh连接到系统中。<br>这个时候可以先通过docker进入到CentOS的命令行，修改root密码。</p>
<h4 id="进入容器的bash"><a href="#进入容器的bash" class="headerlink" title="进入容器的bash"></a>进入容器的bash</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it centOS8 /bin/bash</span><br></pre></td></tr></table></figure>

<h4 id="修改root密码"><a href="#修改root密码" class="headerlink" title="修改root密码"></a>修改root密码</h4><p>通常使用passwd指令来直接修改登录账号的密码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">whoami</span></span><br><span class="line">passwd</span><br></pre></td></tr></table></figure>

<p>但是很不幸的一点，这个系统上可能passwd都没有 <strong>command not found: passwd</strong></p>
<h4 id="更新yum源"><a href="#更新yum源" class="headerlink" title="更新yum源"></a>更新yum源</h4><p>yum源配置文件在 <strong>&#x2F;etc&#x2F;yum.repos.d</strong> 目录下。一般需要更改的是 <strong>BaseOS.repo</strong>和<strong>AppStream.repo</strong>文件的内容。</p>
<p>这里还是推荐aliyum的源，<a href="http://mirrors.aliyun.com/repo/">源链接</a>，我试过了tencent的好多软件还是找不到。</p>
<p>备份原文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> CentOS-Linux-BaseOS.repo CentOS-Linux-BaseOS.repo.backup</span><br></pre></td></tr></table></figure>

<p>通过curl下载aliyun源的BaseOS.repo，可能wget用不起，我没试。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o CentOS-Linux-BaseOS.repo http://mirrors.aliyun.com/repo/Centos-8.repo</span><br></pre></td></tr></table></figure>

<p>所有的文件名都需要依照你的系统内的名字来更改，保持源文件名称一致很重要。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># CentOS-Base.repo</span><br><span class="line">#</span><br><span class="line"># The mirror system uses the connecting IP address of the client and the</span><br><span class="line"># update status of each mirror to pick mirrors that are updated to and</span><br><span class="line"># geographically close to the client.  You should use this for CentOS updates</span><br><span class="line"># unless you are manually picking other mirrors.</span><br><span class="line">#</span><br><span class="line"># If the mirrorlist= does not work for you, as a fall back you can try the </span><br><span class="line"># remarked out baseurl= line instead.</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"> </span><br><span class="line">[base]</span><br><span class="line">name=CentOS-$releasever - Base - mirrors.aliyun.com</span><br><span class="line">#failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/$releasever/BaseOS/$basearch/os/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos/$releasever/BaseOS/$basearch/os/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos/$releasever/BaseOS/$basearch/os/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official</span><br><span class="line"> </span><br><span class="line">#additional packages that may be useful</span><br><span class="line">[extras]</span><br><span class="line">name=CentOS-$releasever - Extras - mirrors.aliyun.com</span><br><span class="line">#failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/$releasever/extras/$basearch/os/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos/$releasever/extras/$basearch/os/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos/$releasever/extras/$basearch/os/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official</span><br><span class="line"> </span><br><span class="line">#additional packages that extend functionality of existing packages</span><br><span class="line">[centosplus]</span><br><span class="line">name=CentOS-$releasever - Plus - mirrors.aliyun.com</span><br><span class="line">#failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/$releasever/centosplus/$basearch/os/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos/$releasever/centosplus/$basearch/os/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos/$releasever/centosplus/$basearch/os/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official</span><br><span class="line"> </span><br><span class="line">[PowerTools]</span><br><span class="line">name=CentOS-$releasever - PowerTools - mirrors.aliyun.com</span><br><span class="line">#failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/$releasever/PowerTools/$basearch/os/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos/$releasever/PowerTools/$basearch/os/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos/$releasever/PowerTools/$basearch/os/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[AppStream]</span><br><span class="line">name=CentOS-$releasever - AppStream - mirrors.aliyun.com</span><br><span class="line">#failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/$releasever/AppStream/$basearch/os/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos/$releasever/AppStream/$basearch/os/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos/$releasever/AppStream/$basearch/os/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面是<strong>BaseOS.repo</strong>的文件内容。然后在更新一下<strong>AppStream.repo</strong>，把原有的配置全部注释，在将<strong>BaseOS.repo</strong>中[AppStream]相关的内容粘贴过去。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># CentOS-Linux-AppStream.repo</span><br><span class="line">#</span><br><span class="line"># The mirrorlist system uses the connecting IP address of the client and the</span><br><span class="line"># update status of each mirror to pick current mirrors that are geographically</span><br><span class="line"># close to the client.  You should use this for CentOS updates unless you are</span><br><span class="line"># manually picking other mirrors.</span><br><span class="line">#</span><br><span class="line"># If the mirrorlist does not work for you, you can try the commented out</span><br><span class="line"># baseurl line instead.</span><br><span class="line"></span><br><span class="line">#[appstream]</span><br><span class="line">#name=CentOS Linux $releasever - AppStream</span><br><span class="line">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=AppStream&amp;infra=$infra</span><br><span class="line">#baseurl=http://mirror.centos.org/$contentdir/$releasever/AppStream/$basearch/os/</span><br><span class="line">#gpgcheck=1</span><br><span class="line">#enabled=1</span><br><span class="line">#gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial</span><br><span class="line"></span><br><span class="line">#tencent</span><br><span class="line">#[AppStream]</span><br><span class="line">#name=Qcloud centos AppStream - $basearch</span><br><span class="line">#baseurl=http://mirrors.cloud.tencent.com/centos/$releasever/AppStream/$basearch/os/</span><br><span class="line">#enabled=0</span><br><span class="line">#gpgcheck=1</span><br><span class="line">#gpgkey=http://mirrors.cloud.tencent.com/centos/RPM-GPG-KEY-CentOS-Official</span><br><span class="line"></span><br><span class="line">#aliyun</span><br><span class="line">[AppStream]</span><br><span class="line">name=CentOS-$releasever - AppStream - mirrors.aliyun.com</span><br><span class="line">#failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/$releasever/AppStream/$basearch/os/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos/$releasever/AppStream/$basearch/os/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos/$releasever/AppStream/$basearch/os/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official</span><br></pre></td></tr></table></figure>

<p>配置完成后清理和再建缓存，在安装epel-release源，基本就可以了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum clean</span><br><span class="line">yum mackcache</span><br><span class="line">yum install epel-release -y</span><br></pre></td></tr></table></figure>

<p>接下来就可以愉快的安装一些必要的软件了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install zsh git passwd screen nginx <span class="comment">#...</span></span><br></pre></td></tr></table></figure>

<p>最后更改root密码，非必要。</p>
<h4 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h4><p>写了一个脚本文件来一键执行更改源的操作。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;Hello World !&quot;</span></span></span><br><span class="line">base_str=&#x27;Base&#x27;</span><br><span class="line">app_stream_str=&#x27;AppStream&#x27;</span><br><span class="line">tmp=&#x27;appstream.tmp&#x27;</span><br><span class="line">repos_path=&#x27;/etc/yum.repos.d/&#x27;</span><br><span class="line">for file in $(ls $repos_path)</span><br><span class="line">do</span><br><span class="line">    #echo $file</span><br><span class="line">    #备份并替换Base文件</span><br><span class="line">    if [[ $file = *$find_str* ]]</span><br><span class="line">    then</span><br><span class="line">    #    echo $file&#x27;包含&#x27;$find_str</span><br><span class="line">        mv $repos_path$file $repos_path$file.backup &amp;&amp; curl  -s -o $repos_path$file http://mirrors.aliyun.com/repo/Centos-8.repo</span><br><span class="line">    fi</span><br><span class="line">    #修改AppStream文件,属于是比较取巧的方案了，不建议学习。</span><br><span class="line">    if [[ $file = *$app_stream_str* ]]</span><br><span class="line">    then</span><br><span class="line">    #    echo $file&#x27;包含&#x27;$app_stream_str</span><br><span class="line">        mv $repos_path$file $repos_path$file.backup &amp;&amp; touch $repos_path$file  &amp;&amp; curl -s -o $repos_path$tmp http://mirrors.aliyun.com/repo/Centos-8.repo &amp;&amp; sed -n &quot;54,61p&quot; $repos_path$tmp &gt;&gt; $repos_path$file &amp;&amp; rm $repos_path$tmp</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line">yum clean &amp;&amp; yum makecache &amp;&amp; yum install epel-release -y </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="安装zsh和配置oh-my-zsh-更改默认shell"><a href="#安装zsh和配置oh-my-zsh-更改默认shell" class="headerlink" title="安装zsh和配置oh-my-zsh,更改默认shell"></a>安装zsh和配置oh-my-zsh,更改默认shell</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装zsh</span></span><br><span class="line">yum install zsh git util-linux-user -y</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置oh-my-zsh，执行成功与否和网络有关，可以先ping一下 raw.githubusercontent.com</span></span><br><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">更改默认shell为zsh</span></span><br><span class="line">chsh -s /bin/zsh root</span><br></pre></td></tr></table></figure>

<p>当我执行到更改默认shell这一步的时候才发现这个系统启动时候的pid进程似乎有问题，不是使用的&#x2F;sbin&#x2F;init。pid(1)居然是bash而不是systemd，导致systemd相关指令包括systemctl和reboot指令都无法执行。网上查询了一下大都是关于WSL系统的问题，和我在docker下创建的centos关系也不大，最后怀疑是在docker run的时候没有指定启动进程为&#x2F;sbin&#x2F;init有关，之后验证。</p>
<h4 id="配置JAVA和NODEJS环境"><a href="#配置JAVA和NODEJS环境" class="headerlink" title="配置JAVA和NODEJS环境"></a>配置JAVA和NODEJS环境</h4><p>在zsh的指令环境下，他的profile文件为&#x2F;etc&#x2F;zprofile，通过cat &#x2F;etc&#x2F;zprofile我们可以看到其中的配置。</p>
<figure class="highlight profile"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"># /etc/zprofile and ~/.zprofile are run for login shells</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">PATH=<span class="string">&quot;$PATH:$HOME/bin&quot;</span></span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">_src_etc_profile(<span class="string"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    #  Make /etc/profile happier, and have possible ~/.zshenv options like</span><br><span class="line">    # NOMATCH ignored.</span><br><span class="line">    #</span><br><span class="line">    emulate -L ksh</span><br><span class="line"></span><br><span class="line">    # source profile</span><br><span class="line">    if [ -f /etc/profile ]; then</span><br><span class="line">            source /etc/profile</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line">_src_etc_profile</span><br><span class="line"></span><br><span class="line">unset -f _src_etc_profile</span><br></pre></td></tr></table></figure>

<p>以root账户为例，他已经帮我们把&#x2F;root&#x2F;bin文件夹加入到了PATH变量中，意味着我们可以直接把一些可执行文件放在&#x2F;root&#x2F;bin中就可以全局执行了。</p>
<p>创建&#x2F;root&#x2F;soft&#x2F;文件夹，统一管理自定义的软件。</p>
<p>下载并解压openjdk21 [网络链接随时会更新，已实时为准]</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">md /root/soft &amp;&amp; cd /root/soft</span><br><span class="line">culr -0 jdk21.tar.gz https://download.java.net/java/GA/jdk21.0.1/415e3f918a1f4062a0074a2794853d0d/12/GPL/openjdk-21.0.1_linux-x64_bin.tar.gz</span><br><span class="line">tar -zxvf jdk21.tar.gz #tar的解压并重命名怎么那么抽象</span><br><span class="line">mv openjdk-21.0.1_linux-x64_bin jdk21</span><br></pre></td></tr></table></figure>

<p>将你所要用到的java可执行文件，link到&#x2F;root&#x2F;bin文件夹中。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">link -s /root/soft/jdk21/bin/java /root/bin/java</span><br><span class="line">link -s /root/soft/jdk21/bin/javac /root/bin/javac</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>现在你可以执行 java –version 来查看版本信息了。</p>
<p>下载并解压node20 [网络链接随时会更新，已实时为准]</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /root/soft</span><br><span class="line">curl -o nodejs20.tar.xz https://nodejs.org/dist/v20.10.0/node-v20.10.0-linux-x64.tar.xz</span><br><span class="line">tar -xvf nodejs20.tar.xz</span><br><span class="line">mv node-v20.10.0-linux-x64 node20</span><br></pre></td></tr></table></figure>

<p>将你所要用到的node可执行文件，link到&#x2F;root&#x2F;bin文件夹中。由于node&#x2F;bin下本身存在着link，所以在不太熟悉link的情况下，我选择直接link了源文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s  /root/soft/node20/bin/node /root/bin/node</span><br><span class="line">ln -s  /root/soft/node20/lib/node_modules/corepack/dist/corepack.js /root/bin/corepack</span><br><span class="line">ln -s  /root/soft/node20/lib/node_modules/npm/bin/npx-cli.js /root/bin/npx</span><br><span class="line">ln -s  /root/soft/node20/lib/node_modules/npm/bin/npm-cli.js /root/bin/npm</span><br></pre></td></tr></table></figure>

<p>现在你可以在任意未知执行node，npm等指令了。指令版本与你安装的软件版本相同。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>yum</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS的Firewall基本使用</title>
    <url>/2023/05/09/firewall/</url>
    <content><![CDATA[<h3 id="启动-x2F-关闭-x2F-重启-x2F-状态"><a href="#启动-x2F-关闭-x2F-重启-x2F-状态" class="headerlink" title="启动&#x2F;关闭&#x2F;重启&#x2F;状态"></a>启动&#x2F;关闭&#x2F;重启&#x2F;状态</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start/stop/restart/status firewalld.service</span><br></pre></td></tr></table></figure>

<h3 id="查看已开启的端口-默认为public区域"><a href="#查看已开启的端口-默认为public区域" class="headerlink" title="查看已开启的端口(默认为public区域)"></a>查看已开启的端口(默认为public区域)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-port</span><br></pre></td></tr></table></figure>

<h3 id="查看已开启的服务"><a href="#查看已开启的服务" class="headerlink" title="查看已开启的服务"></a>查看已开启的服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-service</span><br></pre></td></tr></table></figure>

<h3 id="开启指定服务-需要已知的服务名字"><a href="#开启指定服务-需要已知的服务名字" class="headerlink" title="开启指定服务(需要已知的服务名字)"></a>开启指定服务(需要已知的服务名字)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-service=http</span><br></pre></td></tr></table></figure>

<h3 id="查看当前可用的服务名"><a href="#查看当前可用的服务名" class="headerlink" title="查看当前可用的服务名"></a>查看当前可用的服务名</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --get-services</span><br></pre></td></tr></table></figure>

<h3 id="开启自定义端口"><a href="#开启自定义端口" class="headerlink" title="开启自定义端口"></a>开启自定义端口</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=9800/tcp --permanent</span><br></pre></td></tr></table></figure>

<h3 id="开启自定义服务-端口"><a href="#开启自定义服务-端口" class="headerlink" title="开启自定义服务+端口"></a>开启自定义服务+端口</h3><p>使用配置文件的方式，创建一个自定义服务。文件位置&#x2F;usr&#x2F;lib&#x2F;firewalld&#x2F;services&#x2F;</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">short</span>&gt;</span>arai2-service<span class="tag">&lt;/<span class="name">short</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">description</span>&gt;</span>This is just an example arai2. use TCP 9800 network port.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">&quot;tcp&quot;</span> <span class="attr">port</span>=<span class="string">&quot;9800&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写好之后重载一下配置文件，再启用对应的服务名称</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br><span class="line">firewall-cmd --permanent --zone=public --add-service=arai2-service</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Firewall</tag>
      </tags>
  </entry>
  <entry>
    <title>BI开发记录</title>
    <url>/2023/06/13/fineBI/</url>
    <content><![CDATA[<h3 id="Oracle-SQL"><a href="#Oracle-SQL" class="headerlink" title="Oracle SQL"></a>Oracle SQL</h3><h4 id="join-using-name-等于-join-on-a-name-x3D-b-name"><a href="#join-using-name-等于-join-on-a-name-x3D-b-name" class="headerlink" title="join using(name) 等于 join on a.name &#x3D; b.name"></a>join using(name) 等于 join on a.name &#x3D; b.name</h4><p>当模式设计对联接表的列采用了相同的命名样式时，就可以使用 USING 语法来简化 ON 语法，格式为：USING(column_name)。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> employee_id,last_name,department_name</span><br><span class="line"><span class="keyword">from</span> employees <span class="keyword">join</span> departments</span><br><span class="line"><span class="keyword">using</span> (department_id)</span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> employee_id,last_name,department_name</span><br><span class="line"><span class="keyword">from</span> employees <span class="keyword">join</span> departments</span><br><span class="line"><span class="keyword">on</span> employees.department_id <span class="operator">=</span> departments.department_id</span><br></pre></td></tr></table></figure>

<h4 id="Alternative-quote-operator-代替引用运算符"><a href="#Alternative-quote-operator-代替引用运算符" class="headerlink" title="Alternative quote operator 代替引用运算符"></a>Alternative quote operator 代替引用运算符</h4><p>‘employee is ‘ || last_name &#x3D;&gt; q’[employee is ]’ || last_name  使用<strong>q’[]’</strong> 这样的组合来代替 <strong>‘’</strong> 。<br>具体的使用场景，为了避免在拼接的自定义字符串中再次出现 <strong>‘</strong> 符号导致无法查询语句无法被解释。<br>例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> department_name <span class="operator">||</span> <span class="string">&#x27; Department&#x27;</span>s Manager Id: <span class="string">&#x27; || manager_id</span></span><br><span class="line"><span class="string">from departments</span></span><br></pre></td></tr></table></figure>

<p>显然由于 Department’s Manager 中含有一个 ‘ 符号，导致这个语句会出错。<br>这是我们就可以使用<strong>代替引用运算符</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> department_name <span class="operator">||</span> q<span class="string">&#x27;[ Department&#x27;</span>s Manager Id: ]<span class="string">&#x27; || manager_id</span></span><br><span class="line"><span class="string">from departments</span></span><br></pre></td></tr></table></figure>

<h3 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h3><p>介绍：SQLite是一种轻量级的关系型数据库管理系统（DBMS），它是一个开源的、零配置的、自包含的、事务性的SQL数据库引擎。</p>
<h4 id="DDL操作"><a href="#DDL操作" class="headerlink" title="DDL操作"></a>DDL操作</h4><p>创建一个Employee表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [F_Employee]</span><br><span class="line">(</span><br><span class="line">    [EmployeeId] <span class="type">INTEGER</span>  <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    [EmployeeName] NVARCHAR(<span class="number">20</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    [Phone] NVARCHAR(<span class="number">24</span>),</span><br><span class="line">    [Email] NVARCHAR(<span class="number">60</span>),</span><br><span class="line">    [HireDate]  DATETIME,</span><br><span class="line">    [JobId] <span class="type">INTEGER</span>,</span><br><span class="line">    [Salary] <span class="type">REAL</span>, <span class="comment">--单精度浮点</span></span><br><span class="line">    [CommissionPCT] <span class="type">INTEGER</span>,</span><br><span class="line">    [ManagerId] <span class="type">INTEGER</span>,</span><br><span class="line">    [DepartmentId] <span class="type">INTEGER</span>,</span><br><span class="line">    [CreateUser] NVARCHAR(<span class="number">24</span>),</span><br><span class="line">    [CreateTime] NVARCHAR(<span class="number">24</span>),</span><br><span class="line">    [UpdateUser] NVARCHAR(<span class="number">24</span>),</span><br><span class="line">    [UpdateTime] NVARCHAR(<span class="number">24</span>),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> [PK_Employee] <span class="keyword">PRIMARY</span> KEY  ([EmployeeId])</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="FineBI"><a href="#FineBI" class="headerlink" title="FineBI"></a>FineBI</h3><h4 id="获取-年-x2F-月-时间区间的天数"><a href="#获取-年-x2F-月-时间区间的天数" class="headerlink" title="获取[年&#x2F;月]时间区间的天数"></a>获取[年&#x2F;月]时间区间的天数</h4><p>获取开始时间到结束时间之间的天数，开始时间和结束时间之间为[年&#x2F;月]<br><code>DAYVALUE(MONTHDELTA($&#123;结束时间&#125;,1)) - DAYVALUE($&#123;开始时间&#125;)</code></p>
<p><code>DATEIF($&#123;结束时间&#125;,$&#123;开始时间&#125;,&#39;d&#39;)</code></p>
<h4 id="BI和Report融合工具联动配置"><a href="#BI和Report融合工具联动配置" class="headerlink" title="BI和Report融合工具联动配置"></a>BI和Report融合工具联动配置</h4><p>目前通过web组件的形式实现BI组件联动FR模板，暂不支持FR模板反向联动BI组件；</p>
<ul>
<li><p>在仪表盘中新建web组件</p>
</li>
<li><p>添加网络链接，网络链接的格式为：&#x2F;webroot&#x2F;decision&#x2F;view&#x2F;report？viewlet&#x3D;cptd9585d968ba24baba99508b70fa6e2191688345541337&amp;__bi_report__&#x3D;2a049fdaea3540cfafd8a79c962c9113</p>
</li>
</ul>
<p>其中：viewlet之后的参数为FR模板的链接（支持普通报表和决策报表）；__bi_report__之后的参数为仪表板的ID</p>
<ul>
<li>添加完成后会自动生成__bi_session__和__bi_widget__参数，此部分参数为动态，静态写入不可用。</li>
</ul>
<h4 id="web组件中得report表点击链接跳转后，依然实现联动功能"><a href="#web组件中得report表点击链接跳转后，依然实现联动功能" class="headerlink" title="web组件中得report表点击链接跳转后，依然实现联动功能"></a>web组件中得report表点击链接跳转后，依然实现联动功能</h4><p>需要在跳转到得链接界面传入动态参数__bi_report__，__bi_session__和__bi_widget__</p>
<p><img src="https://resources.kagerou.top/img/blog/bireport03.webp"></p>
<h4 id="点地图自定义提示"><a href="#点地图自定义提示" class="headerlink" title="点地图自定义提示"></a>点地图自定义提示</h4><p>数据配置为单元格配置;</p>
<p><img src="https://resources.kagerou.top/img/blog/piont_map01.webp"></p>
<ul>
<li><p>区域名对应 this.name</p>
</li>
<li><p>系列名对应 this.points[i].seriesName</p>
</li>
<li><p>值对应 this.points[i].value</p>
</li>
</ul>
<p>通过for函数来遍历this.points，通过 if函数判断系列名，针对不同的系列配置不同的样式。</p>
<p>最后打开<strong>使用html解析文本内容</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> points = <span class="variable language_">this</span>.<span class="property">points</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">&#x27;&lt;div style=&quot;font-size: 14px&quot;&gt;&#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;&lt;HR align=center  color=#5F83F9 SIZE=1&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = points.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">points</span>[i].<span class="property">seriesName</span> == <span class="string">&#x27;A&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">            a += <span class="string">&#x27;&lt;span style=&quot;font-size: 12px;color:#DEEFF2&quot;&gt;&#x27;</span> + <span class="variable language_">this</span>.<span class="property">points</span>[i].<span class="property">seriesName</span>  + <span class="string">&#x27;&lt;span/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#x27;</span></span><br><span class="line"></span><br><span class="line">           + <span class="string">&#x27;&lt;span style=&quot;font-size: 12px;color:#F2A917&quot;&gt;&#x27;</span>+  <span class="variable language_">this</span>.<span class="property">points</span>[i].<span class="property">value</span> + <span class="string">&#x27;&lt;span/&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">           + <span class="string">&#x27;&lt;/br&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">points</span>[i].<span class="property">seriesName</span> == <span class="string">&#x27;B&#x27;</span>)&#123;</span><br><span class="line"></span><br><span class="line">            a += <span class="string">&#x27;&lt;span style=&quot;font-size: 12px;color:#DEEFF2&quot;&gt;&#x27;</span> + <span class="variable language_">this</span>.<span class="property">points</span>[i].<span class="property">seriesName</span>  + <span class="string">&#x27;&lt;span/&gt;&amp;nbsp;&amp;nbsp;&#x27;</span></span><br><span class="line"></span><br><span class="line">           + <span class="string">&#x27;&lt;span style=&quot;font-size: 12px;color:#F2A917&quot;&gt;&#x27;</span>+  <span class="variable language_">this</span>.<span class="property">points</span>[i].<span class="property">value</span> + <span class="string">&#x27;&lt;span/&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">           + <span class="string">&#x27;&lt;span style=&quot;font-size: 12px;color:#DEEFF2&quot; &gt;万方&lt;span/&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">           + <span class="string">&#x27;&lt;/br&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">            a += <span class="string">&#x27;&lt;span style=&quot;font-size: 12px;color:#DEEFF2&quot;&gt;&#x27;</span> + <span class="variable language_">this</span>.<span class="property">points</span>[i].<span class="property">seriesName</span>  + <span class="string">&#x27;&lt;span/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#x27;</span></span><br><span class="line"></span><br><span class="line">           + <span class="string">&#x27;&lt;span style=&quot;font-size: 12px;color:#F2A917&quot;&gt;&#x27;</span>+  <span class="variable language_">this</span>.<span class="property">points</span>[i].<span class="property">value</span> + <span class="string">&#x27;&lt;span/&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">           + <span class="string">&#x27;&lt;span style=&quot;font-size: 12px;color:#DEEFF2&quot; &gt;万方&lt;span/&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">           + <span class="string">&#x27;&lt;/br&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a + <span class="string">&#x27;&lt;div/&gt;&#x27;</span>;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="地图通过JavaScript自定义中心点和缩放等级"><a href="#地图通过JavaScript自定义中心点和缩放等级" class="headerlink" title="地图通过JavaScript自定义中心点和缩放等级"></a>地图通过JavaScript自定义中心点和缩放等级</h4><p>对图表添加初始化事件，由于数据查询的时间的问题，通常设置延迟触发。<strong>chart.setMapZoom({[zoomLevel]，[viewCenter]})</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> chart=<span class="variable constant_">FR</span>.<span class="property">Chart</span>.<span class="property">WebUtils</span>.<span class="title function_">getChart</span>(<span class="string">&quot;chart0&quot;</span>).<span class="title function_">getChartWithIndex</span>(<span class="number">0</span>); <span class="comment">//获取chart0图表对象</span></span><br><span class="line"></span><br><span class="line">    chart.<span class="title function_">setMapZoom</span>(&#123;<span class="attr">zoomLevel</span>:<span class="number">4</span>,<span class="attr">viewCenter</span>: [<span class="number">118</span>,<span class="number">32</span>]&#125;); <span class="comment">//设置缩放等级为 4 ，中心点经度为 118，纬度为32</span></span><br><span class="line"></span><br><span class="line">&#125;,<span class="number">3000</span>) <span class="comment">//延时3秒</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="提示点自动轮播"><a href="#提示点自动轮播" class="headerlink" title="提示点自动轮播"></a>提示点自动轮播</h4><p>对图表添加初始化事件，由于数据查询的时间的问题，通常设置延迟触发。<strong>chart.openAutoTooltip([delay],[initpoint]);</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chart =<span class="variable constant_">FR</span>.<span class="property">Chart</span>.<span class="property">WebUtils</span>.<span class="title function_">getChart</span>(<span class="string">&quot;chart0&quot;</span>).<span class="title function_">getChartWithIndex</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启数据提示轮播, 并将轮播控制器绑定到图表对象上</span></span><br><span class="line"></span><br><span class="line">chart.<span class="title function_">openAutoTooltip</span>(); <span class="comment">//参数为delay，轮播间隔时间n毫秒；initpoint 轮播初始点位 例：chart.series[0].points</span></span><br><span class="line"></span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="钻取地图在指定层点击进行跳转"><a href="#钻取地图在指定层点击进行跳转" class="headerlink" title="钻取地图在指定层点击进行跳转"></a>钻取地图在指定层点击进行跳转</h4><p>问题：在使用默认钻取地图时，添加超级链接后，点击第一层行政区块后会触发超级链接，并不会下钻后第二层。我们需要等待他钻取到第二层之后，再按照等二层点击的区县进行数据下钻。比如成都市-&gt;武侯区-&gt;武侯区明细表。</p>
<p>处理：当点击链接的时候，可以直接获取到点击区域的区域名，再提前获取到要钻取的数据集，通过匹配点击的区域名是否在对应数据集中就可以来控制是否执行超级链接。</p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">公式</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">county_names</td>
<td align="center">&#x3D;data.county_names</td>
<td align="left">所有区县名</td>
</tr>
<tr>
<td align="center">county_name</td>
<td align="center">&#x3D;AREA_NAME</td>
<td align="left">区域名&#x2F;用于传参给下钻报表，等于“武侯区”</td>
</tr>
<tr>
<td align="center">bi_report</td>
<td align="center">&#x3D;$_<em>bi_report</em>_</td>
<td align="left">融合工具参数</td>
</tr>
<tr>
<td align="center">bi_widget</td>
<td align="center">&#x3D;$_<em>bi_widget</em>_</td>
<td align="left">融合工具参数</td>
</tr>
<tr>
<td align="center">bi_session</td>
<td align="center">&#x3D;$_<em>bi_session</em>_</td>
<td align="left">融合工具参数</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> chart = <span class="variable constant_">FR</span>.<span class="property">Chart</span>.<span class="property">WebUtils</span>.<span class="title function_">getChart</span>(<span class="string">&quot;chart0&quot;</span>).<span class="title function_">getChartWithIndex</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">var</span> names = chart.<span class="title function_">getLayerNames</span>(); <span class="comment">//获取钻取目录层级名</span></span><br><span class="line"><span class="keyword">var</span> layer = chart.<span class="title function_">getLayerIndex</span>(); <span class="comment">//获取钻取层级</span></span><br><span class="line"><span class="comment">//如果当前钻取层级是第二层，那么将参数province传给报表块</span></span><br><span class="line"><span class="keyword">if</span> (county_names.<span class="title function_">includes</span>(county_name))&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(names+<span class="string">&#x27;-&#x27;</span>+layer + <span class="string">&#x27;-&#x27;</span>+ county_name)</span><br><span class="line">     location=<span class="built_in">encodeURI</span>(<span class="built_in">encodeURI</span>(<span class="string">&quot;/decision/view/form?viewlet=frm85a7014a8ad944d6a4ecba5001dd483d1698290236362&amp;ref_t=design&amp;ref_c=a29ee7c0-51e9-4192-8401-ea1750901953&amp;__bi_report__=&quot;</span>+bi_report+<span class="string">&quot;&amp;__bi_widget__=&quot;</span>+bi_widget+<span class="string">&quot;&amp;__bi_session__=&quot;</span>+bi_session+<span class="string">&quot;&amp;COUNTY_NAME=&quot;</span>+county_name));</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>持续更新</p>
<h3 id="FineReport"><a href="#FineReport" class="headerlink" title="FineReport"></a>FineReport</h3><h4 id="动态SQL参数"><a href="#动态SQL参数" class="headerlink" title="动态SQL参数"></a>动态SQL参数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">where</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line">$&#123;if(len(NY)<span class="operator">=</span><span class="operator">=</span><span class="number">0</span>,&quot;&quot;,&quot;and NY like &#x27;&quot;<span class="operator">+</span>NY<span class="operator">+</span>&quot;&#x27;&quot;)&#125;</span><br></pre></td></tr></table></figure>

<h4 id="导出模板按钮"><a href="#导出模板按钮" class="headerlink" title="导出模板按钮"></a>导出模板按钮</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> url=<span class="string">&quot;$&#123;servletURL&#125;?viewlet=./test.cpt&quot;</span></span><br><span class="line"><span class="keyword">var</span> config = &#123;  </span><br><span class="line">            <span class="comment">//配置默认查询参数，</span></span><br><span class="line">            <span class="attr">ny</span>:<span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">form</span>.<span class="title function_">getWidgetByName</span>(<span class="string">&quot;ny&quot;</span>).<span class="title function_">getValue</span>(),</span><br><span class="line">            <span class="attr">format</span>:<span class="string">&quot;excel&quot;</span>,</span><br><span class="line">            <span class="attr">extype</span>:<span class="string">&quot;simple&quot;</span></span><br><span class="line">              &#125;  </span><br><span class="line"><span class="variable constant_">FR</span>.<span class="title function_">doHyperlinkByPost</span>(url,config)</span><br></pre></td></tr></table></figure>

<h4 id="校验并提交按钮"><a href="#校验并提交按钮" class="headerlink" title="校验并提交按钮"></a>校验并提交按钮</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">_g</span>().<span class="title function_">verifyAndWriteReport</span>();</span><br><span class="line"><span class="comment">//校验并提交</span></span><br></pre></td></tr></table></figure>

<h4 id="Excel自定义导入按钮"><a href="#Excel自定义导入按钮" class="headerlink" title="Excel自定义导入按钮"></a>Excel自定义导入按钮</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">_g</span>().importExcel(<span class="string">&quot;customize&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="删除按钮保留最后一行"><a href="#删除按钮保留最后一行" class="headerlink" title="删除按钮保留最后一行"></a>删除按钮保留最后一行</h4><p>删除按钮控件名称为 ‘del’ , 可见设置为 true，可用设置为 false</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置最后一行删除键不可用</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;del&#x27;</span>];</span><br><span class="line">     <span class="comment">//定义需要执行事件的删除行按钮名称数组，如有多组则写法为[&#x27;sc1&#x27;,&#x27;sc2&#x27;]</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> kj = $(<span class="string">&#x27;[widgetname=&quot;&#x27;</span> + arr[i].<span class="title function_">toUpperCase</span>() + <span class="string">&#x27;&quot;]:visible&#x27;</span>);</span><br><span class="line">  <span class="comment">//获取页面上可见的删除行按钮元素</span></span><br><span class="line">  <span class="keyword">var</span> del = <span class="title function_">_g</span>().<span class="title function_">getWidgetsByName</span>(arr[i].<span class="title function_">toUpperCase</span>());</span><br><span class="line">  <span class="comment">//根据名字获取删除行按钮</span></span><br><span class="line">  <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; del.<span class="property">length</span>; j++) &#123;</span><br><span class="line">    kj.<span class="property">length</span> &lt;= <span class="number">1</span> ? del[j].<span class="title function_">setEnable</span>(<span class="literal">false</span>) : del[j].<span class="title function_">setEnable</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//当控件只剩1个时，禁用控件，否则遍历启用所有控件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="修改默认按钮的背景色"><a href="#修改默认按钮的背景色" class="headerlink" title="修改默认按钮的背景色"></a>修改默认按钮的背景色</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改默认按钮的背景色</span></span><br><span class="line">$(<span class="string">&#x27;.fr-btn-up&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;background&#x27;</span>,<span class="string">&#x27;#fff0&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="部分美化（一）"><a href="#部分美化（一）" class="headerlink" title="部分美化（一）"></a>部分美化（一）</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//隐藏查询框折叠按钮</span></span><br><span class="line">$(<span class="string">&#x27;.parameter-container-collapseimg-up&#x27;</span>).<span class="title function_">removeClass</span>(<span class="string">&#x27;parameter-container-collapseimg-up&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//隐藏选中控件边框</span></span><br><span class="line">$(<span class="string">&#x27;.fDright&#x27;</span>).<span class="title function_">removeClass</span>(<span class="string">&#x27;fDright&#x27;</span>); </span><br><span class="line">$(<span class="string">&#x27;.fDbottom&#x27;</span>).<span class="title function_">removeClass</span>(<span class="string">&#x27;fDbottom&#x27;</span>); </span><br><span class="line">$(<span class="string">&#x27;.fDtop&#x27;</span>).<span class="title function_">removeClass</span>(<span class="string">&#x27;fDtop&#x27;</span>); </span><br><span class="line">$(<span class="string">&#x27;.fDleft&#x27;</span>).<span class="title function_">removeClass</span>(<span class="string">&#x27;fDleft&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改选中控件边框颜色</span></span><br><span class="line"><span class="comment">//$(&#x27;.fDright&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;); </span></span><br><span class="line"><span class="comment">//$(&#x27;.fDbottom&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);</span></span><br><span class="line"><span class="comment">//$(&#x27;.fDtop&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;); </span></span><br><span class="line"><span class="comment">//$(&#x27;.fDleft&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//修改编辑控件时，聚焦的边框颜色</span></span><br><span class="line">$(<span class="string">&#x27;.x-editor&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;border&#x27;</span>,<span class="string">&#x27;2px solid #36d12a&#x27;</span>);</span><br><span class="line">$(<span class="string">&#x27;.fr-texteditor&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;border&#x27;</span>,<span class="string">&#x27;2px solid #36d12a&#x27;</span>);</span><br><span class="line">$(<span class="string">&#x27;.editor-transparent&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;border&#x27;</span>,<span class="string">&#x27;2px solid #36d12a&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="配置单行编辑结束后的更新时间和更新人"><a href="#配置单行编辑结束后的更新时间和更新人" class="headerlink" title="配置单行编辑结束后的更新时间和更新人"></a>配置单行编辑结束后的更新时间和更新人</h4><p>通过控件“编辑结束”事件，配置setCellValue()函数来更改指定单元格的值</p>
<p>user_name &#x3D; $fine_username<br>update_time &#x3D; FORMAT(NOW(),”yyyy-MM-dd HH:mm:ss”)<br>user_cell &#x3D; “更新人所在的单元格列号” + ROW()<br>update_time &#x3D; “更新时间所在的单元格列号” + ROW()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">_g</span>().<span class="title function_">setCellValue</span>(user_cell, user_name);</span><br><span class="line"><span class="title function_">_g</span>().<span class="title function_">setCellValue</span>(time_cell, update_time);</span><br></pre></td></tr></table></figure>

<h4 id="round-函数计算精度丢失问题"><a href="#round-函数计算精度丢失问题" class="headerlink" title="round()函数计算精度丢失问题"></a>round()函数计算精度丢失问题</h4><p>通常在使用round函数的时候会依照参数保留小数位的值并自动四舍五入，但是由于float的精度问题，可能会导致round函数的功能失效，此时在fr中的round()有第三个参数来控制是否过量计算的问题。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">round</span>(<span class="number">9999.999</span> / <span class="number">9999.99999</span>,<span class="number">2</span>,<span class="literal">true</span>) * <span class="number">100</span>; <span class="comment">// 100</span></span><br><span class="line"><span class="title function_">round</span>(<span class="number">9999.999</span> / <span class="number">9999.99999</span>,<span class="number">2</span>,<span class="literal">false</span>) * <span class="number">100</span>; <span class="comment">// 99.9999...</span></span><br></pre></td></tr></table></figure>

<p>在JS的Math.round()函数中不存在此项问题。</p>
<h4 id="气泡图分数据类型显示颜色及大小"><a href="#气泡图分数据类型显示颜色及大小" class="headerlink" title="气泡图分数据类型显示颜色及大小"></a>气泡图分数据类型显示颜色及大小</h4><p><a href="https://bbs.fanruan.com/wenda/question/30543.html">原问题链接</a></p>
<blockquote>
<p>各位大佬，我想问一下，如果我在制作帆软报表的时候，我有两个维度的内容需要呈现，第一个维度是：每个地区的销售人员数量。第二个维度是：每个地区的销售额。这个怎么在地图上显示。销售人员越多。气泡颜色越深，销售额越多，气泡越大。谢谢各位大佬。</p>
</blockquote>
<p>表模型：</p>
<table>
<thead>
<tr>
<th align="left">地区</th>
<th align="center">销售人数</th>
<th align="center">销售额</th>
</tr>
</thead>
<tbody><tr>
<td align="left">A</td>
<td align="center">18</td>
<td align="center">300</td>
</tr>
<tr>
<td align="left">B</td>
<td align="center">20</td>
<td align="center">400</td>
</tr>
<tr>
<td align="left">C</td>
<td align="center">22</td>
<td align="center">500</td>
</tr>
</tbody></table>
<p>通常在设置气泡图数据配置的时候，地区为系列，x为销售人数，y为销售额，大小为销售额,在条件显示中设置条件属性，来配置不同的x&#x2F;销售人数,y&#x2F;销售额，气泡显示的颜色及大小。</p>
<p><strong>展开说一下</strong>在点地图中的气泡图如何分数据类型显示颜色及大小</p>
<p>相较于点地图中，数据配置没有x&#x2F;y，代替的是区域名匹配或者是经纬度坐标。<br>解决方案就是表模型新增列：颜色分类，将不同的人数分组成不同的颜色</p>
<table>
<thead>
<tr>
<th align="left">地区</th>
<th align="center">销售人数</th>
<th align="center">销售额</th>
<th align="center">颜色分类</th>
</tr>
</thead>
<tbody><tr>
<td align="left">A</td>
<td align="center">18</td>
<td align="center">300</td>
<td align="center">red</td>
</tr>
<tr>
<td align="left">B</td>
<td align="center">20</td>
<td align="center">400</td>
<td align="center">green</td>
</tr>
<tr>
<td align="left">C</td>
<td align="center">22</td>
<td align="center">500</td>
<td align="center">blue</td>
</tr>
</tbody></table>
<p>使用<strong>单元格数据</strong>  第一列的<strong>系列名</strong>为 <em>D2</em> 单元格 <strong>值</strong>为 <em>C2</em> 单元格，在条件显示中设置条件属性，配置<strong>系列名称</strong> 等于 “red” 时设置气泡为红色，此时气泡的大小就会根据销售额的值变化，颜色会根据颜色分类的每一列的值为变化。</p>
<p>缺点：颜色无法根据销售人数做到无极更变，而是类似于区域显示一样的分组颜色显示。若需要提示点时，需要自定义提示内容来更变系列名显示为red值的问题。</p>
<h4 id="BI和Report融合工具联动配置-1"><a href="#BI和Report融合工具联动配置-1" class="headerlink" title="BI和Report融合工具联动配置"></a>BI和Report融合工具联动配置</h4><p>目前通过web组件的形式实现BI组件联动FR模板，暂不支持FR模板反向联动BI组件；</p>
<ul>
<li>在仪表盘中新建web组件</li>
<li>添加网络链接，网络链接的格式为：&#x2F;webroot&#x2F;decision&#x2F;view&#x2F;report？viewlet&#x3D;cptd9585d968ba24baba99508b70fa6e2191688345541337&amp;__bi_report__&#x3D;2a049fdaea3540cfafd8a79c962c9113<br>其中：viewlet之后的参数为FR模板的链接（支持普通报表和决策报表）；__bi_report__之后的参数为仪表板的ID</li>
<li>添加完成后会自动生成__bi_session__和__bi_widget__参数，此部分参数为动态，静态写入不可用。</li>
</ul>
<h4 id="web组件中得report表点击链接跳转后，依然实现联动功能-1"><a href="#web组件中得report表点击链接跳转后，依然实现联动功能-1" class="headerlink" title="web组件中得report表点击链接跳转后，依然实现联动功能"></a>web组件中得report表点击链接跳转后，依然实现联动功能</h4><p>需要在跳转到得链接界面传入动态参数__bi_report__，__bi_session__和__bi_widget__</p>
<p><img src="https://resources.kagerou.top/img/blog/bireport03.webp"></p>
<h4 id="点地图自定义提示-1"><a href="#点地图自定义提示-1" class="headerlink" title="点地图自定义提示"></a>点地图自定义提示</h4><p>数据配置为单元格配置;</p>
<p><img src="https://resources.kagerou.top/img/blog/piont_map01.webp"></p>
<ul>
<li>区域名对应 this.name</li>
<li>系列名对应 this.points[i].seriesName</li>
<li>值对应 this.points[i].value</li>
</ul>
<p>通过for函数来遍历this.points，通过 if函数判断系列名，针对不同的系列配置不同的样式。<br>最后打开<strong>使用html解析文本内容</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">    <span class="keyword">var</span> points = <span class="variable language_">this</span>.<span class="property">points</span>;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">&#x27;&lt;div style=&quot;font-size: 14px&quot;&gt;&#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;&lt;HR align=center  color=#5F83F9 SIZE=1&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = points.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">points</span>[i].<span class="property">seriesName</span> == <span class="string">&#x27;A&#x27;</span>) &#123;</span><br><span class="line">            a += <span class="string">&#x27;&lt;span style=&quot;font-size: 12px;color:#DEEFF2&quot;&gt;&#x27;</span> + <span class="variable language_">this</span>.<span class="property">points</span>[i].<span class="property">seriesName</span>  + <span class="string">&#x27;&lt;span/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#x27;</span> </span><br><span class="line">           + <span class="string">&#x27;&lt;span style=&quot;font-size: 12px;color:#F2A917&quot;&gt;&#x27;</span>+  <span class="variable language_">this</span>.<span class="property">points</span>[i].<span class="property">value</span> + <span class="string">&#x27;&lt;span/&gt;&#x27;</span> </span><br><span class="line">           + <span class="string">&#x27;&lt;/br&gt;&#x27;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">points</span>[i].<span class="property">seriesName</span> == <span class="string">&#x27;B&#x27;</span>)&#123;</span><br><span class="line">            a += <span class="string">&#x27;&lt;span style=&quot;font-size: 12px;color:#DEEFF2&quot;&gt;&#x27;</span> + <span class="variable language_">this</span>.<span class="property">points</span>[i].<span class="property">seriesName</span>  + <span class="string">&#x27;&lt;span/&gt;&amp;nbsp;&amp;nbsp;&#x27;</span> </span><br><span class="line">           + <span class="string">&#x27;&lt;span style=&quot;font-size: 12px;color:#F2A917&quot;&gt;&#x27;</span>+  <span class="variable language_">this</span>.<span class="property">points</span>[i].<span class="property">value</span> + <span class="string">&#x27;&lt;span/&gt;&#x27;</span> </span><br><span class="line">           + <span class="string">&#x27;&lt;span style=&quot;font-size: 12px;color:#DEEFF2&quot; &gt;万方&lt;span/&gt;&#x27;</span></span><br><span class="line">           + <span class="string">&#x27;&lt;/br&gt;&#x27;</span></span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            a += <span class="string">&#x27;&lt;span style=&quot;font-size: 12px;color:#DEEFF2&quot;&gt;&#x27;</span> + <span class="variable language_">this</span>.<span class="property">points</span>[i].<span class="property">seriesName</span>  + <span class="string">&#x27;&lt;span/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#x27;</span> </span><br><span class="line">           + <span class="string">&#x27;&lt;span style=&quot;font-size: 12px;color:#F2A917&quot;&gt;&#x27;</span>+  <span class="variable language_">this</span>.<span class="property">points</span>[i].<span class="property">value</span> + <span class="string">&#x27;&lt;span/&gt;&#x27;</span> </span><br><span class="line">           + <span class="string">&#x27;&lt;span style=&quot;font-size: 12px;color:#DEEFF2&quot; &gt;万方&lt;span/&gt;&#x27;</span></span><br><span class="line">           + <span class="string">&#x27;&lt;/br&gt;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a + <span class="string">&#x27;&lt;div/&gt;&#x27;</span>;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="地图通过JavaScript自定义中心点和缩放等级-1"><a href="#地图通过JavaScript自定义中心点和缩放等级-1" class="headerlink" title="地图通过JavaScript自定义中心点和缩放等级"></a>地图通过JavaScript自定义中心点和缩放等级</h4><p>对图表添加初始化事件，由于数据查询的时间的问题，通常设置延迟触发。<strong>chart.setMapZoom({[zoomLevel]，[viewCenter]})</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> chart=<span class="variable constant_">FR</span>.<span class="property">Chart</span>.<span class="property">WebUtils</span>.<span class="title function_">getChart</span>(<span class="string">&quot;chart0&quot;</span>).<span class="title function_">getChartWithIndex</span>(<span class="number">0</span>); <span class="comment">//获取chart0图表对象</span></span><br><span class="line">    chart.<span class="title function_">setMapZoom</span>(&#123;<span class="attr">zoomLevel</span>:<span class="number">4</span>,<span class="attr">viewCenter</span>: [<span class="number">118</span>,<span class="number">32</span>]&#125;); <span class="comment">//设置缩放等级为 4 ，中心点经度为 118，纬度为32</span></span><br><span class="line">&#125;,<span class="number">3000</span>) <span class="comment">//延时3秒</span></span><br></pre></td></tr></table></figure>

<h4 id="提示点自动轮播-1"><a href="#提示点自动轮播-1" class="headerlink" title="提示点自动轮播"></a>提示点自动轮播</h4><p>对图表添加初始化事件，由于数据查询的时间的问题，通常设置延迟触发。<strong>chart.openAutoTooltip([delay],[initpoint]);</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> chart =<span class="variable constant_">FR</span>.<span class="property">Chart</span>.<span class="property">WebUtils</span>.<span class="title function_">getChart</span>(<span class="string">&quot;chart0&quot;</span>).<span class="title function_">getChartWithIndex</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 开启数据提示轮播, 并将轮播控制器绑定到图表对象上</span></span><br><span class="line">chart.<span class="title function_">openAutoTooltip</span>(); <span class="comment">//参数为delay，轮播间隔时间n毫秒；initpoint 轮播初始点位 例：chart.series[0].points</span></span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<h4 id="隐藏sheet"><a href="#隐藏sheet" class="headerlink" title="隐藏sheet"></a>隐藏sheet</h4><p>隐藏下方sheet控制栏</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.fr-tabpane-controlbuttons.ui-state-enabled&quot;</span>).<span class="title function_">hide</span>()</span><br><span class="line">$(<span class="string">&quot;.fr-tabpane-tabscontent-bg&quot;</span>).<span class="title function_">hide</span>();</span><br></pre></td></tr></table></figure>

<h4 id="层次坐标-获取交叉表的单元格值"><a href="#层次坐标-获取交叉表的单元格值" class="headerlink" title="层次坐标-获取交叉表的单元格值"></a>层次坐标-获取交叉表的单元格值</h4><p>B2[A2:1 ;B1] 获取B2值中B1所有列的，A2第一行的值。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>BI</tag>
        <tag>帆软</tag>
      </tags>
  </entry>
  <entry>
    <title>帆软交付认证模拟题FR1101</title>
    <url>/2023/09/21/fr1101/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>题目要求</p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1101-0.webp" alt="题目要求"><br>模板要求</p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1101-1.webp" alt="模板要求"></p>
<h3 id="处理数据集"><a href="#处理数据集" class="headerlink" title="处理数据集"></a>处理数据集</h3><p>通过分析题目，发现需要三个数据集，分别是：<br>    - 产品类别<br>    - 产品名称<br>    - 主数据</p>
<h4 id="产品类别"><a href="#产品类别" class="headerlink" title="产品类别"></a>产品类别</h4><p>产品类别数据来源于产品类别表，为顶层查询，无参数影响，可以直接查询，</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> x.类别名称,x.类别ID</span><br><span class="line"><span class="keyword">FROM</span> 产品类别 x</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h4 id="产品名称"><a href="#产品名称" class="headerlink" title="产品名称"></a>产品名称</h4><p>产品名称数据来源于产品表，为一级查询，查询条件受产品类别影响，需要使用产品类别参数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT x.产品名称</span><br><span class="line">FROM 产品 x</span><br><span class="line">WHERE 1 = 1</span><br><span class="line">$&#123;if(len(com_prod_type)==0,&quot;&quot;,&quot;and x.类别ID in (&#x27;&quot;+com_prod_type+&quot;&#x27;)&quot;)&#125;</span><br></pre></td></tr></table></figure>

<p>其中<strong>com_prod_type</strong>为产品类别的实际值：<strong>类别ID</strong></p>
<h3 id="主数据集"><a href="#主数据集" class="headerlink" title="主数据集"></a>主数据集</h3><p>主数据集主要统计销售数据量，即查询出个产品的销售数量即可。同时主数据集受<strong>产品类别</strong>，<strong>产品名称</strong>查询影响。由于不允许在单元格上计算，所以在数据集中直接连表查询出结果并汇总计算。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(x.数量) &quot;总数量&quot;,y.产品名称 ,z.类别名称 </span><br><span class="line"><span class="keyword">FROM</span> 订单明细 x,产品 y,产品类别 z</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">AND</span> X.产品ID <span class="operator">=</span> Y.产品ID </span><br><span class="line"><span class="keyword">AND</span> Y.类别ID <span class="operator">=</span> Z.类别ID </span><br><span class="line">$&#123;if(len(com_prod_type)<span class="operator">=</span><span class="operator">=</span><span class="number">0</span>,&quot;&quot;,&quot;and y.类别ID in (&#x27;&quot;<span class="operator">+</span>com_prod_type<span class="operator">+</span>&quot;&#x27;)&quot;)&#125;</span><br><span class="line">$&#123;if(len(com_prod_name)<span class="operator">=</span><span class="operator">=</span><span class="number">0</span>,&quot;&quot;,&quot;and y.产品名称 in (&#x27;&quot;<span class="operator">+</span>com_prod_name<span class="operator">+</span>&quot;&#x27;)&quot;)&#125;</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> y.产品名称 ,z.类别名称 </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> z.类别ID ,y.产品ID </span><br></pre></td></tr></table></figure>

<h3 id="查询框设计"><a href="#查询框设计" class="headerlink" title="查询框设计"></a>查询框设计</h3><p>为两个lab框，两个复选框，一个查询按钮</p>
<h4 id="com-prod-type复选框"><a href="#com-prod-type复选框" class="headerlink" title="com_prod_type复选框"></a>com_prod_type复选框</h4><p>数据字典：</p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1101-2.webp"></p>
<p>控件设置：</p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1101-3.webp"></p>
<h4 id="com-prod-name复选框"><a href="#com-prod-name复选框" class="headerlink" title="com_prod_name复选框"></a>com_prod_name复选框</h4><p>数据字典：</p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1101-4.webp"><br>控件设置：</p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1101-5.webp"></p>
<h3 id="主表设计"><a href="#主表设计" class="headerlink" title="主表设计"></a>主表设计</h3><p><img src="https://resources.kagerou.top/img/blog/fr-1101-6.webp"></p>
<h4 id="表头"><a href="#表头" class="headerlink" title="表头"></a>表头</h4><p>背景为深蓝色，字体为白色、微软雅黑、12号，全黑色边框</p>
<h4 id="表体"><a href="#表体" class="headerlink" title="表体"></a>表体</h4><p>字体为黑色、微软雅黑、10号，全黑色边框</p>
<h4 id="隔行换色"><a href="#隔行换色" class="headerlink" title="隔行换色"></a>隔行换色</h4><p>给产品名称和销售数量设置条件属性，添加条件-背景-选择淡蓝色-设置公式为<strong>rwo()%2&#x3D;&#x3D;0</strong></p>
<h4 id="销售数量大于1000显示红色"><a href="#销售数量大于1000显示红色" class="headerlink" title="销售数量大于1000显示红色"></a>销售数量大于1000显示红色</h4><p>给销售数量设置条件属性，添加条件-字体-选择微软雅黑&#x2F;加粗&#x2F;10号&#x2F;红色-设置条件为 大于1000</p>
<h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h3><p><img src="https://resources.kagerou.top/img/blog/fr-1101-7.webp">
       </p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>帆软</tag>
        <tag>题目</tag>
      </tags>
  </entry>
  <entry>
    <title>帆软交付认证模拟题FR1102</title>
    <url>/2023/09/21/fr1102/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>题目要求</p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1102-0.webp"></p>
<p>模板要求</p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1102-1.webp"><br><img src="https://resources.kagerou.top/img/blog/fr-1102-2.webp"></p>
<h3 id="处理数据集"><a href="#处理数据集" class="headerlink" title="处理数据集"></a>处理数据集</h3><p>通过分析题目，发现需要四个数据集，分别是：<br>    - 班级成绩汇总表<br>    - 班级成绩明细表<br>    - 各科平均成绩对比<br>    - 男女生平均成绩对比</p>
<h4 id="班级成绩汇总表"><a href="#班级成绩汇总表" class="headerlink" title="班级成绩汇总表"></a>班级成绩汇总表</h4><p>班级成绩汇总表数据来源于STSCORE表，无参数影响，可以直接查询，以班级为分组，对总成绩汇总求和。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.CLASSNO,<span class="built_in">SUM</span>(s.GRADE) <span class="keyword">AS</span> GRADE</span><br><span class="line"><span class="keyword">FROM</span> STSCORE s </span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s.CLASSNO</span><br></pre></td></tr></table></figure>

<h4 id="班级成绩明细表"><a href="#班级成绩明细表" class="headerlink" title="班级成绩明细表"></a>班级成绩明细表</h4><p>班级成绩明细表数据来源于STSCORE表，存在联动，需要参数classno来过滤结果。<br>表中性别字段实际值为F&#x2F;M，在明细表展示时需要做一下处理。将F判断为女，其余为男。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.<span class="operator">*</span>,</span><br><span class="line">	   <span class="keyword">CASE</span> s.SEX <span class="keyword">WHEN</span> <span class="string">&#x27;F&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">ElSE</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">END</span> SEX_CN </span><br><span class="line"><span class="keyword">FROM</span> STSCORE s </span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">$&#123;if(len(classno)<span class="operator">=</span><span class="operator">=</span><span class="number">0</span>,&quot;&quot;,&quot;AND s.classno =&#x27;&quot;<span class="operator">+</span>classno<span class="operator">+</span>&quot;&#x27;&quot;)&#125;</span><br></pre></td></tr></table></figure>

<h4 id="各科平均成绩对比"><a href="#各科平均成绩对比" class="headerlink" title="各科平均成绩对比"></a>各科平均成绩对比</h4><p>班级成绩明细表数据来源于STSCORE表，存在联动，需要参数classno来过滤结果。<br>以科目为分组，对总成绩汇总平均。同时处理性别字段的显示值。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.COURSE COURSE </span><br><span class="line">	  ,round(<span class="built_in">avg</span>(s.GRADE),<span class="number">2</span>) GRADE</span><br><span class="line"><span class="keyword">FROM</span> STSCORE s </span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">$&#123;if(len(classno)<span class="operator">=</span><span class="operator">=</span><span class="number">0</span>,&quot;&quot;,&quot;AND s.classno =&#x27;&quot;<span class="operator">+</span>classno<span class="operator">+</span>&quot;&#x27;&quot;)&#125;</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s.COURSE</span><br></pre></td></tr></table></figure>

<h4 id="男女生平均成绩对比"><a href="#男女生平均成绩对比" class="headerlink" title="男女生平均成绩对比"></a>男女生平均成绩对比</h4><p>班级成绩明细表数据来源于STSCORE表，存在联动，需要参数classno来过滤结果。<br>以性别为分组，对总成绩汇总平均。同时处理性别字段的显示值。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span> s.SEX <span class="keyword">WHEN</span> <span class="string">&#x27;F&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">ElSE</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">END</span> SEX </span><br><span class="line">	  ,round(<span class="built_in">avg</span>(s.GRADE),<span class="number">2</span>) GRADE</span><br><span class="line"><span class="keyword">FROM</span> STSCORE s </span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">$&#123;if(len(classno)<span class="operator">=</span><span class="operator">=</span><span class="number">0</span>,&quot;&quot;,&quot;AND s.classno =&#x27;&quot;<span class="operator">+</span>classno<span class="operator">+</span>&quot;&#x27;&quot;)&#125;</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s.SEX</span><br></pre></td></tr></table></figure>

<h3 id="主表设计"><a href="#主表设计" class="headerlink" title="主表设计"></a>主表设计</h3><h4 id="成绩汇总饼图"><a href="#成绩汇总饼图" class="headerlink" title="成绩汇总饼图"></a>成绩汇总饼图</h4><p>插入图表-饼图</p>
<p>设置数据<br>    - 数据集：班级成绩汇总表<br>    - 分类：无<br>    - 系列名：classno<br>    - 值：grade<br>设置样式<br>    - 标题-文本：’各班级成绩汇总’<br>    - 标签：启动标签<br>    - 系列<br>      - 渐变风格：开<br>      - 配色方案：新特性<br>设置特效<br>    - 交互属性-添加连接-动态参数：classno为系列名称</p>
<h4 id="男女生平均成绩柱状图"><a href="#男女生平均成绩柱状图" class="headerlink" title="男女生平均成绩柱状图"></a>男女生平均成绩柱状图</h4><p>插入图表-柱状图</p>
<p>设置数据<br>    - 数据集：男女生平均成绩对比<br>    - 分类：SEX<br>    - 系列名：无<br>    - 值：GRADE</p>
<p>设置样式<br>    - 标题-文本：&#x3D;$classno+’男女生平均成绩对比’<br>其他略</p>
<h4 id="各科平均成绩条形图"><a href="#各科平均成绩条形图" class="headerlink" title="各科平均成绩条形图"></a>各科平均成绩条形图</h4><p>插入图表-条形图</p>
<p>设置数据<br>    - 数据集：各科平均成绩对比<br>    - 分类：COURSE<br>    - 系列名：无<br>    - 值：GRADE</p>
<p>设置样式<br>    - 标题-文本：&#x3D;$classno+’各科平均成绩对比’<br>其他略</p>
<h4 id="学生成绩明细表"><a href="#学生成绩明细表" class="headerlink" title="学生成绩明细表"></a>学生成绩明细表</h4><p>表体：</p>
<table>
<thead>
<tr>
<th align="center">班级</th>
<th align="center">学号</th>
<th align="center">姓名</th>
<th align="center">性别</th>
<th align="center">明细表.COURSE</th>
</tr>
</thead>
<tbody><tr>
<td align="center">明细表.CLASSNO</td>
<td align="center">明细表.STUDENTNO</td>
<td align="center">明细表.NAME</td>
<td align="center">明细表.SEX_CN</td>
<td align="center">明细表.GRADE</td>
</tr>
</tbody></table>
<p>如图：</p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1102-3.webp"></p>
<p>其中<strong>明细表.COURSE</strong> 扩展方式为横向扩展。</p>
<p>整体列宽调整为35</p>
<p>表头背景为深蓝色，字体为白色、微软雅黑、12号，全黑色边框</p>
<p>表体字体为黑色、微软雅黑、10号，全黑色边框</p>
<p>学号、姓名、性别和明细表.COURSE设置条件属性，添加条件-背景-选择淡蓝色-设置公式为<strong>rwo()%2&#x3D;&#x3D;0</strong></p>
<p>明细表.GRADE设置条件属性，添加条件-字体-选择微软雅黑&#x2F;加粗&#x2F;10号&#x2F;红色-设置条件为 <strong>小于60</strong></p>
<h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h3><p><img src="https://resources.kagerou.top/img/blog/fr-1102-4.webp"></p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1102-5.webp"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>帆软</tag>
        <tag>题目</tag>
      </tags>
  </entry>
  <entry>
    <title>帆软交付认证模拟题FR1104</title>
    <url>/2023/09/27/fr1104/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>题目要求</p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1104-0.webp"></p>
<p>模板要求</p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1104-1.webp"></p>
<h3 id="处理数据集"><a href="#处理数据集" class="headerlink" title="处理数据集"></a>处理数据集</h3><p>数据集为<br>    - 控件数据集-分公司名称<br>    - 主表数据集-Equipment<br>    - 附表数据集-EquipmentDetail</p>
<h4 id="分公司名称"><a href="#分公司名称" class="headerlink" title="分公司名称"></a>分公司名称</h4><p>用于查询控件数据字典</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.Company</span><br><span class="line"><span class="keyword">FROM</span> Equipment e</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h4 id="Equipment"><a href="#Equipment" class="headerlink" title="Equipment"></a>Equipment</h4><p>用于表主体展示数据，同时由分公司参数控制</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Equipment e</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">$&#123;if(len(com_comp_name)<span class="operator">=</span><span class="operator">=</span><span class="number">0</span>,&quot;&quot;,&quot;and e.Company = &#x27;&quot;<span class="operator">+</span>com_comp_name<span class="operator">+</span>&quot;&#x27;&quot;)&#125;</span><br></pre></td></tr></table></figure>

<h4 id="EquipmentDetail"><a href="#EquipmentDetail" class="headerlink" title="EquipmentDetail"></a>EquipmentDetail</h4><p>用于表子表展示数据，同时由分公司参数控制，按照ID排序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ed.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> EquipmentDetail ed,Equipment e</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">AND</span> ed.CompanyID <span class="operator">=</span> e.CompanyID</span><br><span class="line">$&#123;if(len(com_comp_name)<span class="operator">=</span><span class="operator">=</span><span class="number">0</span>,&quot;&quot;,&quot;and e.Company = &#x27;&quot;<span class="operator">+</span>com_comp_name<span class="operator">+</span>&quot;&#x27;&quot;)&#125;</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">CAST</span>(ed.EquipmentID <span class="keyword">AS</span> <span class="type">INTEGER</span>)</span><br></pre></td></tr></table></figure>

<h3 id="查询控件"><a href="#查询控件" class="headerlink" title="查询控件"></a>查询控件</h3><p>分公司查询框为下拉框控件，数据字典为<strong>分公司</strong>名字数据集，控件名称为<strong>com_comp_name</strong></p>
<h3 id="主表设计"><a href="#主表设计" class="headerlink" title="主表设计"></a>主表设计</h3><p>按照题目效果格式设置报表样式，效果如下：<br><img src="https://resources.kagerou.top/img/blog/fr-1104-2.webp"></p>
<p>为每一个需要填报的单元格设置好对应的文本、数字或者按钮控件，并放入对应的数据集查询结果字段。</p>
<p>设置第8行子表隔行显示。</p>
<p>增加按钮为插入行按钮，指定单元格为<strong>A8</strong></p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1104-3.webp"></p>
<p>删除按钮为按钮控件，基本设置如下图：</p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1104-4.webp"></p>
<p>同时设置点击事件-javascript脚本，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cell = <span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">location</span>;</span><br><span class="line"><span class="comment">//获取当前控件所在单元格的编号</span></span><br><span class="line"><span class="variable constant_">FR</span>.<span class="property">Msg</span>.<span class="title function_">confirm</span>(<span class="string">&quot;警告&quot;</span>, <span class="string">&quot;确定要删除吗？&quot;</span>, <span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> (value) &#123;</span><br><span class="line">		<span class="title function_">_g</span>().<span class="title function_">deleteReportRC</span>(cell);</span><br><span class="line">		<span class="comment">//删除当前行</span></span><br><span class="line">		<span class="title function_">_g</span>().<span class="title function_">verifyAndWriteReport</span>();</span><br><span class="line">		<span class="comment">//校验并提交</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">_g</span>().<span class="title function_">refreshAllSheets</span>()</span><br></pre></td></tr></table></figure>

<h3 id="模板设置"><a href="#模板设置" class="headerlink" title="模板设置"></a>模板设置</h3><h4 id="填报属性设置"><a href="#填报属性设置" class="headerlink" title="填报属性设置"></a>填报属性设置</h4><p>主表数据修改，其中<strong>J3</strong>，为隐藏单元格<strong>CompanyID</strong>，仅用于填报提交。配置如下图：</p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1104-5.webp"></p>
<p>子表数据修改</p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1104-6.webp"></p>
<h4 id="填报页面设置"><a href="#填报页面设置" class="headerlink" title="填报页面设置"></a>填报页面设置</h4><p>为填报页面添加一个加载结束事件，来增加删除按钮，最后一行不可删除的功能。<br>事件代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;del&#x27;</span>];</span><br><span class="line">     <span class="comment">//定义需要执行事件的删除行按钮名称数组，如有多组则写法为[&#x27;sc1&#x27;,&#x27;sc2&#x27;]</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">	<span class="keyword">var</span> kj = $(<span class="string">&#x27;[widgetname=&quot;&#x27;</span> + arr[i].<span class="title function_">toUpperCase</span>() + <span class="string">&#x27;&quot;]:visible&#x27;</span>);</span><br><span class="line">	<span class="comment">//获取页面上可见的删除行按钮元素</span></span><br><span class="line">	<span class="keyword">var</span> del = <span class="title function_">_g</span>().<span class="title function_">getWidgetsByName</span>(arr[i].<span class="title function_">toUpperCase</span>());</span><br><span class="line">	<span class="comment">//根据名字获取删除行按钮</span></span><br><span class="line">	<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; del.<span class="property">length</span>; j++) &#123;</span><br><span class="line">		kj.<span class="property">length</span> &lt;= <span class="number">1</span> ? del[j].<span class="title function_">setEnable</span>(<span class="literal">false</span>) : del[j].<span class="title function_">setEnable</span>(<span class="literal">true</span>);</span><br><span class="line">		<span class="comment">//当控件只剩1个时，禁用控件，否则遍历启用所有控件</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="成果预览"><a href="#成果预览" class="headerlink" title="成果预览"></a>成果预览</h3><p><img src="https://resources.kagerou.top/img/blog/fr-1104-7.webp"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>帆软</tag>
        <tag>题目</tag>
      </tags>
  </entry>
  <entry>
    <title>帆软交付认证模拟题FR1103</title>
    <url>/2023/09/27/fr1103/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>题目要求</p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1103-0.webp"></p>
<p>模板要求</p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1103-1.webp"></p>
<h3 id="处理数据集"><a href="#处理数据集" class="headerlink" title="处理数据集"></a>处理数据集</h3><p>此题主要是使用sql来处理销售量的同比环比问题。这里的同期为一个月份</p>
<p>同比：（今年同期 - 去年同期）&#x2F; 去年同期 * 100%</p>
<p>环比： （同期 - 上期） &#x2F; 上期 * 100%</p>
<p>同比的计算分别需要今年和上年的按月汇总数据，所以需要做一次表关联。</p>
<p>环比的计算使用lag()函数取到按月份排序的上一条数据即可。</p>
<p>年月销售数据表具体sql:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> sum_table <span class="keyword">as</span>(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CAST</span>(substr(s.订购日期,<span class="number">1</span>,<span class="number">4</span>) <span class="keyword">AS</span> <span class="type">INTEGER</span>) years</span><br><span class="line">	   ,<span class="built_in">CAST</span>(substr(s.订购日期,<span class="number">6</span>,<span class="number">2</span>) <span class="keyword">AS</span> <span class="type">INTEGER</span>) months</span><br><span class="line">	   ,substr(s.订购日期,<span class="number">1</span>,<span class="number">7</span>) &quot;年月&quot;</span><br><span class="line">		,<span class="built_in">sum</span>(t.数量) &quot;当月销售&quot;</span><br><span class="line"><span class="keyword">FROM</span> 订单 s ,订单明细 t </span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">AND</span> s.订单ID <span class="operator">=</span> t.订单ID </span><br><span class="line"><span class="keyword">AND</span> substr(s.订购日期,<span class="number">1</span>,<span class="number">4</span>) <span class="keyword">BETWEEN</span>  <span class="string">&#x27;$&#123;years - 1&#125;&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;$&#123;years&#125;&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> substr(s.订购日期,<span class="number">1</span>,<span class="number">4</span>),substr(s.订购日期,<span class="number">6</span>,<span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> b.年月,b.当月销售,b.同比增长率,b.环比增长率</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">(</span><br><span class="line">	<span class="keyword">SELECT</span> a.<span class="operator">*</span></span><br><span class="line">	       ,ROUND((a.当月销售 <span class="operator">-</span> b.当月销售) <span class="operator">/</span> b.当月销售 <span class="operator">*</span> <span class="number">100</span>,<span class="number">1</span>)<span class="operator">||</span><span class="string">&#x27;%&#x27;</span> &quot;同比增长率&quot;</span><br><span class="line">	       ,ROUND((a.当月销售 <span class="operator">-</span> <span class="built_in">LAG</span>(a.当月销售,<span class="number">1</span>) <span class="keyword">OVER</span> ( <span class="keyword">ORDER</span> <span class="keyword">BY</span> a.years,a.months)) <span class="operator">/</span> <span class="built_in">LAG</span>(a.当月销售,<span class="number">1</span>) <span class="keyword">OVER</span> ( <span class="keyword">ORDER</span> <span class="keyword">BY</span> a.years,a.months) <span class="operator">*</span> <span class="number">100</span>,<span class="number">1</span>) <span class="operator">||</span> <span class="string">&#x27;%&#x27;</span>  &quot;环比增长率&quot;</span><br><span class="line">	<span class="keyword">from</span> sum_table a</span><br><span class="line">		<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> sum_table b </span><br><span class="line">		<span class="keyword">ON</span>  a.months <span class="operator">=</span> b.months</span><br><span class="line">		<span class="keyword">AND</span> a.years <span class="operator">=</span> b.years <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">	<span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">)b</span><br><span class="line"><span class="keyword">WHERE</span> b.years <span class="operator">=</span> $&#123;years&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：由于FRDemo使用的是SQLite数据库，所以sql中存在一些SQLite特性的方法。</p>
</blockquote>
<h3 id="查询控件"><a href="#查询控件" class="headerlink" title="查询控件"></a>查询控件</h3><p>日期控件：<br>    格式为 <strong>yyyy</strong><br>    返回值的类型为<strong>字符串</strong>   </p>
<h3 id="主表设计"><a href="#主表设计" class="headerlink" title="主表设计"></a>主表设计</h3><p>主表主要用于展示数据，比较简单。</p>
<p>表头： $years + ‘年销售同比环比数据’</p>
<p>表体：</p>
<table>
<thead>
<tr>
<th align="center">年月</th>
<th align="center">当月销售</th>
<th align="center">同比增长率</th>
<th align="center">环比增长率</th>
</tr>
</thead>
<tbody><tr>
<td align="center">年月销售数据.年月</td>
<td align="center">年月销售数据.当月销售</td>
<td align="center">年月销售数据.同比增长率</td>
<td align="center">年月销售数据.环比增长率</td>
</tr>
</tbody></table>
<p>风格： 与前几题相似。</p>
<h3 id="成果预览"><a href="#成果预览" class="headerlink" title="成果预览"></a>成果预览</h3><p><img src="https://resources.kagerou.top/img/blog/fr-1103-2.webp"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>帆软</tag>
        <tag>题目</tag>
      </tags>
  </entry>
  <entry>
    <title>geojson文件简介和基本示例</title>
    <url>/2023/11/16/geojson/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>如果你看完文章没有得到你想要的内容，请回来点击原文链接<a href="https://zhuanlan.zhihu.com/p/141554586">Geojson规范</a>,<a href="https://datatracker.ietf.org/doc/html/rfc7946">rfc7946</a></p>
<h3 id="geojson简介"><a href="#geojson简介" class="headerlink" title="geojson简介"></a>geojson简介</h3><p>简单来说geojson是用来描述地理特征的基于 JSON 的地理空间数据交换格式。GeoJSON RFC定义了 GeoJSON 对象可以表示的 7 种几何形状“类型” 。它们是“Point”、“MultiPoint”、“LineString”、“MultiLineString”、“Polygon”、“MultiPolygon”和“GeometryCollection”。</p>
<h3 id="geojson对象"><a href="#geojson对象" class="headerlink" title="geojson对象"></a>geojson对象</h3><h4 id="Point"><a href="#Point" class="headerlink" title="Point"></a>Point</h4><p>0维点对象，”type”为”Point”,”coordinates”为经纬度。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Point&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;coordinates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">0.0</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="MultiPoints"><a href="#MultiPoints" class="headerlink" title="MultiPoints"></a>MultiPoints</h4><p>0维多点对象，”type”为”MultiPoints”,”coordinates”为经纬度数组。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MultiPoints&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;coordinates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">0.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">50.0</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">]</span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="LineStrings"><a href="#LineStrings" class="headerlink" title="LineStrings"></a>LineStrings</h4><p>一维线对象，”type”为”LineString”,”coordinates”为经纬度数组。线形与经纬度数组顺序相关。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LineStrings&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;coordinates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">0.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">30.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">50.0</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">]</span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="MultiLineString"><a href="#MultiLineString" class="headerlink" title="MultiLineString"></a>MultiLineString</h4><p>一维多线对象，”type”为”MultiLineString”,”coordinates”为”LineStrings”数组。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MultiLineString&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;coordinates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">0.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">[</span><span class="number">101.0</span><span class="punctuation">,</span> <span class="number">1.0</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">[</span><span class="number">102.0</span><span class="punctuation">,</span> <span class="number">2.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">[</span><span class="number">103.0</span><span class="punctuation">,</span> <span class="number">3.0</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="Polygon"><a href="#Polygon" class="headerlink" title="Polygon"></a>Polygon</h4><p>二维面&#x2F;多边形对象，”type”为”Polygon”,”coordinates”为”linear ring”数组。面形与数组顺序相关且数组第一个点和最后一个点必须相同。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Polygon&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;coordinates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">0.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">[</span><span class="number">101.0</span><span class="punctuation">,</span> <span class="number">0.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">[</span><span class="number">101.0</span><span class="punctuation">,</span> <span class="number">1.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">1.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">0.0</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="MultiPolygon"><a href="#MultiPolygon" class="headerlink" title="MultiPolygon"></a>MultiPolygon</h4><p>二维多面对象，”type”为”MultiPolygon”,”coordinates”为”Polygon”数组。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MultiPolygon&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;coordinates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">102.0</span><span class="punctuation">,</span> <span class="number">2.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">103.0</span><span class="punctuation">,</span> <span class="number">2.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">103.0</span><span class="punctuation">,</span> <span class="number">3.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">102.0</span><span class="punctuation">,</span> <span class="number">3.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">102.0</span><span class="punctuation">,</span> <span class="number">2.0</span><span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//下面这个是带孔的面数组</span></span><br><span class="line">    <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">0.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">101.0</span><span class="punctuation">,</span> <span class="number">0.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">101.0</span><span class="punctuation">,</span> <span class="number">1.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">1.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">0.0</span><span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">100.2</span><span class="punctuation">,</span> <span class="number">0.2</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">100.2</span><span class="punctuation">,</span> <span class="number">0.8</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">100.8</span><span class="punctuation">,</span> <span class="number">0.8</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">100.8</span><span class="punctuation">,</span> <span class="number">0.2</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">100.2</span><span class="punctuation">,</span> <span class="number">0.2</span><span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="GeometryCollections"><a href="#GeometryCollections" class="headerlink" title="GeometryCollections"></a>GeometryCollections</h4><p>Geometrycollection 的”Geometr”数组中的每个元素都是上面描述的几何对象之一:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GeometryCollection&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;geometries&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Point&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;coordinates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">0.0</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LineString&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;coordinates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">101.0</span><span class="punctuation">,</span> <span class="number">0.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">102.0</span><span class="punctuation">,</span> <span class="number">1.0</span><span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Polygon&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;coordinates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">0.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">[</span><span class="number">101.0</span><span class="punctuation">,</span> <span class="number">0.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">[</span><span class="number">101.0</span><span class="punctuation">,</span> <span class="number">1.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">1.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">0.0</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="Antimeridian-Cutting"><a href="#Antimeridian-Cutting" class="headerlink" title="Antimeridian Cutting"></a>Antimeridian Cutting</h4><p>他不是一种形状对象，只是在提示当你的形状要跨过180°经度的时候，需要注意基本的地理描述问题。</p>
<h4 id="Feature-Object"><a href="#Feature-Object" class="headerlink" title="Feature Object"></a>Feature Object</h4><p>叫做特征或者要素对象，其包含了一个基本形状对象(geometry)及其基本信息(properties)。</p>
<p>‘properties’ 是一个普通的json对象，可以自定义形状相关的属性。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Feature&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;geometry&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Polygon&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;coordinates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">[</span></span><br><span class="line">                    <span class="number">103.94760106</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="number">30.661278365</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">                <span class="punctuation">[</span></span><br><span class="line">                    <span class="number">103.921334867</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="number">30.669621744</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">[</span></span><br><span class="line">                    <span class="number">103.94760106</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="number">30.661278365</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;OBJECTID&quot;</span><span class="punctuation">:</span> <span class="number">2229</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;双流区&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;adcode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;510116&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;adcode_s&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5101&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;adcode_si&quot;</span><span class="punctuation">:</span> <span class="string">&quot;51&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;JC&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ORIG_FID&quot;</span><span class="punctuation">:</span> <span class="number">3232</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Shape_Leng&quot;</span><span class="punctuation">:</span> <span class="number">1.76486274549</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Shape_Area&quot;</span><span class="punctuation">:</span> <span class="number">0.100061005347</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;双流区&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<h4 id="FeatureCollection-Object"><a href="#FeatureCollection-Object" class="headerlink" title="FeatureCollection Object"></a>FeatureCollection Object</h4><p>一组Feature的合集，也是通常使用较多的geojson文件内容。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;成都市&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FeatureCollection&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;features&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Feature&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;geometry&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Polygon&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;coordinates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">[</span></span><br><span class="line">                        <span class="punctuation">[</span></span><br><span class="line">                            <span class="number">103.55857416</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="number">30.3350250600001</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="comment">// ...</span></span><br><span class="line">                        <span class="punctuation">[</span></span><br><span class="line">                            <span class="number">103.55216094</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="number">30.341370645</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="punctuation">[</span></span><br><span class="line">                            <span class="number">103.55857416</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="number">30.3350250600001</span></span><br><span class="line">                        <span class="punctuation">]</span></span><br><span class="line">                    <span class="punctuation">]</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;OBJECTID&quot;</span><span class="punctuation">:</span> <span class="number">2115</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;蒲江县&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;adcode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;510131&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;adcode_s&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5101&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;adcode_si&quot;</span><span class="punctuation">:</span> <span class="string">&quot;51&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;JC&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;ORIG_FID&quot;</span><span class="punctuation">:</span> <span class="number">3261</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Shape_Leng&quot;</span><span class="punctuation">:</span> <span class="number">1.3293374479</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Shape_Area&quot;</span><span class="punctuation">:</span> <span class="number">0.0543842925464</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;dname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;蒲江县&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Feature&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;geometry&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Polygon&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;coordinates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">[</span></span><br><span class="line">                        <span class="punctuation">[</span></span><br><span class="line">                            <span class="number">103.80576362</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="number">30.524076135</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="punctuation">[</span></span><br><span class="line">                            <span class="number">103.806736421</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="number">30.5239680460001</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="punctuation">[</span></span><br><span class="line">                            <span class="number">103.816888125</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="number">30.522840079</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="comment">//...</span></span><br><span class="line">                        <span class="punctuation">[</span></span><br><span class="line">                            <span class="number">103.802673479</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="number">30.5271662750001</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="punctuation">[</span></span><br><span class="line">                            <span class="number">103.80576362</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="number">30.524076135</span></span><br><span class="line">                        <span class="punctuation">]</span></span><br><span class="line">                    <span class="punctuation">]</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;OBJECTID&quot;</span><span class="punctuation">:</span> <span class="number">2162</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;新津区&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;adcode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;510118&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;adcode_s&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5101&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;adcode_si&quot;</span><span class="punctuation">:</span> <span class="string">&quot;51&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;JC&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;ORIG_FID&quot;</span><span class="punctuation">:</span> <span class="number">3241</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Shape_Leng&quot;</span><span class="punctuation">:</span> <span class="number">0.830260507587</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Shape_Area&quot;</span><span class="punctuation">:</span> <span class="number">0.0306366445471</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;dname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;新津区&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h3><p>提供两个标准的成都市行政区区块划分和各市重心点的json文件作为参考。<br><a href="https://resources.kagerou.top/share/chengdu-area.json">chengdu-area.json</a><br><a href="https://resources.kagerou.top/share/chengdu-point.json">chengdu-point.json</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>geojson</tag>
        <tag>地理信息</tag>
      </tags>
  </entry>
  <entry>
    <title>PL/SQL编程详解</title>
    <url>/2023/09/13/SQL/</url>
    <content><![CDATA[<h3 id="1-1-基本结构"><a href="#1-1-基本结构" class="headerlink" title="1.1 基本结构"></a>1.1 基本结构</h3><p>PL&#x2F;SQL程序由三个块组成，即声明部分、执行部分、异常处理部分。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DECLARE </span><br><span class="line">   --声明部分: 在此声明PL/SQL用到的变量,类型及游标，以及局部的存储过程和函数</span><br><span class="line">BEGIN</span><br><span class="line">   -- 执行部分:  过程及SQL 语句  , 即程序的主要部分</span><br><span class="line">EXCEPTION</span><br><span class="line">   -- 执行异常部分: 错误处理</span><br><span class="line">END;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-命名规则"><a href="#1-2-命名规则" class="headerlink" title="1.2 命名规则"></a>1.2 命名规则</h3><table>
<thead>
<tr>
<th align="left">标识符</th>
<th align="left">命名规则</th>
<th align="left">例子</th>
</tr>
</thead>
<tbody><tr>
<td align="left">程序变量</td>
<td align="left">V_Name</td>
<td align="left">V_Date</td>
</tr>
<tr>
<td align="left">程序常量</td>
<td align="left">C_Name</td>
<td align="left">C_Server</td>
</tr>
<tr>
<td align="left">游标变量</td>
<td align="left">Cursor_Name</td>
<td align="left">Cursor_Emp</td>
</tr>
<tr>
<td align="left">异常标识</td>
<td align="left">E_Name</td>
<td align="left">E_Dep</td>
</tr>
<tr>
<td align="left">表类型</td>
<td align="left">Name_table_type</td>
<td align="left">Emp_record_type</td>
</tr>
<tr>
<td align="left">表</td>
<td align="left">Name_Table</td>
<td align="left">Dep_</td>
</tr>
<tr>
<td align="left">记录类型</td>
<td align="left">Name_Record</td>
<td align="left">Dep_record</td>
</tr>
<tr>
<td align="left">SQL*PLUS代替变量</td>
<td align="left">P_Name</td>
<td align="left">P_Num</td>
</tr>
<tr>
<td align="left">绑定变量</td>
<td align="left">G_Name</td>
<td align="left">G_Day</td>
</tr>
</tbody></table>
<h3 id="1-3-记录类型"><a href="#1-3-记录类型" class="headerlink" title="1.3 记录类型"></a>1.3 记录类型</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TYPE record_name IS RECORD(</span><br><span class="line">   v1 data_type1  [NOT NULL]  [:= default_value ],</span><br><span class="line">   v2 data_type2  [NOT NULL]  [:= default_value ],</span><br><span class="line">   ......</span><br><span class="line">   vn data_typen  [NOT NULL]  [:= default_value ] );</span><br></pre></td></tr></table></figure>

<p>范例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DECLARE</span><br><span class="line"> --定义与hr.employees表中的这几个列相同的记录数据类型</span><br><span class="line">   TYPE RECOAR_TYPE_EMPLOYEES IS RECORD(</span><br><span class="line">      f_name   hr.employees.first_name%TYPE,</span><br><span class="line">      h_date   hr.employees.hire_date%TYPE,</span><br><span class="line">      j_id     hr.employees.job_id%TYPE</span><br><span class="line">   );</span><br><span class="line">   --声明一个该记录数据类型的记录变量</span><br><span class="line">   v_emp_record RECOAR_TYPE_EMPLOYEES；</span><br><span class="line"></span><br><span class="line">BEGIN</span><br><span class="line">   SELECT first_name,hire_date,job_id INTO v_emp_record</span><br><span class="line">   FROM employees</span><br><span class="line">   WHERE employees.id = &amp;emp_id</span><br><span class="line"></span><br><span class="line">   DBMS_OUTPUT.PUT_LINE(&#x27;雇员名称：&#x27;||v_emp_record.f_name</span><br><span class="line">             ||&#x27;  雇佣日期：&#x27;||v_emp_record.h_date</span><br><span class="line">             ||&#x27;  岗位：&#x27;||v_emp_record.j_id);</span><br><span class="line">END;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-数组类型"><a href="#1-4-数组类型" class="headerlink" title="1.4 数组类型"></a>1.4 数组类型</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TYPE array_name IS VARRAY(size) OF element_type [NOT NULL];</span><br></pre></td></tr></table></figure>

<p>范例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   <span class="comment">--定义一个最多保存5个VARCHAR(25)的数据类型成员的VARRAY数据类型</span></span><br><span class="line">   TYPE reg_varray_type <span class="keyword">IS</span> VARRAY(<span class="number">5</span>) <span class="keyword">OF</span> <span class="type">VARCHAR</span>(<span class="number">25</span>);</span><br><span class="line">   <span class="comment">--声明一个该VARRAY的数据类型的变量</span></span><br><span class="line">   v_reg_varray_type REG_VARRAY_TYPE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="comment">--使用构造函数初始化变量的值</span></span><br><span class="line">   v_reg_varray :<span class="operator">=</span> reg_varray_type(<span class="string">&#x27;中国&#x27;</span>,<span class="string">&#x27;美国&#x27;</span>,<span class="string">&#x27;英国&#x27;</span>,<span class="string">&#x27;德国&#x27;</span>,<span class="string">&#x27;法国&#x27;</span>);</span><br><span class="line">   DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;地区名称：&#x27;</span><span class="operator">||</span>v_reg_varray(<span class="number">1</span>)<span class="operator">||</span><span class="string">&#x27;、&#x27;</span></span><br><span class="line">                                    <span class="operator">||</span>v_reg_varray(<span class="number">2</span>)<span class="operator">||</span><span class="string">&#x27;、&#x27;</span></span><br><span class="line">                                    <span class="operator">||</span>v_reg_varray(<span class="number">3</span>)<span class="operator">||</span><span class="string">&#x27;、&#x27;</span></span><br><span class="line">                                    <span class="operator">||</span>v_reg_varray(<span class="number">4</span>));</span><br><span class="line">   DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;赋予初值NULL的第5个成员的值：&#x27;</span><span class="operator">||</span> v_reg_varray(<span class="number">5</span>)); </span><br><span class="line">   <span class="comment">--用构造函数语法赋予初值，再次对数组成员赋值</span></span><br><span class="line">   v_reg_varray(<span class="number">5</span>) :<span class="operator">=</span> <span class="string">&#x27;波兰&#x27;</span></span><br><span class="line">   DBMS_OUTPUT.PUTLINE(<span class="string">&#x27;第五个成员的值是：&#x27;</span> <span class="operator">||</span> v_reg_varray(<span class="number">5</span>));</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="1-5-TYPE"><a href="#1-5-TYPE" class="headerlink" title="1.5 %TYPE"></a>1.5 %TYPE</h3><p>使用%TYPE定义一个变量，其数据类型与已经定义的某个数据变量（尤其是表的某一列）的数据类型一直。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   v_empno emp.empno<span class="operator">%</span>TYPE :<span class="operator">=</span>$<span class="keyword">no</span>;</span><br><span class="line">   Type t_record <span class="keyword">is</span> record (</span><br><span class="line">      v_name   emp.ename<span class="operator">%</span>TYPE,</span><br><span class="line">      v_sal    emp.sal<span class="operator">%</span>TYPE,</span><br><span class="line">      v_date   emp.hiredate<span class="operator">%</span>TYPE</span><br><span class="line">   );</span><br><span class="line">   Rec t_record;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">SELECT</span> ename,sal,hiredate <span class="keyword">INTO</span> Rec</span><br><span class="line">   <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> empno <span class="operator">=</span> v_empno;</span><br><span class="line">   DBMS_PUTOUT.PUT_LINE(Rec.v_name<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>Rec.v_sal<span class="operator">||</span><span class="string">&#x27;--&#x27;</span><span class="operator">||</span>Rec.v_date)</span><br></pre></td></tr></table></figure>

<h3 id="1-6-ROWTYPE"><a href="#1-6-ROWTYPE" class="headerlink" title="1.6 %ROWTYPE"></a>1.6 %ROWTYPE</h3><p>使用%ROWTYPE操作符，返回一个记录类型，其数据类型和数据库表的数据结构一致。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DEcLARE</span></span><br><span class="line">   v_empno emp.empno<span class="operator">%</span>TYPE;</span><br><span class="line">   rec emp<span class="operator">%</span>ROWTYPE;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">INTO</span> rec</span><br><span class="line">   <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> emp,empno <span class="operator">=</span> v_empno;</span><br><span class="line">   DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;姓名:&#x27;</span><span class="operator">||</span>rec.ename<span class="operator">||</span><span class="string">&#x27;工资:&#x27;</span><span class="operator">||</span>rec.sal<span class="operator">||</span><span class="string">&#x27;工作时间:&#x27;</span><span class="operator">||</span>rec.hiredate);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="1-7-TABLE"><a href="#1-7-TABLE" class="headerlink" title="1.7 TABLE"></a>1.7 TABLE</h3><p>使用TABLE定义记录表数据类型。它与记录类型相似，但他可以处理多行记录，类似于二位数组来模仿数据库中的表。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">TYPE tabel_name <span class="keyword">IS</span> <span class="keyword">TABLE</span> <span class="keyword">OF</span> element_type [<span class="keyword">NOT</span> <span class="keyword">NULL</span>]</span><br><span class="line">INDEX <span class="keyword">BY</span> [BINARY_INTEGER <span class="operator">|</span> PLS_INTEGER <span class="operator">|</span> VARRAY2];</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">EXISTS(n)</td>
<td align="left">如果集合的第n个成员存在，则返回true</td>
</tr>
<tr>
<td align="left">COUNT</td>
<td align="left">返回已经分配了储存空间即已经赋值了的成员数量</td>
</tr>
<tr>
<td align="left">FIRST&#x2F;LAST</td>
<td align="left">FRIST:返回成员最低下标值；LAST :返回成员的最高下标值</td>
</tr>
<tr>
<td align="left">PRIOR(n)</td>
<td align="left">返回下标为n的成员的前一个成员的下标，如果没有则返回NULL</td>
</tr>
<tr>
<td align="left">NEXT(n)</td>
<td align="left">返回下标为n的成员的后一个成员的下标，如果没有则返回NULL</td>
</tr>
<tr>
<td align="left">TRIM[(n)]</td>
<td align="left">TRIM:删除末尾一个成员;TRIM(n):删除末尾n个成员</td>
</tr>
<tr>
<td align="left">DELETE[(n)]</td>
<td align="left">DELETE:删除所有成员；DELETE(n):删除第n个成员;DELETE(m,n):删除从m到n的成员</td>
</tr>
<tr>
<td align="left">EXTEND</td>
<td align="left">EXTEND:添加一个null成员;EXTEND(n);添加n个null成员;EXTEND(n,i):添加n个成员，其值与第i个成员相同</td>
</tr>
<tr>
<td align="left">LIMIT</td>
<td align="left">返回在varray类型变量中出现的最高下标值</td>
</tr>
</tbody></table>
<p>范例如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   TYPE dept_table_type <span class="keyword">IS</span> <span class="keyword">TABLE</span> <span class="keyword">OF</span></span><br><span class="line">      dept<span class="operator">%</span>TYPE INDEX <span class="keyword">BY</span> BINARY_INTEGER;</span><br><span class="line">   my_dname_table dept_table_type;</span><br><span class="line">   v_count NUMBER(<span class="number">2</span>) :<span class="operator">=</span><span class="number">4</span>;</span><br><span class="line">   v_i NUMBER(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line">   <span class="keyword">FOR</span> i <span class="keyword">in</span> <span class="number">1</span> .. v_count LOOP</span><br><span class="line">      <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">INTO</span> my_dname_table(i) </span><br><span class="line">      <span class="keyword">FROM</span> dept <span class="keyword">WHERE</span> deptno <span class="operator">=</span> i ;</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">FOR</span> <span class="type">int</span> <span class="keyword">in</span> my_dname_table.FIRST .. my_dname_table.LAST LOOP</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;Department number: &#x27;</span><span class="operator">||</span>my_dname_table(<span class="type">int</span>).deptno);</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;Department name: &#x27;</span><span class="operator">||</span> my_dname_table(<span class="type">int</span>).dname);</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="1-8-运算符"><a href="#1-8-运算符" class="headerlink" title="1.8 运算符"></a>1.8 运算符</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 变量赋值</span></span><br><span class="line">variable :<span class="operator">=</span> expression;</span><br><span class="line"><span class="comment">-- 空值加数字仍是空值</span></span><br><span class="line"><span class="keyword">NULL</span> <span class="operator">+</span> <span class="operator">&lt;</span>数字<span class="operator">&gt;</span> <span class="operator">=</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="comment">-- 空值（连接）字符，结果为字符</span></span><br><span class="line"><span class="keyword">NULL</span> <span class="operator">||</span> <span class="operator">&lt;</span>STR<span class="operator">&gt;</span> <span class="operator">=</span> <span class="operator">&lt;</span>STR<span class="operator">&gt;</span>;</span><br><span class="line"><span class="comment">-- CHAR 转化为NUMBER</span></span><br><span class="line">v_total :<span class="operator">=</span> TO_NUMBER(<span class="string">&#x27;100.00&#x27;</span>) <span class="operator">+</span> sal;</span><br><span class="line"><span class="comment">-- NUMBER转化为CHAR</span></span><br><span class="line">v_comm :<span class="operator">=</span> TO_CHAR(<span class="string">&#x27;123.45&#x27;</span>) <span class="operator">||</span> <span class="string">&#x27;元&#x27;</span>；</span><br><span class="line"><span class="comment">-- 字符转换为日期</span></span><br><span class="line">v_date :<span class="operator">=</span> TO_DATE(<span class="string">&#x27;2023.07.03&#x27;</span>,<span class="string">&#x27;yyyy.mm.dd&#x27;</span>);</span><br><span class="line"><span class="comment">-- 日期转换为字符</span></span><br><span class="line">v_to_day :<span class="operator">=</span> TO_CHAR(SYSDATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) ;</span><br></pre></td></tr></table></figure>

<h3 id="1-9-注释"><a href="#1-9-注释" class="headerlink" title="1.9 注释"></a>1.9 注释</h3><ul>
<li>使用双 ‘-‘ ( 减号) 加注释</li>
<li>使用 &#x2F;* *&#x2F; 来加一行或多行注释</li>
</ul>
<h3 id="2-0-条件语句IF"><a href="#2-0-条件语句IF" class="headerlink" title="2.0 条件语句IF"></a>2.0 条件语句IF</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">IF <span class="operator">&lt;</span>布尔表达式<span class="operator">&gt;</span> <span class="keyword">THEN</span></span><br><span class="line">  PL<span class="operator">/</span><span class="keyword">SQL</span> 和 <span class="keyword">SQL</span>语句</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="comment">-----------------------</span></span><br><span class="line">IF <span class="operator">&lt;</span>布尔表达式<span class="operator">&gt;</span> <span class="keyword">THEN</span></span><br><span class="line">  PL<span class="operator">/</span><span class="keyword">SQL</span> 和 <span class="keyword">SQL</span>语句</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line">  其它语句</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="comment">-----------------------</span></span><br><span class="line">IF <span class="operator">&lt;</span>布尔表达式<span class="operator">&gt;</span> <span class="keyword">THEN</span></span><br><span class="line">  PL<span class="operator">/</span><span class="keyword">SQL</span> 和 <span class="keyword">SQL</span>语句</span><br><span class="line">ELSIF <span class="operator">&lt;</span> 其它布尔表达式<span class="operator">&gt;</span> <span class="keyword">THEN</span></span><br><span class="line">  其它语句</span><br><span class="line">ELSIF <span class="operator">&lt;</span> 其它布尔表达式<span class="operator">&gt;</span> <span class="keyword">THEN</span></span><br><span class="line">  其它语句</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line">  其它语句</span><br><span class="line"><span class="keyword">END</span> IF;</span><br></pre></td></tr></table></figure>

<p>范例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    v_empno  employees.employee_id<span class="operator">%</span>TYPE :<span class="operator">=</span><span class="operator">&amp;</span>empno;</span><br><span class="line">    V_salary employees.salary<span class="operator">%</span>TYPE;</span><br><span class="line">    V_comment VARCHAR2(<span class="number">35</span>);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">SELECT</span> salary <span class="keyword">INTO</span> v_salary <span class="keyword">FROM</span> employees </span><br><span class="line">   <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> v_empno;</span><br><span class="line">   IF v_salary <span class="operator">&lt;</span> <span class="number">1500</span> <span class="keyword">THEN</span></span><br><span class="line">       V_comment:<span class="operator">=</span> <span class="string">&#x27;太少了,加点吧~!&#x27;</span>;</span><br><span class="line">   ELSIF v_salary <span class="operator">&lt;</span><span class="number">3000</span> <span class="keyword">THEN</span></span><br><span class="line">      V_comment:<span class="operator">=</span> <span class="string">&#x27;多了点,少点吧~!&#x27;</span>;</span><br><span class="line">   <span class="keyword">ELSE</span></span><br><span class="line">      V_comment:<span class="operator">=</span> <span class="string">&#x27;没有薪水~!&#x27;</span>;</span><br><span class="line">   <span class="keyword">END</span> IF;</span><br><span class="line">   DBMS_OUTPUT.PUT_LINE(V_comment);</span><br><span class="line">   exception</span><br><span class="line">     <span class="keyword">when</span> no_data_found <span class="keyword">then</span></span><br><span class="line">        DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;没有数据~!&#x27;</span>);</span><br><span class="line">     <span class="keyword">when</span> others <span class="keyword">then</span></span><br><span class="line">        DBMS_OUTPUT.PUT_LINE(sqlcode <span class="operator">||</span> <span class="string">&#x27;---&#x27;</span> <span class="operator">||</span> sqlerrm);        </span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-1-条件语句CASE"><a href="#2-1-条件语句CASE" class="headerlink" title="2.1 条件语句CASE"></a>2.1 条件语句CASE</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CASE</span> 条件表达式</span><br><span class="line">  <span class="keyword">WHEN</span> 条件表达式结果<span class="number">1</span> <span class="keyword">THEN</span> </span><br><span class="line">     语句段<span class="number">1</span></span><br><span class="line">  <span class="keyword">WHEN</span> 条件表达式结果<span class="number">2</span> <span class="keyword">THEN</span></span><br><span class="line">     语句段<span class="number">2</span></span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">WHEN</span> 条件表达式结果n <span class="keyword">THEN</span></span><br><span class="line">     语句段n</span><br><span class="line">  [<span class="keyword">ELSE</span> 条件表达式结果]</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CASE</span> </span><br><span class="line">  <span class="keyword">WHEN</span> 条件表达式<span class="number">1</span> <span class="keyword">THEN</span></span><br><span class="line">     语句段<span class="number">1</span></span><br><span class="line">  <span class="keyword">WHEN</span> 条件表达式<span class="number">2</span> <span class="keyword">THEN</span></span><br><span class="line">     语句段<span class="number">2</span></span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">WHEN</span> 条件表达式n <span class="keyword">THEN</span> </span><br><span class="line">     语句段n</span><br><span class="line">  [<span class="keyword">ELSE</span> 语句段]</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<p>范例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">  V_grade <span class="type">char</span>(<span class="number">1</span>) :<span class="operator">=</span> <span class="built_in">UPPER</span>(<span class="string">&#x27;&amp;p_grade&#x27;</span>);</span><br><span class="line">  V_appraisal VARCHAR2(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  V_appraisal :<span class="operator">=</span></span><br><span class="line">  <span class="keyword">CASE</span> v_grade</span><br><span class="line">    <span class="keyword">WHEN</span> <span class="string">&#x27;A&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;Excellent&#x27;</span></span><br><span class="line">    <span class="keyword">WHEN</span> <span class="string">&#x27;B&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;Very Good&#x27;</span></span><br><span class="line">    <span class="keyword">WHEN</span> <span class="string">&#x27;C&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;Good&#x27;</span></span><br><span class="line">    <span class="keyword">ELSE</span> <span class="string">&#x27;No such grade&#x27;</span></span><br><span class="line">  <span class="keyword">END</span>;</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;Grade:&#x27;</span><span class="operator">||</span>v_grade<span class="operator">||</span><span class="string">&#x27;  Appraisal: &#x27;</span><span class="operator">||</span> v_appraisal);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   v_first_name employees.first_name<span class="operator">%</span>TYPE;</span><br><span class="line">   v_job_id employees.job_id<span class="operator">%</span>TYPE;</span><br><span class="line">   v_salary employees.salary<span class="operator">%</span>TYPE;</span><br><span class="line">   v_sal_raise NUMBER(<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">SELECT</span> first_name,   job_id,   salary <span class="keyword">INTO</span></span><br><span class="line">          v_first_name, v_job_id, v_salary</span><br><span class="line">   <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="operator">&amp;</span>emp_id;</span><br><span class="line">   <span class="keyword">CASE</span></span><br><span class="line">      <span class="keyword">WHEN</span> v_job_id <span class="operator">=</span> <span class="string">&#x27;PU_CLERK&#x27;</span> <span class="keyword">THEN</span></span><br><span class="line">         IF v_salary <span class="operator">&lt;</span> <span class="number">3000</span> <span class="keyword">THEN</span> v_sal_raise :<span class="operator">=</span> <span class="number">.08</span>;</span><br><span class="line">         <span class="keyword">ELSE</span> v_sal_raise :<span class="operator">=</span> <span class="number">.07</span>;</span><br><span class="line">         <span class="keyword">END</span> IF;</span><br><span class="line">      <span class="keyword">WHEN</span> v_job_id <span class="operator">=</span> <span class="string">&#x27;SH_CLERK&#x27;</span> <span class="keyword">THEN</span></span><br><span class="line">         IF v_salary <span class="operator">&lt;</span> <span class="number">4000</span> <span class="keyword">THEN</span> v_sal_raise :<span class="operator">=</span> <span class="number">.06</span>;</span><br><span class="line">         <span class="keyword">ELSE</span> v_sal_raise :<span class="operator">=</span> <span class="number">.05</span>;</span><br><span class="line">         <span class="keyword">END</span> IF;</span><br><span class="line">      <span class="keyword">WHEN</span> v_job_id <span class="operator">=</span> <span class="string">&#x27;ST_CLERK&#x27;</span> <span class="keyword">THEN</span></span><br><span class="line">         IF v_salary <span class="operator">&lt;</span> <span class="number">3500</span> <span class="keyword">THEN</span> v_sal_raise :<span class="operator">=</span> <span class="number">.04</span>;</span><br><span class="line">         <span class="keyword">ELSE</span> v_sal_raise :<span class="operator">=</span> <span class="number">.03</span>;</span><br><span class="line">         <span class="keyword">END</span> IF;</span><br><span class="line">      <span class="keyword">ELSE</span></span><br><span class="line">         DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;该岗位不涨工资: &#x27;</span><span class="operator">||</span>v_job_id);</span><br><span class="line">   <span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line">   DBMS_OUTPUT.PUT_LINE(v_first_name<span class="operator">||</span><span class="string">&#x27;的岗位是&#x27;</span><span class="operator">||</span>v_job_id</span><br><span class="line">                                    <span class="operator">||</span><span class="string">&#x27;、的工资是&#x27;</span><span class="operator">||</span>v_salary</span><br><span class="line">                                    <span class="operator">||</span><span class="string">&#x27;、工资涨幅是&#x27;</span><span class="operator">||</span>v_sal_raise);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-循环语句LOOP"><a href="#2-2-循环语句LOOP" class="headerlink" title="2.2 循环语句LOOP"></a>2.2 循环语句LOOP</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">LOOP</span><br><span class="line">   要执行的语句;</span><br><span class="line">   EXIT <span class="keyword">WHEN</span> <span class="operator">&lt;</span>条件语句<span class="operator">&gt;</span> <span class="comment">--条件满足，退出循环语句</span></span><br><span class="line"><span class="keyword">END</span> LOOP;</span><br></pre></td></tr></table></figure>

<p>范例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    <span class="type">int</span> NUMBER(<span class="number">2</span>) :<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   LOOP</span><br><span class="line">      <span class="type">int</span> :<span class="operator">=</span> <span class="type">int</span> <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;int 的当前值为:&#x27;</span><span class="operator">||</span><span class="type">int</span>);</span><br><span class="line">      EXIT <span class="keyword">WHEN</span> <span class="type">int</span> <span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-循环语句While"><a href="#2-3-循环语句While" class="headerlink" title="2.3 循环语句While"></a>2.3 循环语句While</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">WHILE <span class="operator">&lt;</span>布尔表达式<span class="operator">&gt;</span> LOOP</span><br><span class="line">    要执行的语句;</span><br><span class="line"><span class="keyword">END</span> LOOP;</span><br></pre></td></tr></table></figure>

<p>范例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> </span><br><span class="line">  x NUMBER :<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   WHILE x<span class="operator">&lt;=</span><span class="number">10</span> LOOP</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;X的当前值为:&#x27;</span><span class="operator">||</span>x);</span><br><span class="line">       x:<span class="operator">=</span> x<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-循环语句For"><a href="#2-4-循环语句For" class="headerlink" title="2.4 循环语句For"></a>2.4 循环语句For</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[<span class="operator">&lt;&lt;</span>循环标签<span class="operator">&gt;&gt;</span>]</span><br><span class="line"><span class="keyword">FOR</span> 循环计数器 <span class="keyword">IN</span> [ REVERSE ] 下限 .. 上限 LOOP</span><br><span class="line">  要执行的语句;</span><br><span class="line"><span class="keyword">END</span> LOOP [循环标签];</span><br></pre></td></tr></table></figure>

<p>范例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    V_counter NUMBER :<span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> temp_table(num_col) <span class="keyword">VALUES</span> (v_counter );</span><br><span class="line">   <span class="keyword">FOR</span> v_counter <span class="keyword">IN</span> <span class="number">20</span> .. <span class="number">25</span> LOOP</span><br><span class="line">      <span class="keyword">INSERT</span> <span class="keyword">INTO</span> temp_table (num_col ) <span class="keyword">VALUES</span> ( v_counter );</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> temp_table(num_col) <span class="keyword">VALUES</span> (v_counter );</span><br><span class="line">   <span class="comment">--REVERSE 倒序遍历</span></span><br><span class="line">   <span class="keyword">FOR</span> v_counter <span class="keyword">IN</span> REVERSE <span class="number">20</span> .. <span class="number">25</span> LOOP</span><br><span class="line">      <span class="keyword">INSERT</span> <span class="keyword">INTO</span> temp_table (num_col ) <span class="keyword">VALUES</span> ( v_counter );</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="keyword">END</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> temp_table;</span><br></pre></td></tr></table></figure>

<h3 id="3-1-显式游标"><a href="#3-1-显式游标" class="headerlink" title="3.1 显式游标"></a>3.1 显式游标</h3><p>显式游标处理需四个 PL&#x2F;SQL步骤：</p>
<p>定义&#x2F;声明游标：就是定义一个游标名，以及与其相对应的SELECT 语句<br>打开游标：就是执行游标所对应的SELECT 语句，将其查询结果放入工作区，并且指针指向工作区的首部，标识游标结果集合。如果游标查询语句中带有FOR UPDATE选项，OPEN 语句还将锁定数据库表中游标结果集合对应的数据行<br>提取游标数据：就是检索结果集合中的数据行，放入指定的输出变量中<br>关闭游标：当提取和处理完游标结果集合数据后，应及时关闭游标，以释放该游标所占用的系统资源，并使该游标的工作区变成无效，不能再使用FETCH 语句取其中数据。关闭后的游标可以使用OPEN 语句重新打开。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- define cursor</span></span><br><span class="line"><span class="keyword">CURSOR</span> cursor_name[(<span class="keyword">parameter</span>[, <span class="keyword">parameter</span>]…)] </span><br><span class="line">    [<span class="keyword">RETURN</span> datatype]</span><br><span class="line"><span class="keyword">IS</span> </span><br><span class="line">    select_statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- open cursor</span></span><br><span class="line"><span class="keyword">OPEN</span> cursor_name[([<span class="keyword">parameter</span> <span class="operator">=</span><span class="operator">&gt;</span>] <span class="keyword">value</span>[, [<span class="keyword">parameter</span> <span class="operator">=</span><span class="operator">&gt;</span>] <span class="keyword">value</span>]…)];</span><br><span class="line"></span><br><span class="line"><span class="comment">-- fetch cursor</span></span><br><span class="line"><span class="keyword">FETCH</span> cursor_name <span class="keyword">INTO</span> &#123;variable_list <span class="operator">|</span> record_variable &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">--close cursor</span></span><br><span class="line"><span class="keyword">CLOSE</span> cursor_name;</span><br></pre></td></tr></table></figure>

<p>范例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--ex1</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   <span class="keyword">CURSOR</span> c_cursor </span><br><span class="line">   <span class="keyword">IS</span> <span class="keyword">SELECT</span> first_name <span class="operator">||</span> last_name, Salary </span><br><span class="line">   <span class="keyword">FROM</span> EMPLOYEES </span><br><span class="line">   <span class="keyword">WHERE</span> rownum<span class="operator">&lt;</span><span class="number">11</span>;   </span><br><span class="line">   v_ename  EMPLOYEES.first_name<span class="operator">%</span>TYPE;</span><br><span class="line">   v_sa<span class="operator">-</span>   EMPLOYEES.Salary<span class="operator">%</span>TYPE;   </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">OPEN</span> c_cursor;</span><br><span class="line">  <span class="keyword">FETCH</span> c_cursor <span class="keyword">INTO</span> v_ename, v_sal;</span><br><span class="line">  WHILE c_cursor<span class="operator">%</span>FOUND LOOP</span><br><span class="line">     DBMS_OUTPUT.PUT_LINE(v_ename<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>to_char(v_sal) );</span><br><span class="line">     <span class="keyword">FETCH</span> c_cursor <span class="keyword">INTO</span> v_ename, v_sal;</span><br><span class="line">  <span class="keyword">END</span> LOOP;</span><br><span class="line">  <span class="keyword">CLOSE</span> c_cursor;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ex2</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">  DeptRec    DEPARTMENTS<span class="operator">%</span>ROWTYPE;</span><br><span class="line">  Dept_name  DEPARTMENTS.DEPARTMENT_NAME<span class="operator">%</span>TYPE;</span><br><span class="line">  Dept_loc   DEPARTMENTS.LOCATION_ID<span class="operator">%</span>TYPE;</span><br><span class="line">  <span class="keyword">CURSOR</span> c1 <span class="keyword">IS</span> </span><br><span class="line">   <span class="keyword">SELECT</span> DEPARTMENT_NAME, LOCATION_ID </span><br><span class="line">   <span class="keyword">FROM</span> DEPARTMENTS <span class="keyword">WHERE</span> DEPARTMENT_ID <span class="operator">&lt;=</span> <span class="number">30</span>;</span><br><span class="line">  <span class="keyword">CURSOR</span> c2(dept_no NUMBER <span class="keyword">DEFAULT</span> <span class="number">10</span>) <span class="keyword">IS</span></span><br><span class="line">    <span class="keyword">SELECT</span> DEPARTMENT_NAME, LOCATION_ID <span class="keyword">FROM</span> DEPARTMENTS </span><br><span class="line">    <span class="keyword">WHERE</span> DEPARTMENT_ID <span class="operator">&lt;=</span> dept_no;</span><br><span class="line">  <span class="keyword">CURSOR</span> c3(dept_no NUMBER <span class="keyword">DEFAULT</span> <span class="number">10</span>) <span class="keyword">IS</span> </span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> DEPARTMENTS </span><br><span class="line">    <span class="keyword">WHERE</span> DEPARTMENTS.DEPARTMENT_ID <span class="operator">&lt;=</span>dept_no;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="comment">--打开游标c1</span></span><br><span class="line">  <span class="keyword">OPEN</span> c1;</span><br><span class="line">  <span class="comment">--开始循环，这里是为了循环游标c1里的所有列</span></span><br><span class="line">  LOOP</span><br><span class="line">    <span class="comment">--提取游标c1的成员的值放入变量dept_name和dept_loc中</span></span><br><span class="line">    <span class="keyword">FETCH</span> c1 <span class="keyword">INTO</span> dept_name, dept_loc;</span><br><span class="line">    <span class="comment">--判断最近一次FETCT的c1是否存在，不存咋退出，结束循环。</span></span><br><span class="line">    EXIT <span class="keyword">WHEN</span> c1<span class="operator">%</span>NOTFOUND;</span><br><span class="line">        DBMS_OUTPUT.PUT_LINE(dept_name<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>dept_loc);</span><br><span class="line">    <span class="keyword">END</span> LOOP;</span><br><span class="line">    <span class="comment">--关闭游标</span></span><br><span class="line">    <span class="keyword">CLOSE</span> c1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">OPEN</span> c2;</span><br><span class="line">    LOOP</span><br><span class="line">        <span class="keyword">FETCH</span> c2 <span class="keyword">INTO</span> dept_name, dept_loc;</span><br><span class="line">        EXIT <span class="keyword">WHEN</span> c2<span class="operator">%</span>NOTFOUND;</span><br><span class="line">        DBMS_OUTPUT.PUT_LINE(dept_name<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>dept_loc);</span><br><span class="line">    <span class="keyword">END</span> LOOP;</span><br><span class="line">    <span class="keyword">CLOSE</span> c2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">--游标c3可设置自定义变量，来控制游标的值</span></span><br><span class="line">    <span class="keyword">OPEN</span> c3(dept_no <span class="operator">=</span><span class="operator">&gt;</span><span class="number">20</span>);</span><br><span class="line">    LOOP</span><br><span class="line">        <span class="keyword">FETCH</span> c3 <span class="keyword">INTO</span> deptrec;</span><br><span class="line">        EXIT <span class="keyword">WHEN</span> c3<span class="operator">%</span>NOTFOUND;</span><br><span class="line">        DBMS_OUTPUT.PUT_LINE(deptrec.DEPARTMENT_ID<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>deptrec.DEPARTMENT_NAME<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>deptrec.LOCATION_ID);</span><br><span class="line">    <span class="keyword">END</span> LOOP;</span><br><span class="line">    <span class="keyword">CLOSE</span> c3;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-游标属性"><a href="#3-2-游标属性" class="headerlink" title="3.2 游标属性"></a>3.2 游标属性</h3><ul>
<li><strong>Cursor_name%FOUND</strong> ：布尔型属性，当最近一次提取游标操作FETCH成功则为 TRUE,否则为FALSE</li>
<li><strong>Cursor_name%NOTFOUND</strong> ：布尔型属性，与%FOUND相反</li>
<li><strong>Cursor_name%ISOPEN</strong> ：布尔型属性，当游标已打开时返回 TRUE</li>
<li><strong>Cursor_name%ROWCOUNT</strong> ：数字型属性，返回已从游标中读取的记录数</li>
</ul>
<p>范例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 给工资低于1200 的员工增加工资50</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   v_empno  EMPLOYEES.EMPLOYEE_ID<span class="operator">%</span>TYPE;</span><br><span class="line">   v_sal    EMPLOYEES.Salary<span class="operator">%</span>TYPE;</span><br><span class="line">   <span class="keyword">CURSOR</span> c_cursor <span class="keyword">IS</span> <span class="keyword">SELECT</span> EMPLOYEE_ID, Salary <span class="keyword">FROM</span> EMPLOYEES; </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">OPEN</span> c_cursor;</span><br><span class="line">   LOOP</span><br><span class="line">      <span class="keyword">FETCH</span> c_cursor <span class="keyword">INTO</span> v_empno, v_sal;</span><br><span class="line">      EXIT <span class="keyword">WHEN</span> c_cursor<span class="operator">%</span>NOTFOUND; </span><br><span class="line">      IF v_sal<span class="operator">&lt;=</span><span class="number">1200</span> <span class="keyword">THEN</span></span><br><span class="line">            <span class="keyword">UPDATE</span> EMPLOYEES <span class="keyword">SET</span> Salary<span class="operator">=</span>Salary<span class="operator">+</span><span class="number">50</span> <span class="keyword">WHERE</span> EMPLOYEE_ID<span class="operator">=</span>v_empno;</span><br><span class="line">            DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;编码为&#x27;</span><span class="operator">||</span>v_empno<span class="operator">||</span><span class="string">&#x27;工资已更新!&#x27;</span>);</span><br><span class="line">      <span class="keyword">END</span> IF;</span><br><span class="line">   DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;记录数:&#x27;</span><span class="operator">||</span> c_cursor <span class="operator">%</span>ROWCOUNT);</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line">   <span class="keyword">CLOSE</span> c_cursor;</span><br><span class="line"><span class="keyword">END</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 没有参数且没有返回值的游标</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   v_f_name employees.first_name<span class="operator">%</span>TYPE;</span><br><span class="line">   v_j_id   employees.job_id<span class="operator">%</span>TYPE;</span><br><span class="line">   <span class="keyword">CURSOR</span> c1     <span class="comment">--声明游标,没有参数没有返回值</span></span><br><span class="line">   <span class="keyword">IS</span></span><br><span class="line">      <span class="keyword">SELECT</span> first_name, job_id </span><br><span class="line">      <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">OPEN</span> c1;        <span class="comment">--打开游标</span></span><br><span class="line">   LOOP</span><br><span class="line">      <span class="keyword">FETCH</span> c1 <span class="keyword">INTO</span> v_f_name, v_j_id;    <span class="comment">--提取游标</span></span><br><span class="line">      IF c1<span class="operator">%</span>FOUND <span class="keyword">THEN</span></span><br><span class="line">         DBMS_OUTPUT.PUT_LINE(v_f_name<span class="operator">||</span><span class="string">&#x27;的岗位是&#x27;</span><span class="operator">||</span>v_j_id);</span><br><span class="line">      <span class="keyword">ELSE</span></span><br><span class="line">         DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;已经处理完结果集了&#x27;</span>);</span><br><span class="line">         EXIT;</span><br><span class="line">      <span class="keyword">END</span> IF;</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line">   <span class="keyword">CLOSE</span> c1;   <span class="comment">--关闭游标</span></span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 有参数且没有返回值的游标</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   v_f_name employees.first_name<span class="operator">%</span>TYPE;</span><br><span class="line">   v_h_date employees.hire_date<span class="operator">%</span>TYPE;</span><br><span class="line">   <span class="keyword">CURSOR</span> c2(dept_id NUMBER, j_id VARCHAR2) <span class="comment">--声明游标,有参数没有返回值</span></span><br><span class="line">   <span class="keyword">IS</span></span><br><span class="line">      <span class="keyword">SELECT</span> first_name, hire_date <span class="keyword">FROM</span> employees</span><br><span class="line">      <span class="keyword">WHERE</span> department_id <span class="operator">=</span> dept_id <span class="keyword">AND</span> job_id <span class="operator">=</span> j_id;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">OPEN</span> c2(<span class="number">90</span>, <span class="string">&#x27;AD_VP&#x27;</span>);  <span class="comment">--打开游标,传递参数值</span></span><br><span class="line">   LOOP</span><br><span class="line">      <span class="keyword">FETCH</span> c2 <span class="keyword">INTO</span> v_f_name, v_h_date;    <span class="comment">--提取游标</span></span><br><span class="line">      IF c2<span class="operator">%</span>FOUND <span class="keyword">THEN</span></span><br><span class="line">         DBMS_OUTPUT.PUT_LINE(v_f_name<span class="operator">||</span><span class="string">&#x27;的雇佣日期是&#x27;</span><span class="operator">||</span>v_h_date);</span><br><span class="line">      <span class="keyword">ELSE</span></span><br><span class="line">         DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;已经处理完结果集了&#x27;</span>);</span><br><span class="line">         EXIT;</span><br><span class="line">      <span class="keyword">END</span> IF;</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line">   <span class="keyword">CLOSE</span> c2;   <span class="comment">--关闭游标</span></span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 有参数且有返回值的游标</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   TYPE emp_record_type <span class="keyword">IS</span> RECORD(</span><br><span class="line">        f_name   employees.first_name<span class="operator">%</span>TYPE,</span><br><span class="line">        h_date   employees.hire_date<span class="operator">%</span>TYPE);</span><br><span class="line">   v_emp_record EMP_RECORD_TYPE;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">CURSOR</span> c3(dept_id NUMBER, j_id VARCHAR2) <span class="comment">--声明游标,有参数有返回值</span></span><br><span class="line">          <span class="keyword">RETURN</span> EMP_RECORD_TYPE</span><br><span class="line">   <span class="keyword">IS</span></span><br><span class="line">      <span class="keyword">SELECT</span> first_name, hire_date <span class="keyword">FROM</span> employees</span><br><span class="line">      <span class="keyword">WHERE</span> department_id <span class="operator">=</span> dept_id <span class="keyword">AND</span> job_id <span class="operator">=</span> j_id;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">OPEN</span> c3(j_id <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;AD_VP&#x27;</span>, dept_id <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">90</span>);  <span class="comment">--打开游标,传递参数值</span></span><br><span class="line">   LOOP</span><br><span class="line">      <span class="keyword">FETCH</span> c3 <span class="keyword">INTO</span> v_emp_record;    <span class="comment">--提取游标</span></span><br><span class="line">      IF c3<span class="operator">%</span>FOUND <span class="keyword">THEN</span></span><br><span class="line">         DBMS_OUTPUT.PUT_LINE(v_emp_record.f_name<span class="operator">||</span><span class="string">&#x27;的雇佣日期是&#x27;</span></span><br><span class="line">                            <span class="operator">||</span>v_emp_record.h_date);</span><br><span class="line">      <span class="keyword">ELSE</span></span><br><span class="line">         DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;已经处理完结果集了&#x27;</span>);</span><br><span class="line">         EXIT;</span><br><span class="line">      <span class="keyword">END</span> IF;</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line">   <span class="keyword">CLOSE</span> c3;   <span class="comment">--关闭游标</span></span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 基于游标定义记录变量</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   <span class="keyword">CURSOR</span> c4(dept_id NUMBER, j_id VARCHAR2) <span class="comment">--声明游标,有参数没有返回值</span></span><br><span class="line">   <span class="keyword">IS</span></span><br><span class="line">      <span class="keyword">SELECT</span> first_name f_name, hire_date <span class="keyword">FROM</span> employees</span><br><span class="line">      <span class="keyword">WHERE</span> department_id <span class="operator">=</span> dept_id <span class="keyword">AND</span> job_id <span class="operator">=</span> j_id;</span><br><span class="line">    <span class="comment">--基于游标定义记录变量，比声明记录类型变量要方便，不容易出错</span></span><br><span class="line">    v_emp_record c4<span class="operator">%</span>ROWTYPE;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">OPEN</span> c4(<span class="number">90</span>, <span class="string">&#x27;AD_VP&#x27;</span>);  <span class="comment">--打开游标,传递参数值</span></span><br><span class="line">   LOOP</span><br><span class="line">      <span class="keyword">FETCH</span> c4 <span class="keyword">INTO</span> v_emp_record;    <span class="comment">--提取游标</span></span><br><span class="line">      IF c4<span class="operator">%</span>FOUND <span class="keyword">THEN</span></span><br><span class="line">         DBMS_OUTPUT.PUT_LINE(v_emp_record.f_name<span class="operator">||</span><span class="string">&#x27;的雇佣日期是&#x27;</span></span><br><span class="line">                            <span class="operator">||</span>v_emp_record.hire_date);</span><br><span class="line">      <span class="keyword">ELSE</span></span><br><span class="line">         DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;已经处理完结果集了&#x27;</span>);</span><br><span class="line">         EXIT;</span><br><span class="line">      <span class="keyword">END</span> IF;</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line">   <span class="keyword">CLOSE</span> c4;   <span class="comment">--关闭游标</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-游标FOR循环"><a href="#3-3-游标FOR循环" class="headerlink" title="3.3 游标FOR循环"></a>3.3 游标FOR循环</h3><p>游标FOR循环语句，自动执行游标的OPEN、FETCH、CLOSE语句和循环语句的功能；当进入循环时，游标FOR循环语句自动打开游标，并提取第一行游标数据，当程序处理完当前所提取的数据而进入下一次循环时，游标FOR循环语句自动提取下一行数据供程序处理，当提取完结果集合中的所有数据行后结束循环，并自动关闭游标。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FOR</span> index_variable <span class="keyword">IN</span> cursor_name[(<span class="keyword">value</span>[, <span class="keyword">value</span>]…)] LOOP</span><br><span class="line">    <span class="comment">-- 游标数据处理代码</span></span><br><span class="line"><span class="keyword">END</span> LOOP;</span><br></pre></td></tr></table></figure>
<p>index_variable为游标FOR 循环语句隐含声明的索引变量，该变量为记录变量，其结构与游标查询语句返回的结构集合的结构相同。在程序中可以通过引用该索引记录变量元素来读取所提取的游标数据，index_variable中各元素的名称与游标查询语句选择列表中所制定的列名相同。如果在游标查询语句的选择列表中存在计算列，则必须为这些计算列指定别名后才能通过游标FOR 循环语句中的索引变量来访问这些列数据。</p>
<p>范例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ex1</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   <span class="keyword">CURSOR</span> c_sal <span class="keyword">IS</span> </span><br><span class="line">      <span class="keyword">SELECT</span> employee_id, first_name <span class="operator">||</span> last_name ename, salary</span><br><span class="line">      <span class="keyword">FROM</span> employees ;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="comment">--隐含打开游标</span></span><br><span class="line">   <span class="keyword">FOR</span> v_sal <span class="keyword">IN</span> c_sal LOOP</span><br><span class="line">   <span class="comment">--隐含执行一个FETCH语句</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(to_char(v_sal.employee_id)<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span> v_sal.ename<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>to_char(v_sal.salary)) ;</span><br><span class="line">   <span class="comment">--隐含监测c_sal%NOTFOUND</span></span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="comment">--隐含关闭游标</span></span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ex2 当所声明的游标带有参数时，通过游标FOR 循环语句为游标传递参数</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">  <span class="keyword">CURSOR</span> c_cursor(dept_no NUMBER <span class="keyword">DEFAULT</span> <span class="number">10</span>) <span class="keyword">IS</span></span><br><span class="line">   <span class="keyword">SELECT</span> department_name, location_id </span><br><span class="line">   <span class="keyword">FROM</span> departments <span class="keyword">WHERE</span> department_id <span class="operator">&lt;=</span> dept_no;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;当dept_no参数值为30：&#x27;</span>);</span><br><span class="line">    <span class="keyword">FOR</span> c1_rec <span class="keyword">IN</span> c_cursor(<span class="number">30</span>) LOOP        </span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(c1_rec.department_name<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>c1_rec.location_id);</span><br><span class="line">    <span class="keyword">END</span> LOOP;</span><br><span class="line">    DBMS_OUTPUT.PUT_LINE(CHR(<span class="number">10</span>)<span class="operator">||</span><span class="string">&#x27;使用默认的dept_no参数值10：&#x27;</span>);</span><br><span class="line">    <span class="keyword">FOR</span> c1_rec <span class="keyword">IN</span> c_cursor LOOP        </span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(c1_rec.department_name<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>c1_rec.location_id);</span><br><span class="line">    <span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>不要在程序中对游标进行人工操作；不要在程序中定义用于控制FOR循环的记录</p>
</blockquote>
<h3 id="3-4-处理隐式游标"><a href="#3-4-处理隐式游标" class="headerlink" title="3.4 处理隐式游标"></a>3.4 处理隐式游标</h3><p>对于非查询语句，如修改、删除操作，则由ORACLE 系统自动地为这些操作设置游标并创建其工作区，这些由系统隐含创建的游标称为隐式游标，隐式游标的名字为SQL，这是由ORACLE 系统定义的。对于隐式游标的操作，如定义、打开、取值及关闭操作，都由ORACLE 系统自动地完成，无需用户进行处理。用户只能通过隐式游标的相关属性，来完成相应的操作。在隐式游标的工作区中，所存放的数据是与用户自定义的显示游标无关的、最新处理的一条SQL 语句所包含的数据。</p>
<p>格式调用为： <strong>SQL%</strong></p>
<p>范例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--  删除EMPLOYEES表中某部门的所有员工，如果该部门中已没有员工，则在DEPARTMENT表中删除该部门</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    V_deptno department_id<span class="operator">%</span>TYPE :<span class="operator">=</span> <span class="operator">&amp;</span>p_deptno;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DELETE</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> department_id<span class="operator">=</span>v_deptno;</span><br><span class="line">    IF <span class="keyword">SQL</span><span class="operator">%</span>NOTFOUND <span class="keyword">THEN</span></span><br><span class="line">        <span class="keyword">DELETE</span> <span class="keyword">FROM</span> departments <span class="keyword">WHERE</span> department_id<span class="operator">=</span>v_deptno;</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 通过隐式游标SQL的%ROWCOUNT属性来了解修改了多少行</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   v_rows NUMBER;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">--更新数据</span></span><br><span class="line">   <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary <span class="operator">=</span> <span class="number">30000</span></span><br><span class="line">   <span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">90</span> <span class="keyword">AND</span> job_id <span class="operator">=</span> <span class="string">&#x27;AD_VP&#x27;</span>;</span><br><span class="line"><span class="comment">--获取默认游标的属性值</span></span><br><span class="line">   v_rows :<span class="operator">=</span> <span class="keyword">SQL</span><span class="operator">%</span>ROWCOUNT;</span><br><span class="line">   DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;更新了&#x27;</span><span class="operator">||</span>v_rows<span class="operator">||</span><span class="string">&#x27;个雇员的工资&#x27;</span>);</span><br><span class="line"><span class="comment">--回退更新，以便使数据库的数据保持原样</span></span><br><span class="line">   <span class="keyword">ROLLBACK</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-5-NO-DATA-FOUND-和-NOTFOUND的区别"><a href="#3-5-NO-DATA-FOUND-和-NOTFOUND的区别" class="headerlink" title="3.5 NO_DATA_FOUND 和 %NOTFOUND的区别"></a>3.5 NO_DATA_FOUND 和 %NOTFOUND的区别</h3><ul>
<li>SELECT … INTO 语句触发 NO_DATA_FOUND；</li>
<li>当一个显式游标的WHERE子句未找到时触发%NOTFOUND；</li>
<li>当UPDATE或DELETE 语句的WHERE 子句未找到时触发 SQL%NOTFOUND；</li>
<li>在提取循环中要用 %NOTFOUND 或%FOUND来确定循环的退出条件，不要用 NO_DATA_FOUND</li>
</ul>
<h3 id="3-6-使用游标更新和删除数据"><a href="#3-6-使用游标更新和删除数据" class="headerlink" title="3.6 使用游标更新和删除数据"></a>3.6 使用游标更新和删除数据</h3><p>为了对正在处理(查询)的行不被另外的用户改动，ORACLE 提供一个 FOR UPDATE 子句来对所选择的行进行锁住。该需求迫使ORACLE锁定游标结果集合的行，可以防止其他事务处理更新或删除相同的行，直到您的事务处理提交或回退为止。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_list <span class="keyword">FROM</span> table_list <span class="keyword">FOR</span> <span class="keyword">UPDATE</span> [<span class="keyword">OF</span> <span class="keyword">column</span>[, <span class="keyword">column</span>]…] [NOWAIT]</span><br></pre></td></tr></table></figure>

<p>范例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 从EMPLOYEES表中查询某部门的员工情况，将其工资最低定为 1500；</span></span><br><span class="line"><span class="keyword">DECLARE</span> </span><br><span class="line">   V_deptno employees.department_id<span class="operator">%</span>TYPE :<span class="operator">=</span> <span class="operator">&amp;</span>p_deptno;</span><br><span class="line">   <span class="keyword">CURSOR</span> emp_cursor <span class="keyword">IS</span> </span><br><span class="line">      <span class="keyword">SELECT</span> employees.employee_id, employees.salary </span><br><span class="line">      <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employees.department_id<span class="operator">=</span>v_deptno</span><br><span class="line">      <span class="keyword">FOR</span> <span class="keyword">UPDATE</span> NOWAIT;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">FOR</span> emp_record <span class="keyword">IN</span> emp_cursor LOOP</span><br><span class="line">      IF emp_record.salary <span class="operator">&lt;</span> <span class="number">1500</span> <span class="keyword">THEN</span></span><br><span class="line">        <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary<span class="operator">=</span><span class="number">1500</span></span><br><span class="line">        <span class="keyword">WHERE</span> <span class="keyword">CURRENT</span> <span class="keyword">OF</span> emp_cursor;</span><br><span class="line">      <span class="keyword">END</span> IF;</span><br><span class="line">    <span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="comment">--    COMMIT;</span></span><br><span class="line"><span class="keyword">END</span>; </span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 将EMPLOYEES表中部门编码为90、岗位为AD_VP的雇员的工资都更新为2000元；</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   v_emp_record employees<span class="operator">%</span>ROWTYPE;</span><br><span class="line">   <span class="keyword">CURSOR</span> c1 <span class="keyword">IS</span></span><br><span class="line">      <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">OPEN</span> c1;</span><br><span class="line">   LOOP</span><br><span class="line">      <span class="keyword">FETCH</span> c1 <span class="keyword">INTO</span> v_emp_record;</span><br><span class="line">      EXIT <span class="keyword">WHEN</span> c1<span class="operator">%</span>NOTFOUND;</span><br><span class="line">      IF v_emp_record.department_id <span class="operator">=</span> <span class="number">90</span> <span class="keyword">AND</span></span><br><span class="line">         v_emp_record.job_id <span class="operator">=</span> <span class="string">&#x27;AD_VP&#x27;</span></span><br><span class="line">      <span class="keyword">THEN</span></span><br><span class="line">         <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary <span class="operator">=</span> <span class="number">20000</span></span><br><span class="line">         <span class="keyword">WHERE</span> <span class="keyword">CURRENT</span> <span class="keyword">OF</span> c1;  <span class="comment">--更新当前游标行对应的数据行</span></span><br><span class="line">      <span class="keyword">END</span> IF;</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line">   <span class="keyword">COMMIT</span>;   <span class="comment">--提交已经修改的数据</span></span><br><span class="line">   <span class="keyword">CLOSE</span> c1;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-7游标变量"><a href="#3-7游标变量" class="headerlink" title="3.7游标变量"></a>3.7游标变量</h3><p>游标变量操作也包括打开、提取和关闭三个步骤。<br>1． 打开游标变量<br>打开游标变量时使用的是OPEN…FOR 语句。格式为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">OPEN</span> &#123;cursor_variable_name <span class="operator">|</span> :host_cursor_variable_name&#125;</span><br><span class="line"><span class="keyword">FOR</span> select_statement;</span><br></pre></td></tr></table></figure>

<p><strong>cursor_variable_name</strong> 为游标变量，<strong>host_cursor_variable_name</strong> 为PL&#x2F;SQL主机环境（如OCI: ORACLE Call Interface，Pro*c 程序等）中声明的游标变量。<br><strong>OPEN…FOR</strong> 语句可以在关闭当前的游标变量之前重新打开游标变量，而不会导致 <strong>CURSOR_ALREAD_OPEN</strong> 异常错误。新打开游标变量时，前一个查询的内存处理区将被释放。</p>
<p>2 . 提取游标变量数据<br>使用FETCH语句提取游标变量结果集合中的数据。格式为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FETCH</span> &#123;cursor_variable_name <span class="operator">|</span> :host_cursor_variable_name&#125;</span><br><span class="line"><span class="keyword">INTO</span> &#123;variable [, variable]…<span class="operator">|</span> record_variable&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>cursor_variable_name</strong> 和 <strong>host_cursor_variable_name</strong> 分别为游标变量和宿主游标变量名称；<br><strong>variable</strong> 和 <strong>record_variable</strong> 分别为普通变量和记录变量名称。</p>
<p>3． 关闭游标变量<br>CLOSE语句关闭游标变量，格式为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CLOSE</span> &#123;cursor_variable_name <span class="operator">|</span> :host_cursor_variable_name&#125;</span><br></pre></td></tr></table></figure>

<p><strong>cursor_variable_name</strong> 和 <strong>host_cursor_variable_name</strong> 分别为游标变量和宿主游标变量名称，如果应用程序试图关闭一个未打开的游标变量，则将导致 <strong>INVALID_CURSOR</strong> 异常错误</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 强类型参照游标变量类型</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    TYPE emp_job_rec <span class="keyword">IS</span> RECORD(</span><br><span class="line">        Employee_id employees.employee_id<span class="operator">%</span>TYPE,</span><br><span class="line">        Employee_name employees.first_name<span class="operator">%</span>TYPE,</span><br><span class="line">        Job_title employees.job_id<span class="operator">%</span>TYPE</span><br><span class="line">    );</span><br><span class="line">    TYPE emp_job_refcur_type <span class="keyword">IS</span> <span class="keyword">REF</span> <span class="keyword">CURSOR</span> <span class="keyword">RETURN</span> emp_job_rec;</span><br><span class="line">    Emp_refcur emp_job_refcur_type ;</span><br><span class="line">    Emp_job emp_job_rec;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">OPEN</span> emp_refcur <span class="keyword">FOR</span> </span><br><span class="line">      <span class="keyword">SELECT</span> employees.employee_id, employees.first_name<span class="operator">||</span>employees.last_name, employees.job_id </span><br><span class="line">      <span class="keyword">FROM</span> employees <span class="keyword">ORDER</span> <span class="keyword">BY</span> employees.department_id;</span><br><span class="line">   <span class="keyword">FETCH</span> emp_refcur <span class="keyword">INTO</span> emp_job;</span><br><span class="line">   WHILE emp_refcur<span class="operator">%</span>FOUND LOOP</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(emp_job.employee_id<span class="operator">||</span><span class="string">&#x27;: &#x27;</span><span class="operator">||</span>emp_job.employee_name<span class="operator">||</span><span class="string">&#x27; is a &#x27;</span><span class="operator">||</span>emp_job.job_title);</span><br><span class="line">      <span class="keyword">FETCH</span> emp_refcur <span class="keyword">INTO</span> emp_job;</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 弱类型参照游标变量类型</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    Type refcur_t <span class="keyword">IS</span> <span class="keyword">REF</span> <span class="keyword">CURSOR</span>;</span><br><span class="line">    Refcur refcur_t;</span><br><span class="line">    TYPE sample_rec_type <span class="keyword">IS</span> RECORD (</span><br><span class="line">        Id number,</span><br><span class="line">        Description VARCHAR2 (<span class="number">30</span>)</span><br><span class="line">    );</span><br><span class="line">    sample sample_rec_type;</span><br><span class="line">    selection varchar2(<span class="number">1</span>) :<span class="operator">=</span> <span class="built_in">UPPER</span> (SUBSTR (<span class="string">&#x27;&amp;tab&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    IF selection<span class="operator">=</span><span class="string">&#x27;D&#x27;</span> <span class="keyword">THEN</span></span><br><span class="line">        <span class="keyword">OPEN</span> refcur <span class="keyword">FOR</span> </span><br><span class="line">         <span class="keyword">SELECT</span> departments.department_id, departments.department_name </span><br><span class="line">         <span class="keyword">FROM</span> departments;</span><br><span class="line">         DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;Department data&#x27;</span>);</span><br><span class="line">    ELSIF selection<span class="operator">=</span><span class="string">&#x27;E&#x27;</span> <span class="keyword">THEN</span></span><br><span class="line">        <span class="keyword">OPEN</span> refcur <span class="keyword">FOR</span> </span><br><span class="line">        <span class="keyword">SELECT</span> employees.employee_id, employees.first_name<span class="operator">||</span><span class="string">&#x27; is a &#x27;</span><span class="operator">||</span>employees.job_id </span><br><span class="line">        <span class="keyword">FROM</span> employees;</span><br><span class="line">        DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;Employee data&#x27;</span>);</span><br><span class="line">    <span class="keyword">ELSE</span></span><br><span class="line">        DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;Please enter &#x27;&#x27;D&#x27;&#x27; or &#x27;&#x27;E&#x27;&#x27;&#x27;</span>);</span><br><span class="line">        <span class="keyword">RETURN</span>;</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line">    DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;----------------------&#x27;</span>);</span><br><span class="line">    <span class="keyword">FETCH</span> refcur <span class="keyword">INTO</span> sample;</span><br><span class="line">    WHILE refcur<span class="operator">%</span>FOUND LOOP</span><br><span class="line">        DBMS_OUTPUT.PUT_LINE(sample.id<span class="operator">||</span><span class="string">&#x27;: &#x27;</span><span class="operator">||</span>sample.description);</span><br><span class="line">        <span class="keyword">FETCH</span> refcur <span class="keyword">INTO</span> sample;</span><br><span class="line">    <span class="keyword">END</span> LOOP;</span><br><span class="line">    <span class="keyword">CLOSE</span> refcur;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用游标变量（没有RETURN子句）</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line"><span class="comment">--定义一个游标数据类型</span></span><br><span class="line">   TYPE emp_cursor_type <span class="keyword">IS</span> <span class="keyword">REF</span> <span class="keyword">CURSOR</span>;</span><br><span class="line"><span class="comment">--声明一个游标变量</span></span><br><span class="line">   c1 EMP_CURSOR_TYPE;</span><br><span class="line"><span class="comment">--声明两个记录变量</span></span><br><span class="line">   v_emp_record employees<span class="operator">%</span>ROWTYPE;</span><br><span class="line">   v_reg_record regions<span class="operator">%</span>ROWTYPE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">OPEN</span> c1 <span class="keyword">FOR</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">   LOOP</span><br><span class="line">      <span class="keyword">FETCH</span> c1 <span class="keyword">INTO</span> v_emp_record;</span><br><span class="line">      EXIT <span class="keyword">WHEN</span> c1<span class="operator">%</span>NOTFOUND;</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(v_emp_record.first_name<span class="operator">||</span><span class="string">&#x27;的雇佣日期是&#x27;</span></span><br><span class="line">                            <span class="operator">||</span>v_emp_record.hire_date);</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="comment">--将同一个游标变量对应到另一个SELECT语句</span></span><br><span class="line">   <span class="keyword">OPEN</span> c1 <span class="keyword">FOR</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> regions <span class="keyword">WHERE</span> region_id <span class="keyword">IN</span>（<span class="number">1</span>，<span class="number">2</span>）;</span><br><span class="line">   LOOP</span><br><span class="line">      <span class="keyword">FETCH</span> c1 <span class="keyword">INTO</span> v_reg_record;</span><br><span class="line">      EXIT <span class="keyword">WHEN</span> c1<span class="operator">%</span>NOTFOUND;</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(v_reg_record.region_id<span class="operator">||</span><span class="string">&#x27;表示&#x27;</span></span><br><span class="line">                            <span class="operator">||</span>v_reg_record.region_name);</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line">   <span class="keyword">CLOSE</span> c1;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用游标变量（有RETURN子句）</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line"><span class="comment">--定义一个与employees表中的这几个列相同的记录数据类型</span></span><br><span class="line">   TYPE emp_record_type <span class="keyword">IS</span> RECORD(</span><br><span class="line">        f_name   employees.first_name<span class="operator">%</span>TYPE,</span><br><span class="line">        h_date   employees.hire_date<span class="operator">%</span>TYPE,</span><br><span class="line">        j_id     employees.job_id<span class="operator">%</span>TYPE);</span><br><span class="line"><span class="comment">--声明一个该记录数据类型的记录变量</span></span><br><span class="line">   v_emp_record EMP_RECORD_TYPE;</span><br><span class="line"><span class="comment">--定义一个游标数据类型</span></span><br><span class="line">   TYPE emp_cursor_type <span class="keyword">IS</span> <span class="keyword">REF</span> <span class="keyword">CURSOR</span></span><br><span class="line">        <span class="keyword">RETURN</span> EMP_RECORD_TYPE;</span><br><span class="line"><span class="comment">--声明一个游标变量</span></span><br><span class="line">   c1 EMP_CURSOR_TYPE;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">OPEN</span> c1 <span class="keyword">FOR</span> </span><br><span class="line">      <span class="keyword">SELECT</span> first_name, hire_date, job_id</span><br><span class="line">      <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">   LOOP</span><br><span class="line">      <span class="keyword">FETCH</span> c1 <span class="keyword">INTO</span> v_emp_record;</span><br><span class="line">      EXIT <span class="keyword">WHEN</span> c1<span class="operator">%</span>NOTFOUND;</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;雇员名称：&#x27;</span><span class="operator">||</span>v_emp_record.f_name</span><br><span class="line">                <span class="operator">||</span><span class="string">&#x27;  雇佣日期：&#x27;</span><span class="operator">||</span>v_emp_record.h_date</span><br><span class="line">                <span class="operator">||</span><span class="string">&#x27;  岗位：&#x27;</span><span class="operator">||</span>v_emp_record.j_id);</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line">   <span class="keyword">CLOSE</span> c1;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-1-异常处理概念"><a href="#4-1-异常处理概念" class="headerlink" title="4.1 异常处理概念"></a>4.1 异常处理概念</h3><p>有三种类型的异常错误：</p>
<ol>
<li>预定义错误：ORACLE预定义的异常情况大约有24个。对这种异常情况的处理，无需在程序中定义，由ORACLE自动将其引发。</li>
<li>非预定义错误：即其他标准的ORACLE错误。对这种异常情况的处理，需要用户在程序中定义，然后由ORACLE自动将其引发。</li>
<li>用户定义错误：程序执行过程中，出现编程人员认为的非正常情况。对这种异常情况的处理，需要用户在程序中定义，然后显式地在程序中将其引发。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXCEPTION</span><br><span class="line">   <span class="keyword">WHEN</span> first_exception <span class="keyword">THEN</span>  <span class="operator">&lt;</span>code <span class="keyword">to</span> handle <span class="keyword">first</span> exception <span class="operator">&gt;</span></span><br><span class="line">   <span class="keyword">WHEN</span> second_exception <span class="keyword">THEN</span>  <span class="operator">&lt;</span>code <span class="keyword">to</span> handle <span class="keyword">second</span> exception <span class="operator">&gt;</span></span><br><span class="line">   <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span>  <span class="operator">&lt;</span>code <span class="keyword">to</span> handle others exception <span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-预定义的异常处理"><a href="#4-2-预定义的异常处理" class="headerlink" title="4.2 预定义的异常处理"></a>4.2 预定义的异常处理</h3><p>只需在PL&#x2F;SQL块的异常处理部分，直接引用相应的异常情况名，并对其完成相应的异常错误处理即可。</p>
<table>
<thead>
<tr>
<th align="left">异常代码</th>
<th align="left">异常描述</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ORA-0001</td>
<td align="left">Dup_val_on_index</td>
<td align="left">违反了唯一性限制</td>
</tr>
<tr>
<td align="left">ORA-0051</td>
<td align="left">Timeout-on-resource</td>
<td align="left">在等待资源时发生超时</td>
</tr>
<tr>
<td align="left">ORA-0061</td>
<td align="left">Transaction-backed-out</td>
<td align="left">由于发生死锁事务被撤消</td>
</tr>
<tr>
<td align="left">ORA-1001</td>
<td align="left">Invalid-CURSOR</td>
<td align="left">试图使用一个无效的游标</td>
</tr>
<tr>
<td align="left">ORA-1012</td>
<td align="left">Not-logged-on</td>
<td align="left">没有连接到ORACLE</td>
</tr>
<tr>
<td align="left">ORA-1017</td>
<td align="left">Login-denied</td>
<td align="left">无效的用户名&#x2F;口令</td>
</tr>
<tr>
<td align="left">ORA-1403</td>
<td align="left">No_data_found</td>
<td align="left">SELECT INTO没有找到数据</td>
</tr>
<tr>
<td align="left">ORA-1422</td>
<td align="left">Too_many_rows</td>
<td align="left">SELECT INTO 返回多行</td>
</tr>
<tr>
<td align="left">ORA-1476</td>
<td align="left">Zero-divide</td>
<td align="left">试图被零除</td>
</tr>
<tr>
<td align="left">ORA-1722</td>
<td align="left">Invalid-NUMBER</td>
<td align="left">转换一个数字失败</td>
</tr>
<tr>
<td align="left">ORA-6500</td>
<td align="left">Storage-error</td>
<td align="left">内存不够引发的内部错误</td>
</tr>
<tr>
<td align="left">ORA-6501</td>
<td align="left">Program-error</td>
<td align="left">内部错误</td>
</tr>
<tr>
<td align="left">ORA-6502</td>
<td align="left">Value-error</td>
<td align="left">转换或截断错误</td>
</tr>
<tr>
<td align="left">ORA-6504</td>
<td align="left">Rowtype-mismatch</td>
<td align="left">宿主游标变量与 PL&#x2F;SQL变量有不兼容行类型</td>
</tr>
<tr>
<td align="left">ORA-6511</td>
<td align="left">CURSOR-already-OPEN</td>
<td align="left">试图打开一个已处于打开状态的游标</td>
</tr>
<tr>
<td align="left">ORA-6530</td>
<td align="left">Access-INTO-null</td>
<td align="left">试图为null 对象的属性赋值</td>
</tr>
<tr>
<td align="left">ORA-6531</td>
<td align="left">Collection-is-null</td>
<td align="left">试图将Exists 以外的集合( collection)方法应用于一个null pl&#x2F;sql 表上或varray上</td>
</tr>
<tr>
<td align="left">ORA-6532</td>
<td align="left">Subscript-outside-limit</td>
<td align="left">对嵌套或varray索引得引用超出声明范围以外</td>
</tr>
<tr>
<td align="left">ORA-6533</td>
<td align="left">Subscript-beyond-count</td>
<td align="left">对嵌套或varray 索引得引用大于集合中元素的个数.</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 更新指定员工工资，如工资小于1500，则加100；</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   v_empno employees.employee_id<span class="operator">%</span>TYPE :<span class="operator">=</span> <span class="operator">&amp;</span>empno;</span><br><span class="line">   v_sa<span class="operator">-</span>  employees.salary<span class="operator">%</span>TYPE;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">SELECT</span> salary <span class="keyword">INTO</span> v_sal <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> v_empno;</span><br><span class="line">   IF v_sal<span class="operator">&lt;=</span><span class="number">1500</span> <span class="keyword">THEN</span> </span><br><span class="line">        <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">+</span> <span class="number">100</span> <span class="keyword">WHERE</span> employee_id<span class="operator">=</span>v_empno; </span><br><span class="line">        DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;编码为&#x27;</span><span class="operator">||</span>v_empno<span class="operator">||</span><span class="string">&#x27;员工工资已更新!&#x27;</span>);     </span><br><span class="line">   <span class="keyword">ELSE</span></span><br><span class="line">        DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;编码为&#x27;</span><span class="operator">||</span>v_empno<span class="operator">||</span><span class="string">&#x27;员工工资已经超过规定值!&#x27;</span>);</span><br><span class="line">   <span class="keyword">END</span> IF;</span><br><span class="line">EXCEPTION</span><br><span class="line">   <span class="keyword">WHEN</span> NO_DATA_FOUND <span class="keyword">THEN</span>  </span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;数据库中没有编码为&#x27;</span><span class="operator">||</span>v_empno<span class="operator">||</span><span class="string">&#x27;的员工&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> TOO_MANY_ROWS <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;程序运行错误!请使用游标&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(SQLCODE<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>SQLERRM);</span><br><span class="line"><span class="keyword">END</span>; </span><br></pre></td></tr></table></figure>

<h3 id="4-3-非预定义的异常处理"><a href="#4-3-非预定义的异常处理" class="headerlink" title="4.3 非预定义的异常处理"></a>4.3 非预定义的异常处理</h3><p>必须对非定义的ORACLE错误进行定义。步骤如下：</p>
<ol>
<li>定义异常情况 <strong>&lt;异常情况&gt; EXCEPTION</strong>;</li>
<li>将定义异常情况，与标准的ORACLE错误联系起来： <strong>PRAGMA EXCEPTION_INIT(&lt;异常情况&gt;, &lt;错误代码&gt;)</strong>;</li>
<li>在异常情况处理部分对异常情况做出相应的处理。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除指定部门的记录信息，以确保该部门没有员工。</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> departments <span class="keyword">VALUES</span>(<span class="number">50</span>, <span class="string">&#x27;FINANCE&#x27;</span>, <span class="string">&#x27;CHICAGO&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   v_deptno departments.department_id<span class="operator">%</span>TYPE :<span class="operator">=</span> <span class="operator">&amp;</span>deptno;</span><br><span class="line">   deptno_remaining EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(deptno_remaining, <span class="number">-2292</span>);</span><br><span class="line">   <span class="comment">/* -2292 是违反一致性约束的错误代码 */</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">DELETE</span> <span class="keyword">FROM</span> departments <span class="keyword">WHERE</span> department_id <span class="operator">=</span> v_deptno;</span><br><span class="line">EXCEPTION</span><br><span class="line">   <span class="keyword">WHEN</span> deptno_remaining <span class="keyword">THEN</span> </span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;违反数据完整性约束!&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(SQLCODE<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>SQLERRM);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-4-用户自定义的异常处理"><a href="#4-4-用户自定义的异常处理" class="headerlink" title="4.4 用户自定义的异常处理"></a>4.4 用户自定义的异常处理</h3><p>用户定义的异常错误是通过显式使用 RAISE 语句来触发。当引发一个异常错误时，控制就转向到 EXCEPTION块异常错误部分，执行错误处理代码。对于这类异常情况的处理，步骤如下：</p>
<ol>
<li>定义异常情况 <strong>&lt;异常情况&gt; EXCEPTION</strong>;</li>
<li>**RAISE &lt;异常情况&gt;**；</li>
<li>在异常情况处理部分对异常情况做出相应的处理</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 更新指定员工工资，增加100；</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   v_empno employees.employee_id<span class="operator">%</span>TYPE :<span class="operator">=</span><span class="operator">&amp;</span>empno;</span><br><span class="line">   no_result  EXCEPTION;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary <span class="operator">=</span> salary<span class="operator">+</span><span class="number">100</span> <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> v_empno;</span><br><span class="line">   IF <span class="keyword">SQL</span><span class="operator">%</span>NOTFOUND <span class="keyword">THEN</span></span><br><span class="line">      RAISE no_result;</span><br><span class="line">   <span class="keyword">END</span> IF;</span><br><span class="line">EXCEPTION</span><br><span class="line">   <span class="keyword">WHEN</span> no_result <span class="keyword">THEN</span> </span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;你的数据更新语句失败了!&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(SQLCODE<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>SQLERRM);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-5-自定义异常代码"><a href="#4-5-自定义异常代码" class="headerlink" title="4.5 自定义异常代码"></a>4.5 自定义异常代码</h3><p>调用DBMS_STANDARD(ORACLE提供的包)包所定义的RAISE_APPLICATION_ERROR过程，可以重新定义异常错误消息，它为应用程序提供了一种与ORACLE交互的方法。<br>RAISE_APPLICATION_ERROR 的语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">RAISE_APPLICATION_ERROR(error_number,error_message,[keep_errors] );</span><br></pre></td></tr></table></figure>
<p>这里的 error_number 是从 –20,000 到 –20,999 之间的参数，<br>error_message 是相应的提示信息(&lt; 2048 字节)，<br>keep_errors 为可选，如果 keep_errors &#x3D;TRUE ,则新错误将被添加到已经引发的错误列表中。如果 keep_errors&#x3D;FALSE(缺省), 则新错误将替换当前的错误列表。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建一个函数get_salary, 该函数检索指定部门的工资总和，其中定义了-20991和-20992号错误，分别处理参数为空和非法部门代码两种错误：</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> errlog(</span><br><span class="line">  Errcode NUMBER,</span><br><span class="line">  Errtext <span class="type">CHAR</span>(<span class="number">40</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">FUNCTION</span> get_salary(p_deptno NUMBER)</span><br><span class="line"><span class="keyword">RETURN</span> NUMBER </span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">  v_sal NUMBER;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  IF p_deptno <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">THEN</span></span><br><span class="line">    RAISE_APPLICATION_ERROR(<span class="number">-20991</span>, ’部门代码为空’);</span><br><span class="line">  ELSIF p_deptno<span class="operator">&lt;</span><span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line">    RAISE_APPLICATION_ERROR(<span class="number">-20992</span>, ’无效的部门代码’);</span><br><span class="line">  <span class="keyword">ELSE</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">SUM</span>(employees.salary) <span class="keyword">INTO</span> v_sal <span class="keyword">FROM</span> employees </span><br><span class="line">    <span class="keyword">WHERE</span> employees.department_id<span class="operator">=</span>p_deptno;</span><br><span class="line">    <span class="keyword">RETURN</span> v_sal;</span><br><span class="line">  <span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> </span><br><span class="line">  V_salary NUMBER(<span class="number">7</span>,<span class="number">2</span>);</span><br><span class="line">  V_sqlcode NUMBER;</span><br><span class="line">  V_sqlerr VARCHAR2(<span class="number">512</span>);</span><br><span class="line">  Null_deptno EXCEPTION;</span><br><span class="line">  Invalid_deptno EXCEPTION;</span><br><span class="line">  PRAGMA EXCEPTION_INIT(null_deptno,<span class="number">-20991</span>);</span><br><span class="line">  PRAGMA EXCEPTION_INIT(invalid_deptno, <span class="number">-20992</span>);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  V_salary :<span class="operator">=</span>get_salary(<span class="number">10</span>);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;10号部门工资：&#x27;</span> <span class="operator">||</span> TO_CHAR(V_salary));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">    V_salary :<span class="operator">=</span>get_salary(<span class="number">-10</span>);</span><br><span class="line">  EXCEPTION</span><br><span class="line">    <span class="keyword">WHEN</span> invalid_deptno <span class="keyword">THEN</span></span><br><span class="line">      V_sqlcode :<span class="operator">=</span>SQLCODE;</span><br><span class="line">      V_sqlerr  :<span class="operator">=</span>SQLERRM;</span><br><span class="line">      <span class="keyword">INSERT</span> <span class="keyword">INTO</span> errlog(errcode, errtext) </span><br><span class="line">      <span class="keyword">VALUES</span>(v_sqlcode, v_sqlerr);</span><br><span class="line">      <span class="keyword">COMMIT</span>;</span><br><span class="line">  <span class="keyword">END</span> inner1;</span><br><span class="line"></span><br><span class="line">  V_salary :<span class="operator">=</span>get_salary(<span class="number">20</span>);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;部门号为20的工资为：&#x27;</span><span class="operator">||</span>TO_CHAR(V_salary));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">    V_salary :<span class="operator">=</span>get_salary(<span class="keyword">NULL</span>);</span><br><span class="line">  <span class="keyword">END</span> inner2;</span><br><span class="line"></span><br><span class="line">  V_salary :<span class="operator">=</span> get_salary(<span class="number">30</span>);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;部门号为30的工资为：&#x27;</span><span class="operator">||</span>TO_CHAR(V_salary));</span><br><span class="line"></span><br><span class="line">  EXCEPTION</span><br><span class="line">    <span class="keyword">WHEN</span> null_deptno <span class="keyword">THEN</span></span><br><span class="line">      V_sqlcode :<span class="operator">=</span>SQLCODE;</span><br><span class="line">      V_sqlerr  :<span class="operator">=</span>SQLERRM;</span><br><span class="line">      <span class="keyword">INSERT</span> <span class="keyword">INTO</span> errlog(errcode, errtext) <span class="keyword">VALUES</span>(v_sqlcode, v_sqlerr);</span><br><span class="line">      <span class="keyword">COMMIT</span>;</span><br><span class="line">    <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">         DBMS_OUTPUT.PUT_LINE(SQLCODE<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>SQLERRM);</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">outer</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义触发器，使用RAISE_APPLICATION_ERROR阻止没有员工姓名的新员式记录插入：</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">TRIGGER</span> tr_insert_emp</span><br><span class="line">BEFORE <span class="keyword">INSERT</span> <span class="keyword">ON</span> employees</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  IF :new.first_name <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">OR</span> :new.last_name <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">THEN</span></span><br><span class="line">    RAISE_APPLICATION_ERROR(<span class="number">-20000</span>,<span class="string">&#x27;Employee must have a name.&#x27;</span>);</span><br><span class="line">  <span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-6异常错误处理编程"><a href="#4-6异常错误处理编程" class="headerlink" title="4.6异常错误处理编程"></a>4.6异常错误处理编程</h3><p>由于ORACLE 的错信息最大长度是512字节，为了得到完整的错误提示信息，我们可用 SQLERRM和 SUBSTR 函数一起得到错误提示信息，方便进行错误，特别是如果WHEN OTHERS异常处理器时更为方便。</p>
<blockquote>
<p>SQLCODE  返回遇到的Oracle错误号,<br>SQLERRM  返回遇到的Oracle错误信息.<br>如:  SQLCODE&#x3D;-100    SQLERRM&#x3D;’no_data_found’<br>SQLCODE&#x3D;0       SQLERRM&#x3D;’normal, successfual completion’</p>
</blockquote>
<p>范例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 将ORACLE错误代码及其信息存入错误代码表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> errors (errnum NUMBER(<span class="number">4</span>), errmsg VARCHAR2(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   err_msg  VARCHAR2(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="comment">/*  得到所有 ORACLE 错误信息  */</span></span><br><span class="line">   <span class="keyword">FOR</span> err_num <span class="keyword">IN</span> <span class="number">-100</span> .. <span class="number">0</span> LOOP</span><br><span class="line">      err_msg :<span class="operator">=</span> SQLERRM(err_num);</span><br><span class="line">      <span class="keyword">INSERT</span> <span class="keyword">INTO</span> errors <span class="keyword">VALUES</span>(err_num, err_msg);</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> errors;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 查询ORACLE错误代码；</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees(employee_id, first_name,last_name,hire_date,department_id)</span><br><span class="line">   <span class="keyword">VALUES</span>(<span class="number">2222</span>, <span class="string">&#x27;Eric&#x27;</span>,<span class="string">&#x27;Hu&#x27;</span>, SYSDATE, <span class="number">20</span>);</span><br><span class="line">   DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;插入数据记录成功!&#x27;</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees(employee_id, first_name,last_name,hire_date,department_id)</span><br><span class="line">   <span class="keyword">VALUES</span>(<span class="number">2222</span>, <span class="string">&#x27;胡&#x27;</span>,<span class="string">&#x27;勇&#x27;</span>, SYSDATE, <span class="number">20</span>);</span><br><span class="line">   DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;插入数据记录成功!&#x27;</span>);</span><br><span class="line">EXCEPTION</span><br><span class="line">   <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(SQLCODE<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>SQLERRM);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 利用ORACLE错误代码，编写异常错误处理代码；</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   empno_remaining EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(empno_remaining, <span class="number">-1</span>);</span><br><span class="line">   <span class="comment">/* -1 是违反唯一约束条件的错误代码 */</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees(employee_id, first_name,last_name,hire_date,department_id)</span><br><span class="line">   <span class="keyword">VALUES</span>(<span class="number">3333</span>, <span class="string">&#x27;Eric&#x27;</span>,<span class="string">&#x27;Hu&#x27;</span>, SYSDATE, <span class="number">20</span>);</span><br><span class="line">   DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;插入数据记录成功!&#x27;</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees(employee_id, first_name,last_name,hire_date,department_id)</span><br><span class="line">   <span class="keyword">VALUES</span>(<span class="number">3333</span>, <span class="string">&#x27;胡&#x27;</span>,<span class="string">&#x27;勇&#x27;</span>,SYSDATE, <span class="number">20</span>);</span><br><span class="line">   DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;插入数据记录成功!&#x27;</span>);</span><br><span class="line">EXCEPTION</span><br><span class="line">   <span class="keyword">WHEN</span> empno_remaining <span class="keyword">THEN</span> </span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;违反数据完整性约束!&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(SQLCODE<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>SQLERRM);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="5-1-过程与函数"><a href="#5-1-过程与函数" class="headerlink" title="5.1 过程与函数"></a>5.1 过程与函数</h3><p>过程和函数统称为PL&#x2F;SQL子程序，他们是被命名的PL&#x2F;SQL块，均存储在数据库中，并通过输入、输出参数或输入&#x2F;输出参数与其调用者交换信息。过程和函数的唯一区别是函数总向调用者返回数据，而过程则不返回数据。</p>
<h3 id="5-2-创建函数"><a href="#5-2-创建函数" class="headerlink" title="5.2 创建函数"></a>5.2 创建函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">OR</span> REPLACE] <span class="keyword">FUNCTION</span> function_name</span><br><span class="line"> (arg1 [ &#123; <span class="keyword">IN</span> <span class="operator">|</span> <span class="keyword">OUT</span> <span class="operator">|</span> <span class="keyword">IN</span> <span class="keyword">OUT</span> &#125;] type1 [<span class="keyword">DEFAULT</span> value1],</span><br><span class="line"> [arg2 [ &#123; <span class="keyword">IN</span> <span class="operator">|</span> <span class="keyword">OUT</span> <span class="operator">|</span> <span class="keyword">IN</span> <span class="keyword">OUT</span> &#125;] type2 [<span class="keyword">DEFAULT</span> value1]],</span><br><span class="line"> ......</span><br><span class="line"> [argn [ &#123; <span class="keyword">IN</span> <span class="operator">|</span> <span class="keyword">OUT</span> <span class="operator">|</span> <span class="keyword">IN</span> <span class="keyword">OUT</span> &#125;] typen [<span class="keyword">DEFAULT</span> valuen]])</span><br><span class="line"> [ AUTHID DEFINER <span class="operator">|</span> <span class="built_in">CURRENT_USER</span> ]</span><br><span class="line"><span class="keyword">RETURN</span> return_type</span><br><span class="line"> <span class="keyword">IS</span> <span class="operator">|</span> <span class="keyword">AS</span></span><br><span class="line">    <span class="operator">&lt;</span>类型.变量的声明部分<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    执行部分</span><br><span class="line">    <span class="keyword">RETURN</span> expression</span><br><span class="line">EXCEPTION</span><br><span class="line">    异常处理部分</span><br><span class="line"><span class="keyword">END</span> function_name; 　　</span><br></pre></td></tr></table></figure>

<p>IN, OUT, IN OUT是形参的模式。若省略，则为 IN 模式。 IN 模式的形参只能将实参传递给形参，进入函数内部，但只能读不能写，函数返回时实参的值不变。 OUT 模式的形参会忽略调用时的实参值（或说该形参的初始值总是 NULL），但在函数内部可以被读或写，函数返回时形参的值会赋予给实参。 IN OUT 具有前两种模式的特性，即调用时，实参的值总是传递给形参，结束时，形参的值传递给实参。调用时，对于 IN 模式的实参可以是常量或变量，但对于 OUT 和 IN OUT模式的实参必须是变量。只有在确认function_name函数是新函数或是要更新的函数时，才使用OR REPALCE关键字，否则容易删除有用的函数。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--获取某部门的工资总和</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE</span><br><span class="line"><span class="keyword">FUNCTION</span> get_salary(</span><br><span class="line">  Dept_no NUMBER,</span><br><span class="line">  Emp_count <span class="keyword">OUT</span> NUMBER)</span><br><span class="line">  <span class="keyword">RETURN</span> NUMBER</span><br><span class="line"><span class="keyword">IS</span></span><br><span class="line">  V_sum NUMBER;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">SELECT</span> <span class="built_in">SUM</span>(SALARY), <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">INTO</span> V_sum, emp_count</span><br><span class="line">    <span class="keyword">FROM</span> EMPLOYEES <span class="keyword">WHERE</span> DEPARTMENT_ID<span class="operator">=</span>dept_no;</span><br><span class="line">  <span class="keyword">RETURN</span> v_sum;</span><br><span class="line">EXCEPTION</span><br><span class="line">   <span class="keyword">WHEN</span> NO_DATA_FOUND <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;你需要的数据不存在!&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(SQLCODE<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>SQLERRM);</span><br><span class="line"><span class="keyword">END</span> get_salary;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-函数调用"><a href="#5-3-函数调用" class="headerlink" title="5.3 函数调用"></a>5.3 函数调用</h3><p>在调用函数时，可以使用以下三种方法</p>
<ul>
<li>位置表示法：按形参的排列顺序，依次写出实参的名称，而将形参与实参关联起来进行传递 <strong>argument_value1[,argument_value2 …]</strong></li>
<li>名称表示法：写出实参对应的形参，而将形参与实参关联起来进行传递 <strong>argument &#x3D;&gt; parameter [,…]</strong></li>
<li>组合传递：同时使用位置表示法和名称表示法为函数传递参数，使用位置表示法所传递的参数必须放在名称表示法所传递的参数前面。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 位置表示法</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    V_num NUMBER;</span><br><span class="line">    V_sum NUMBER;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    V_sum :<span class="operator">=</span>get_salary(<span class="number">10</span>, v_num);</span><br><span class="line">    DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;部门号为:10的工资总和：&#x27;</span><span class="operator">||</span>v_sum<span class="operator">||</span><span class="string">&#x27;，人数为：&#x27;</span><span class="operator">||</span>v_num);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 名称表示法</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    V_num NUMBER;</span><br><span class="line">    V_sum NUMBER;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    V_sum :<span class="operator">=</span>get_salary(emp_count <span class="operator">=</span><span class="operator">&gt;</span> v_num, dept_no <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">10</span>);</span><br><span class="line">    DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;部门号为:10的工资总和：&#x27;</span><span class="operator">||</span>v_sum<span class="operator">||</span><span class="string">&#x27;，人数为：&#x27;</span><span class="operator">||</span>v_num);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 组合传递</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">FUNCTION</span> demo_fun(</span><br><span class="line">  Name VARCHAR2,<span class="comment">--注意VARCHAR2不能给精度，如：VARCHAR2(10)，其它类似</span></span><br><span class="line">  Age <span class="type">INTEGER</span>,</span><br><span class="line">  Sex VARCHAR2)</span><br><span class="line">  <span class="keyword">RETURN</span> VARCHAR2</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">  V_var VARCHAR2(<span class="number">32</span>);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  V_var :<span class="operator">=</span> name<span class="operator">||</span><span class="string">&#x27;：&#x27;</span><span class="operator">||</span>TO_CHAR(age)<span class="operator">||</span><span class="string">&#x27;岁.&#x27;</span><span class="operator">||</span>sex;</span><br><span class="line">  <span class="keyword">RETURN</span> v_var;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">  Var <span class="type">VARCHAR</span>(<span class="number">32</span>);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  Var :<span class="operator">=</span> demo_fun(<span class="string">&#x27;user1&#x27;</span>, <span class="number">30</span>, sex <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(var);</span><br><span class="line"> </span><br><span class="line">  Var :<span class="operator">=</span> demo_fun(<span class="string">&#x27;user2&#x27;</span>, age <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">40</span>, sex <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(var);</span><br><span class="line"> </span><br><span class="line">  Var :<span class="operator">=</span> demo_fun(<span class="string">&#x27;user3&#x27;</span>, sex <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;女&#x27;</span>, age <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">20</span>);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(var);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="5-4-参数默认值"><a href="#5-4-参数默认值" class="headerlink" title="5.4 参数默认值"></a>5.4 参数默认值</h3><p>在 CREATE OR REPLACE FUNCTION 语句中声明函数参数时可以使用DEFAULT关键字为输入的参数指定默认值。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">FUNCTION</span> demo_fun(</span><br><span class="line">  Name VARCHAR2,</span><br><span class="line">  Age <span class="type">INTEGER</span>,</span><br><span class="line">  Sex VARCHAR2 <span class="keyword">DEFAULT</span> <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line">  <span class="keyword">RETURN</span> VARCHAR2</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">  V_var VARCHAR2(<span class="number">32</span>);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  V_var :<span class="operator">=</span> name<span class="operator">||</span><span class="string">&#x27;：&#x27;</span><span class="operator">||</span>TO_CHAR(age)<span class="operator">||</span><span class="string">&#x27;岁.&#x27;</span><span class="operator">||</span>sex;</span><br><span class="line">  <span class="keyword">RETURN</span> v_var;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<p>具有默认值的函数创建后，在函数调用时，如果没有为具有默认值的参数提供实际参数值，函数将使用该参数的默认值。但当调用者为默认参数提供实际参数时，函数将使用实际参数值。在创建函数时，只能为输入参数设置默认值，而不能为输入&#x2F;输出参数设置默认值。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line"> var <span class="type">VARCHAR</span>(<span class="number">32</span>);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"> var :<span class="operator">=</span> demo_fun(<span class="string">&#x27;user1&#x27;</span>, <span class="number">30</span>);</span><br><span class="line"> DBMS_OUTPUT.PUT_LINE(var);</span><br><span class="line"> var :<span class="operator">=</span> demo_fun(<span class="string">&#x27;user2&#x27;</span>, age <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">40</span>);</span><br><span class="line"> DBMS_OUTPUT.PUT_LINE(var);</span><br><span class="line"> var :<span class="operator">=</span> demo_fun(<span class="string">&#x27;user3&#x27;</span>, sex <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;女&#x27;</span>, age <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">20</span>);</span><br><span class="line"> DBMS_OUTPUT.PUT_LINE(var);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<p>5.5 储存过程</p>
<p>创建</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">OR</span> REPLACE] <span class="keyword">PROCEDURE</span> procedure_name</span><br><span class="line">([arg1 [ <span class="keyword">IN</span> <span class="operator">|</span> <span class="keyword">OUT</span> <span class="operator">|</span> <span class="keyword">IN</span> <span class="keyword">OUT</span> ]] type1 [<span class="keyword">DEFAULT</span> value1],</span><br><span class="line"> [arg2 [ <span class="keyword">IN</span> <span class="operator">|</span> <span class="keyword">OUT</span> <span class="operator">|</span> <span class="keyword">IN</span> <span class="keyword">OUT</span> ]] type2 [<span class="keyword">DEFAULT</span> value1]],</span><br><span class="line"> ......</span><br><span class="line"> [argn [ <span class="keyword">IN</span> <span class="operator">|</span> <span class="keyword">OUT</span> <span class="operator">|</span> <span class="keyword">IN</span> <span class="keyword">OUT</span> ]] typen [<span class="keyword">DEFAULT</span> valuen])</span><br><span class="line">    [ AUTHID DEFINER <span class="operator">|</span> <span class="built_in">CURRENT_USER</span> ]</span><br><span class="line">&#123; <span class="keyword">IS</span> <span class="operator">|</span> <span class="keyword">AS</span> &#125;</span><br><span class="line">  <span class="operator">&lt;</span>声明部分<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="operator">&lt;</span>执行部分<span class="operator">&gt;</span></span><br><span class="line">EXCEPTION</span><br><span class="line">  <span class="operator">&lt;</span>可选的异常错误处理程序<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">END</span> procedure_name;</span><br></pre></td></tr></table></figure>

<p>范例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 用户连接登记记录；  </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> logtable (userid VARCHAR2(<span class="number">10</span>), logdate <span class="type">date</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">PROCEDURE</span> logexecution</span><br><span class="line"><span class="keyword">IS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> logtable (userid, logdate) <span class="keyword">VALUES</span> (<span class="keyword">USER</span>, SYSDATE);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除指定员工记录； </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">PROCEDURE</span> DelEmp (v_empno <span class="keyword">IN</span> employees.employee_id<span class="operator">%</span>TYPE)</span><br><span class="line"><span class="keyword">AS</span> No_result EXCEPTION;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">DELETE</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> v_empno;</span><br><span class="line">   IF <span class="keyword">SQL</span><span class="operator">%</span>NOTFOUND <span class="keyword">THEN</span></span><br><span class="line">      RAISE no_result;</span><br><span class="line">   <span class="keyword">END</span> IF;</span><br><span class="line">   DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;编码为&#x27;</span><span class="operator">||</span>v_empno<span class="operator">||</span><span class="string">&#x27;的员工已被删除!&#x27;</span>);</span><br><span class="line">EXCEPTION</span><br><span class="line">   <span class="keyword">WHEN</span> no_result <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;温馨提示:你需要的数据不存在!&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(SQLCODE<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>SQLERRM);</span><br><span class="line"><span class="keyword">END</span> DelEmp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入员工记录: </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">PROCEDURE</span> InsertEmp(</span><br><span class="line">   v_empno     <span class="keyword">in</span> employees.employee_id<span class="operator">%</span>TYPE,</span><br><span class="line">   v_firstname <span class="keyword">in</span> employees.first_name<span class="operator">%</span>TYPE,</span><br><span class="line">   v_lastname  <span class="keyword">in</span> employees.last_name<span class="operator">%</span>TYPE,</span><br><span class="line">   v_deptno    <span class="keyword">in</span> employees.department_id<span class="operator">%</span>TYPE</span><br><span class="line">   )</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">   empno_remaining EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(empno_remaining, <span class="number">-1</span>);</span><br><span class="line">   <span class="comment">/* -1 是违反唯一约束条件的错误代码 */</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMPLOYEES(EMPLOYEE_ID, FIRST_NAME, LAST_NAME, HIRE_DATE,DEPARTMENT_ID)</span><br><span class="line">   <span class="keyword">VALUES</span>(v_empno, v_firstname,v_lastname, sysdate, v_deptno);</span><br><span class="line">   DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;温馨提示:插入数据记录成功!&#x27;</span>);</span><br><span class="line">EXCEPTION</span><br><span class="line">   <span class="keyword">WHEN</span> empno_remaining <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;温馨提示:违反数据完整性约束!&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(SQLCODE<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>SQLERRM);</span><br><span class="line"><span class="keyword">END</span> InsertEmp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用存储过程向departments表中插入数据。 </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">PROCEDURE</span> insert_dept</span><br><span class="line">  (v_dept_id <span class="keyword">IN</span> departments.department_id<span class="operator">%</span>TYPE,</span><br><span class="line">   v_dept_name <span class="keyword">IN</span> departments.department_name<span class="operator">%</span>TYPE,</span><br><span class="line">   v_mgr_id <span class="keyword">IN</span> departments.manager_id<span class="operator">%</span>TYPE,</span><br><span class="line">   v_loc_id <span class="keyword">IN</span> departments.location_id<span class="operator">%</span>TYPE)</span><br><span class="line"><span class="keyword">IS</span></span><br><span class="line">   ept_null_error EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(ept_null_error, <span class="number">-1400</span>);</span><br><span class="line">   ept_no_loc_id EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(ept_no_loc_id, <span class="number">-2291</span>);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> departments</span><br><span class="line">   (department_id, department_name, manager_id, location_id)</span><br><span class="line">   <span class="keyword">VALUES</span></span><br><span class="line">   (v_dept_id, v_dept_name, v_mgr_id, v_loc_id);</span><br><span class="line">   DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;插入部门&#x27;</span><span class="operator">||</span>v_dept_id<span class="operator">||</span><span class="string">&#x27;成功&#x27;</span>);</span><br><span class="line">EXCEPTION</span><br><span class="line">   <span class="keyword">WHEN</span> DUP_VAL_ON_INDEX <span class="keyword">THEN</span></span><br><span class="line">      RAISE_APPLICATION_ERROR(<span class="number">-20000</span>, <span class="string">&#x27;部门编码不能重复&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> ept_null_error <span class="keyword">THEN</span></span><br><span class="line">      RAISE_APPLICATION_ERROR(<span class="number">-20001</span>, <span class="string">&#x27;部门编码、部门名称不能为空&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> ept_no_loc_id <span class="keyword">THEN</span></span><br><span class="line">      RAISE_APPLICATION_ERROR(<span class="number">-20002</span>, <span class="string">&#x27;没有该地点&#x27;</span>);</span><br><span class="line"><span class="keyword">END</span> insert_dept;</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 调用实例1</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   ept_20000 EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(ept_20000, <span class="number">-20000</span>);</span><br><span class="line">   ept_20001 EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(ept_20001, <span class="number">-20001</span>);</span><br><span class="line">   ept_20002 EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(ept_20002, <span class="number">-20002</span>);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   insert_dept(<span class="number">300</span>, <span class="string">&#x27;部门300&#x27;</span>, <span class="number">100</span>, <span class="number">2400</span>);</span><br><span class="line">   insert_dept(<span class="number">310</span>, <span class="keyword">NULL</span>, <span class="number">100</span>, <span class="number">2400</span>);</span><br><span class="line">   insert_dept(<span class="number">310</span>, <span class="string">&#x27;部门310&#x27;</span>, <span class="number">100</span>, <span class="number">900</span>);</span><br><span class="line">EXCEPTION</span><br><span class="line">   <span class="keyword">WHEN</span> ept_20000 <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;ept_20000部门编码不能重复&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> ept_20001 <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;ept_20001部门编码、部门名称不能为空&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> ept_20002 <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;ept_20002没有该地点&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;others出现了其他异常错误&#x27;</span>);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   ept_20000 EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(ept_20000, <span class="number">-20000</span>);</span><br><span class="line">   ept_20001 EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(ept_20001, <span class="number">-20001</span>);</span><br><span class="line">   ept_20002 EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(ept_20002, <span class="number">-20002</span>);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   insert_dept(v_dept_name <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;部门310&#x27;</span>, v_dept_id <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">310</span>,</span><br><span class="line">               v_mgr_id <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">100</span>, v_loc_id <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">2400</span>);</span><br><span class="line">   insert_dept(<span class="number">320</span>, <span class="string">&#x27;部门320&#x27;</span>, v_mgr_id <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">100</span>, v_loc_id <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">900</span>);</span><br><span class="line">EXCEPTION</span><br><span class="line">   <span class="keyword">WHEN</span> ept_20000 <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;ept_20000部门编码不能重复&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> ept_20001 <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;ept_20001部门编码、部门名称不能为空&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> ept_20002 <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;ept_20002没有该地点&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;others出现了其他异常错误&#x27;</span>);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-6-调用存储过程"><a href="#5-6-调用存储过程" class="headerlink" title="5.6 调用存储过程"></a>5.6 调用存储过程</h3><p>存储过程建立完成后，只要通过授权，用户就可以在SQLPLUS 、ORACLE开发工具或第三方开发工具中来调用运行。对于参数的传递也有三种：按位置传递、按名称传递和组合传递，传递方法与函数的一样。ORACLE 使用EXECUTE 语句来实现对存储过程的调用：<strong>EXEC[UTE] procedure_name( parameter1, parameter2…);</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询指定员工记录； </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">PROCEDURE</span> QueryEmp</span><br><span class="line">    (v_empno <span class="keyword">IN</span>  employees.employee_id<span class="operator">%</span>TYPE,</span><br><span class="line">     v_ename <span class="keyword">OUT</span> employees.first_name<span class="operator">%</span>TYPE,</span><br><span class="line">     v_sa<span class="operator">-</span>  <span class="keyword">OUT</span> employees.salary<span class="operator">%</span>TYPE)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SELECT</span> last_name <span class="operator">||</span> last_name, salary <span class="keyword">INTO</span> v_ename, v_sal</span><br><span class="line">     <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> v_empno;</span><br><span class="line">    DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;温馨提示:编码为&#x27;</span><span class="operator">||</span>v_empno<span class="operator">||</span><span class="string">&#x27;的员工已经查到!&#x27;</span>);</span><br><span class="line">EXCEPTION</span><br><span class="line">    <span class="keyword">WHEN</span> NO_DATA_FOUND <span class="keyword">THEN</span></span><br><span class="line">    DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;温馨提示:你需要的数据不存在!&#x27;</span>);</span><br><span class="line">    <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">    DBMS_OUTPUT.PUT_LINE(SQLCODE<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>SQLERRM);</span><br><span class="line"><span class="keyword">END</span> QueryEmp;</span><br><span class="line"><span class="comment">--调用</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   v1 employees.first_name<span class="operator">%</span>TYPE;</span><br><span class="line">   v2 employees.salary<span class="operator">%</span>TYPE;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  QueryEmp(<span class="number">100</span>, v1, v2);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;姓名:&#x27;</span><span class="operator">||</span>v1);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;工资:&#x27;</span><span class="operator">||</span>v2);</span><br><span class="line">  QueryEmp(<span class="number">103</span>, v1, v2);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;姓名:&#x27;</span><span class="operator">||</span>v1);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;工资:&#x27;</span><span class="operator">||</span>v2);</span><br><span class="line">  QueryEmp(<span class="number">104</span>, v1, v2);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;姓名:&#x27;</span><span class="operator">||</span>v1);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;工资:&#x27;</span><span class="operator">||</span>v2);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 计算指定部门的工资总和，并统计其中的职工数量。 </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">PROCEDURE</span> proc_demo</span><br><span class="line">    (</span><br><span class="line">      dept_no NUMBER <span class="keyword">DEFAULT</span> <span class="number">10</span>,</span><br><span class="line">      sal_sum <span class="keyword">OUT</span> NUMBER,</span><br><span class="line">      emp_count <span class="keyword">OUT</span> NUMBER</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">IS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">SUM</span>(salary), <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">INTO</span> sal_sum, emp_count</span><br><span class="line">      <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> department_id <span class="operator">=</span> dept_no;</span><br><span class="line">EXCEPTION</span><br><span class="line">   <span class="keyword">WHEN</span> NO_DATA_FOUND <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;温馨提示:你需要的数据不存在!&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(SQLCODE<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>SQLERRM);</span><br><span class="line"><span class="keyword">END</span> proc_demo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">V_num NUMBER;</span><br><span class="line">V_sum NUMBER(<span class="number">8</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  Proc_demo(<span class="number">30</span>, v_sum, v_num);</span><br><span class="line">DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;温馨提示:30号部门工资总和：&#x27;</span><span class="operator">||</span>v_sum<span class="operator">||</span><span class="string">&#x27;,人数：&#x27;</span><span class="operator">||</span>v_num);</span><br><span class="line">  Proc_demo(sal_sum <span class="operator">=</span><span class="operator">&gt;</span> v_sum, emp_count <span class="operator">=</span><span class="operator">&gt;</span> v_num);</span><br><span class="line">DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;温馨提示:10号部门工资总和：&#x27;</span><span class="operator">||</span>v_sum<span class="operator">||</span><span class="string">&#x27;,人数：&#x27;</span><span class="operator">||</span>v_num);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="5-7-AUTHID"><a href="#5-7-AUTHID" class="headerlink" title="5.7 AUTHID"></a>5.7 AUTHID</h3><p>这里首先需要明白定义者权限和调用者权限的区别。</p>
<p>定义者权限（Difiner Right）：定义者权限是程序的默认权限。如果是在用户A下创建的程序，但其他用户只要能执行这个程序，那么这个程序所执行的任务都是以用户A的名义来执行的。因为用户A是程序的定义者。用户A能做什么，那这个程序就能做什么。</p>
<p>调用者权限（Invoker Right）：也叫执行者权限。如果某个程序中含有创建表的操作，且这个表只有用户A有创建权限，那么这个程序在用户A下面才执行成功，在其他用户下是不能成功执行的。</p>
<p>程序中没有AUTHID CURRENT_USER表示定义者权限，以定义者身份执行；程序中加上AUTHID CURRENT_USER表示调用者权限，以调用者身份执行。</p>
<p>调用者权限与定义者权限之间的差异主要体现在三个方面：</p>
<ol>
<li>执行的SCHEMA不同，操作的对象也不同</li>
</ol>
<ul>
<li><p>在定义者权限下，执行的用户为定义者，所操作的对象是定义者在编译时指定的对象。</p>
</li>
<li><p>在调用者权限下，执行的用户为当前用户，所操作的对象是当前模式下的对象。</p>
</li>
</ul>
<ol start="2">
<li>执行的权限不同</li>
</ol>
<ul>
<li><p>在定义者权限下，当前用户的权限为角色无效情况下所拥有的权限。</p>
</li>
<li><p>在调用者权限下，当前用户的权限为当前所拥有的权限（含角色）。</p>
</li>
</ul>
<ol start="3">
<li>执行的效率不同</li>
</ol>
<ul>
<li><p>在定义者权限下，过程被静态编译静态执行，所执行SQL语句在共享区池中是可被共享使用的。</p>
</li>
<li><p>在调用者权限下，过程静态编译，但动态执行，虽然执行的语句相同，但不同用户执行，其SQL语句在共享池中并不能共享。</p>
</li>
</ul>
<p>[AUTHID DEFINER]</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建立过程，使用AUTOID DEFINER； </span></span><br><span class="line"><span class="comment">--使用HR用户登录</span></span><br><span class="line"><span class="keyword">Connect</span> HR<span class="operator">/</span>qaz</span><br><span class="line"><span class="comment">--新建logtable日志表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> logtable;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">table</span> logtable (userid VARCHAR2(<span class="number">10</span>), logdate <span class="type">date</span>);</span><br><span class="line"><span class="comment">--新建过程/procedure,权限模式为定义者权限</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">PROCEDURE</span> logexecution</span><br><span class="line">    AUTHID DEFINER</span><br><span class="line"><span class="keyword">IS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> logtable (userid, logdate) <span class="keyword">VALUES</span> (<span class="keyword">USER</span>, SYSDATE);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="comment">--将logexecution的权限更改为public</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">EXECUTE</span> <span class="keyword">ON</span> logexecution <span class="keyword">TO</span> PUBLIC;</span><br><span class="line"><span class="comment">--使用SYSDBA用户登录</span></span><br><span class="line"><span class="keyword">CONNECT</span> <span class="operator">/</span> <span class="keyword">AS</span> SYSDBA</span><br><span class="line"><span class="comment">--创建testuser1用户</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CONNECT</span> <span class="keyword">TO</span> testuser1 IDENTIFIED <span class="keyword">BY</span> userpwd1;</span><br><span class="line"><span class="comment">--使用testuser1登录</span></span><br><span class="line"><span class="keyword">CONNECT</span> testuser1<span class="operator">/</span>userpwd1</span><br><span class="line"><span class="comment">--向HR.LOGTABLE表中插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> HR.LOGTABLE <span class="keyword">VALUES</span> (<span class="keyword">USER</span>, SYSDATE);</span><br><span class="line"><span class="comment">--执行HR.logexecution存储过程，插入数据库的为 HR 定义者的用户信息</span></span><br><span class="line"><span class="keyword">EXECUTE</span> HR.logexecution</span><br><span class="line"><span class="comment">--使用HR用户登录</span></span><br><span class="line"><span class="keyword">CONNECT</span> HR<span class="operator">/</span>qaz</span><br><span class="line"><span class="comment">--查看表内容</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> HR.logtable;</span><br></pre></td></tr></table></figure>

<p>[AUTHID CURRENT_USER]</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建立过程，使用AUTOID 权限模式为定义者权限。</span></span><br><span class="line"><span class="keyword">CONNECT</span> HR<span class="operator">/</span>qaz</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">PROCEDURE</span> logexecution</span><br><span class="line">  AUTHID <span class="built_in">CURRENT_USER</span> </span><br><span class="line"><span class="keyword">IS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> logtable (userid, logdate) <span class="keyword">VALUES</span> (<span class="keyword">USER</span>, SYSDATE);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">EXECUTE</span> <span class="keyword">ON</span> logexecution <span class="keyword">TO</span> PUBLIC;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CONNECT</span> testuser1<span class="operator">/</span>userpwd1</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> HR.LOGTABLE <span class="keyword">VALUES</span> (<span class="keyword">USER</span>, SYSDATE);</span><br><span class="line"><span class="comment">--执行方法插入数据库的为 testuser1 当前用户信息</span></span><br><span class="line"><span class="keyword">EXECUTE</span> HR.logexecution </span><br></pre></td></tr></table></figure>

<h3 id="5-8-PRAGMA-AUTONOMOUS-TRANSACTION"><a href="#5-8-PRAGMA-AUTONOMOUS-TRANSACTION" class="headerlink" title="5.8 PRAGMA AUTONOMOUS_TRANSACTION"></a>5.8 PRAGMA AUTONOMOUS_TRANSACTION</h3><p>ORACLE可以支持事务处理中的事务处理的概念。这种子事务处理可以完成它自己的工作，独立于父事务处理进行提交或者回滚．通过使用这种方法，开发者就能够实现这样的过程：无论父事务处理是提交还是回滚，它都可以成功执行。</p>
<p>自治事务从当前事务开始，在其自身的语境中执行。它们能独立地被提交或重新运行，而不影响正在运行的事务。正因为这样，它们成了编写错误日志表格的理想形式。在事务中检测到错误时，您可以在错误日志表格中插入一行并提交它，然后在不丢失这次插入的情况下回滚主事务。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建立过程，使用自动事务处理进行日志记录；</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> logtable;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> logtable(</span><br><span class="line">  Username varchar2(<span class="number">20</span>),</span><br><span class="line">  Dassate_time <span class="type">date</span>,</span><br><span class="line">  Mege varchar2(<span class="number">60</span>)</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> temp_table( N number );</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">PROCEDURE</span> log_message(p_message varchar2)</span><br><span class="line">  <span class="keyword">AS</span></span><br><span class="line">  PRAGMA AUTONOMOUS_TRANSACTION;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> logtable <span class="keyword">VALUES</span> ( <span class="keyword">user</span>, sysdate, p_message );</span><br><span class="line">  <span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="keyword">END</span> log_message;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  Log_message (<span class="string">&#x27;About to insert into temp_table&#x27;</span>);</span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> temp_table <span class="keyword">VALUES</span> (<span class="number">1</span>);</span><br><span class="line">  Log_message (<span class="string">&#x27;Rollback to insert into temp_table&#x27;</span>);</span><br><span class="line">  <span class="keyword">ROLLBACK</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> logtable;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> temp_table;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 建立过程，没有使用自动事务处理进行日志记录； </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">PROCEDURE</span> log_message(p_message varchar2)</span><br><span class="line">  <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> logtable <span class="keyword">VALUES</span> ( <span class="keyword">user</span>, sysdate, p_message );</span><br><span class="line">  <span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="keyword">END</span> log_message;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  Log_message (<span class="string">&#x27;About to insert into temp_table&#x27;</span>);</span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> temp_table <span class="keyword">VALUES</span> (<span class="number">1</span>);</span><br><span class="line">  Log_message (<span class="string">&#x27;Rollback to insert into temp_table&#x27;</span>);</span><br><span class="line">  <span class="keyword">ROLLBACK</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> logtable;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> temp_table;</span><br></pre></td></tr></table></figure>

<h3 id="5-9-开发存储过程步骤"><a href="#5-9-开发存储过程步骤" class="headerlink" title="5.9 开发存储过程步骤"></a>5.9 开发存储过程步骤</h3><p>开发存储过程、函数、包及触发器的步骤如下：</p>
<ol>
<li>使用文字编辑处理软件编辑存储过程源码</li>
<li>在SQLPLUS或用调试工具将存储过程程序进行解释 START &#x2F;home&#x2F;stat.sql</li>
<li>调试源码直到正确：使用SHOW ERROR提示错误位置；使用 user_errors数据字典查看各存储过程的错误位置</li>
<li>授权执行权给相关的用户或角色：如果存储过程没有授权，只有建立者才可以运行。可以用GRANT命令来进行存储过程的运行授权。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- GRANT语法 </span></span><br><span class="line"><span class="keyword">GRANT</span> system_privilege <span class="operator">|</span> role</span><br><span class="line"><span class="keyword">TO</span> <span class="keyword">user</span> <span class="operator">|</span> role <span class="operator">|</span> PUBLIC [<span class="keyword">WITH</span> ADMIN OPTION]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">GRANT</span> object_privilege <span class="operator">|</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> schema.object</span><br><span class="line"><span class="keyword">TO</span> <span class="keyword">user</span> <span class="operator">|</span> role <span class="operator">|</span> PUBLIC [<span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION]</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 例子</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE PUBLIC SYNONYM dbms_job <span class="keyword">FOR</span> dbms_job</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">EXECUTE</span> <span class="keyword">ON</span> dbms_job <span class="keyword">TO</span> PUBLIC <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION</span><br></pre></td></tr></table></figure>

<h3 id="5-10-删除过程和函数"><a href="#5-10-删除过程和函数" class="headerlink" title="5.10 删除过程和函数"></a>5.10 删除过程和函数</h3><ol>
<li>删除过程 DROP PROCEDURE [user.Procudure_name];</li>
<li>删除函数 DROP FUNCTION [user.Function_name];</li>
</ol>
<h3 id="5-11-过程与函数的比较"><a href="#5-11-过程与函数的比较" class="headerlink" title="5.11 过程与函数的比较"></a>5.11 过程与函数的比较</h3><p><strong>过程与函数具有如下优点:</strong></p>
<ul>
<li>共同使用的代码可以只需要被编写和测试一次，而被需要该代码的任何应用程序（如：.NET、++、JAVA、VB程序，也可以是DLL库）调用。</li>
<li>这种集中编写、集中维护更新、大家共享（或重用）的方法，简化了应用程序的开发和维护，提高了效率与性能。</li>
<li>这种模块化的方法，使得可以将一个复杂的问题、大的程序逐步简化成几个简单的、小的程序部分，进行分别编写、调试。因此使程序的结构清晰、简单，也容易实现</li>
<li>可以在各个开发者之间提供处理数据、控制流程、提示信息等方面的一致性。</li>
<li>节省内存空间。它们以一种压缩的形式被存储在外存中，当被调用时才被放入内存进行处理。并且，如果多个用户要执行相同的过程或函数时，就只需要在内存中加载一个该过程或函数。</li>
<li>提高数据的安全性与完整性。通过把一些对数据的操作放到过程或函数中，就可以通过是否授予用户有执行该过程或的权限，来限制某些用户对数据进行这些操作。</li>
</ul>
<p><strong>过程与函数的相同功能有：</strong></p>
<ul>
<li>都使用IN模式的参数传入数据、OUT模式的参数返回数据。</li>
<li>输入参数都可以接受默认值，都可以传值或传引导。</li>
<li>调用时的实际参数都可以使用位置表示法、名称表示法或组合方法。</li>
<li>都有声明部分、执行部分和异常处理部分。</li>
<li>其管理过程都有创建、编译、授权、删除、显示依赖关系等。</li>
</ul>
<p><strong>使用过程与函数的原则：</strong></p>
<p>如果需要返回多个值和不返回值，就使用过程；<br>如果只需要返回一个值，就使用函数。<br>过程一般用于执行一个指定的动作，函数一般用于计算和返回一个值。<br>可以SQL语句内部（如表达式）调用函数来完成复杂的计算问题，但不能调用过程。所以这是函数的特色。</p>
<h3 id="6-1-触发器类型"><a href="#6-1-触发器类型" class="headerlink" title="6.1 触发器类型"></a>6.1 触发器类型</h3><p>触发器在数据库里以独立的对象存储，它与存储过程和函数不同的是，存储过程与函数需要用户显示调用才执行，而触发器是由一个事件来启动运行。即触发器是当某个事件发生时自动地隐式运行。并且，触发器不能接收参数。所以运行触发器就叫触发或点火（firing）。ORACLE事件指的是对数据库的表进行的INSERT、UPDATE及DELETE操作或对视图进行类似的操作。ORACLE将触发器的功能扩展到了触发ORACLE，如数据库的启动与关闭等。所以触发器常用来完成由数据库的完整性约束难以完成的复杂业务规则的约束，或用来监视对数据库的各种操作，实现审计的功能。</p>
<ul>
<li>DML触发器：在DML语句进行触发，可以在DML操作前或操作后进行触发，并且可以对每个行或语句操作上进行触发。</li>
<li>替代触发器：不能直接对由两个以上的表建立的视图进行操作。所以给出了替代触发器。它就是ORACLE专门为进行视图操作的一种处理方法。</li>
<li>系统触发器：可以在ORACLE数据库系统的事件中进行触发，如ORACLE系统的启动与关闭等。</li>
</ul>
<h3 id="6-2-触发器的组成"><a href="#6-2-触发器的组成" class="headerlink" title="6.2 触发器的组成"></a>6.2 触发器的组成</h3><p><strong>触发事件</strong>：引起触发器被触发的事件。 例如：DML语句(INSERT, UPDATE, DELETE语句对表或视图执行数据处理操作)、DDL语句（如CREATE、ALTER、DROP语句 在数据库中创建、修改、删除模式对象）、数据库系统事件（如系统启动或退出、异常错误）、用户事件（如登录或退出数据库）。<br><strong>触发时间</strong>：即该TRIGGER 是在触发事件发生之前（BEFORE）还是之后(AFTER)触发，也就是触发事件和该TRIGGER 的操作顺序。<br><strong>触发操作：</strong>即该TRIGGER 被触发之后的目的和意图，正是触发器本身要做的事情。 例如：PL&#x2F;SQL 块。<br><strong>触发对象：</strong>包括表、视图、模式、数据库。只有在这些对象上发生了符合触发条件的触发事件，才会执行触发操作。<br>触发条件：由WHEN子句指定一个逻辑表达式。只有当该表达式的值为TRUE时，遇到触发事件才会自动执行触发器，使其执行触发操作。<br><strong>触发频率：</strong>说明触发器内定义的动作被执行的次数。即语句级(STATEMENT)触发器和行级(ROW)触发器。</p>
<blockquote>
<p>语句级(STATEMENT)触发器：是指当某触发事件发生时，该触发器只执行一次；<br>行级(ROW)触发器：是指当某触发事件发生时，对受到该操作影响的每一行数据，触发器都单独执行一次。</p>
</blockquote>
<h3 id="6-3-触发器的注意点"><a href="#6-3-触发器的注意点" class="headerlink" title="6.3 触发器的注意点"></a>6.3 触发器的注意点</h3><ul>
<li>触发器不接受参数</li>
<li>一个表上最多可有12个触发器，但同一时间、同一事件、同一类型的触发器只能有一个。并各触发器之间不能有矛盾。</li>
<li>在一个表上的触发器越多，对在该表上的DML操作的性能影响就越大。</li>
<li>触发器最大为32KB。若确实需要，可以先建立过程，然后在触发器中用CALL语句进行调用。</li>
<li>在触发器的执行部分只能用DML语句（SELECT、INSERT、UPDATE、DELETE），不能使用DDL语句（CREATE、ALTER、DROP）。</li>
<li>触发器中不能包含事务控制语句(COMMIT，ROLLBACK，SAVEPOINT)。因为触发器是触发语句的一部分，触发语句被提交、回退时，触发器也被提交、回退了。</li>
<li>在触发器主体中调用的任何过程、函数，都不能使用事务控制语句。</li>
<li>在触发器主体中不能申明任何Long和blob变量。新值new和旧值old也不能向表中的任何long和blob列。</li>
<li>不同类型的触发器(如DML触发器、INSTEAD OF触发器、系统触发器)的语法格式和作用有较大区别。</li>
</ul>
<h3 id="6-4-创建触发器"><a href="#6-4-创建触发器" class="headerlink" title="6.4 创建触发器"></a>6.4 创建触发器</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">OR</span> REPLACE] <span class="keyword">TRIGGER</span> trigger_name</span><br><span class="line">&#123;BEFORE <span class="operator">|</span> AFTER &#125;</span><br><span class="line">&#123;<span class="keyword">INSERT</span> <span class="operator">|</span> <span class="keyword">DELETE</span> <span class="operator">|</span> <span class="keyword">UPDATE</span> [<span class="keyword">OF</span> <span class="keyword">column</span> [, <span class="keyword">column</span> …]]&#125;</span><br><span class="line">[<span class="keyword">OR</span> &#123;<span class="keyword">INSERT</span> <span class="operator">|</span> <span class="keyword">DELETE</span> <span class="operator">|</span> <span class="keyword">UPDATE</span> [<span class="keyword">OF</span> <span class="keyword">column</span> [, <span class="keyword">column</span> …]]&#125;...]</span><br><span class="line"><span class="keyword">ON</span> [schema.]table_name <span class="operator">|</span> [schema.]view_name</span><br><span class="line">[<span class="keyword">REFERENCING</span> &#123;<span class="keyword">OLD</span> [<span class="keyword">AS</span>] <span class="keyword">old</span> <span class="operator">|</span> <span class="keyword">NEW</span> [<span class="keyword">AS</span>] <span class="keyword">new</span><span class="operator">|</span> PARENT <span class="keyword">as</span> parent&#125;]</span><br><span class="line">[<span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> ]</span><br><span class="line">[<span class="keyword">WHEN</span> <span class="keyword">condition</span>]</span><br><span class="line">PL<span class="operator">/</span>SQL_BLOCK <span class="operator">|</span> <span class="keyword">CALL</span> procedure_name;</span><br></pre></td></tr></table></figure>

<ul>
<li>BEFORE 和 AFTER 指出触发器的触发时序分别为前触发和后触发方式，前触发是在执行触发事件之前触发当前所创建的触发器，后触发是在执行触发事件之后触发当前所创建的触发器。</li>
<li>FOR EACH ROW选项说明触发器为行触发器。</li>
<li>行触发器和语句触发器的区别表现在：行触发器要求当一个DML语句操走影响数据库中的多行数据时，对于其中的每个数据行，只要它们符合触发约束条件，均激活一次触发器；而语句触发器将整个语句操作作为触发事件，当它符合约束条件时，激活一次触发器。</li>
<li>当省略FOR EACH ROW选项时，BEFORE 和 AFTER 触发器为语句触发器，而 INSTEAD OF 触发器则只能为行触发器。</li>
<li>REFERENCING 子句说明相关名称，在行触发器的PL&#x2F;SQL块和 WHEN 子句中可以使用相关名称参照当前的新、旧列值，默认的相关名称分别为 OLD 和 NEW 。触发器的PL&#x2F;SQL块中应用相关名称时，必须在它们之前加冒号:，但在 WHEN 子句中则不能加冒号:。</li>
<li>WHEN 子句说明触发约束条件。 Condition 为一个逻辑表达时，其中必须包含相关名称，而不能包含查询语句，也不能调用PL&#x2F;SQL 函数。WHEN 子句指定的触发约束条件只能用在 BEFORE 和 AFTER 行触发器中，不能用在 INSTEAD OF 行触发器和其它类型的触发器中。</li>
<li>当一个基表被修改( <code>INSERT</code> ,  <code>UPDATE</code>,  <code>DELETE</code> )时要执行的存储过程，执行时根据其所依附的基表改动而自动触发，因此与应用程序无关，用数据库触发器可以保证数据的一致性和完整性。</li>
</ul>
<p>每张表最多可建立12 种类型的触发器，它们是:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">BEFORE <span class="keyword">INSERT</span></span><br><span class="line">BEFORE <span class="keyword">INSERT</span> <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">AFTER <span class="keyword">INSERT</span></span><br><span class="line">AFTER <span class="keyword">INSERT</span> <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"> </span><br><span class="line">BEFORE <span class="keyword">UPDATE</span></span><br><span class="line">BEFORE <span class="keyword">UPDATE</span> <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">AFTER <span class="keyword">UPDATE</span></span><br><span class="line">AFTER <span class="keyword">UPDATE</span> <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"> </span><br><span class="line">BEFORE <span class="keyword">DELETE</span></span><br><span class="line">BEFORE <span class="keyword">DELETE</span> <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">AFTER <span class="keyword">DELETE</span></span><br><span class="line">AFTER <span class="keyword">DELETE</span> <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> </span><br></pre></td></tr></table></figure>

<h3 id="6-5-触发器的触发次序"><a href="#6-5-触发器的触发次序" class="headerlink" title="6.5 触发器的触发次序"></a>6.5 触发器的触发次序</h3><ol>
<li>执行 BEFORE语句级触发器;</li>
<li>对与受语句影响的每一行<ol>
<li>执行 BEFORE行级触发器</li>
<li>执行 DML语句</li>
<li>执行 AFTER行级触发器</li>
</ol>
</li>
<li>执行 AFTER语句级触发器</li>
</ol>
<h3 id="6-6-创建DML触发器"><a href="#6-6-创建DML触发器" class="headerlink" title="6.6 创建DML触发器"></a>6.6 创建DML触发器</h3><p>触发器名与过程名和包的名字不一样，它是单独的名字空间，因而触发器名可以和表或过程有相同的名字，但在一个模式中触发器名不能相同。</p>
<h4 id="DML触发器的限制"><a href="#DML触发器的限制" class="headerlink" title="DML触发器的限制"></a>DML触发器的限制</h4><ul>
<li>CREATE TRIGGER语句文本的字符长度不能超过32KB；</li>
<li>触发器体内的 SELECT 语句只能为 SELECT … INTO …结构，或者为定义游标所使用的 SELECT 语句。</li>
<li>触发器中不能使用数据库事务控制语句 COMMIT; ROLLBACK, SVAEPOINT 语句；</li>
<li>由触发器所调用的过程或函数也不能使用数据库事务控制语句；</li>
<li>触发器中不能使用 LONG, LONG RAW 类型；</li>
<li>触发器内可以参照 LOB 类型列的列值，但不能通过 : NEW 修改 LOB 列中的数据；</li>
</ul>
<h4 id="DML触发器基本要点"><a href="#DML触发器基本要点" class="headerlink" title="DML触发器基本要点"></a>DML触发器基本要点</h4><p><strong>触发时机</strong>：指定触发器的触发时间。如果指定为 BEFORE，则表示在执行DML操作之前触发，以便防止某些错误操作发生或实现某些业务规则；如果指定为AFTER，则表示在执行DML操作之后触发，以便记录该操作或做某些事后处理。<br><strong>触发事件</strong>：引起触发器被触发的事件，即DML操作（INSERT、UPDATE、DELETE）。既可以是单个触发事件，也可以是多个触发事件的组合（只能使用OR逻辑组合，不能使用AND逻辑组合）。<br><strong>条件谓词</strong>：当在触发器中包含多个触发事件（INSERT、UPDATE、DELETE）的组合时，为了分别针对不同的事件进行不同的处理，需要使用ORACLE提供的如下条件谓词。<br>1） INSERTING ：当触发事件是 INSERT 时，取值为TRUE，否则为FALSE<br>2） UPDATING [（column_1,column_2,…,column_x）]：当触发事件是 UPDATE 时，如果修改了 column_x 列，则取值为 TRUE，否则为 FALSE 。其中 column_x 是可选的<br>3） DELETING ：当触发事件是 DELETE 时，则取值为 TRUE ，否则为 FALSE<br><strong>解发对象</strong>：指定触发器是创建在哪个表、视图上。<br><strong>触发类型</strong>：是语句级还是行级触发器。<br><strong>触发条件</strong>：由WHEN子句指定一个逻辑表达式，只允许在行级触发器上指定触发条件，指定UPDATING后面的列的列表。</p>
<p>当触发器被触发时，要使用被插入、更新或删除的记录中的列值，有时要使用操作前、操作后列的值 :NEW 修饰符访问操作完成后列的值，:OLD 修饰符访问操作完成前列的值</p>
<table>
<thead>
<tr>
<th align="left">特性</th>
<th align="left">INSERT</th>
<th align="left">UPDATE</th>
<th align="left">DELETE</th>
</tr>
</thead>
<tbody><tr>
<td align="left">OLD</td>
<td align="left">NULL</td>
<td align="left">实际值</td>
<td align="left">实际值</td>
</tr>
<tr>
<td align="left">NEW</td>
<td align="left">实际值</td>
<td align="left">实际值</td>
<td align="left">NULL</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建立一个触发器, 当职工表 emp 表被删除一条记录时，把被删除记录写到职工表删除日志表中去</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp_his <span class="keyword">AS</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> EMP <span class="keyword">WHERE</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">TRIGGER</span> tr_del_emp</span><br><span class="line">   BEFORE <span class="keyword">DELETE</span> <span class="comment">--指定触发时机为删除操作前触发</span></span><br><span class="line">   <span class="keyword">ON</span> scott.emp</span><br><span class="line">   <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span>   <span class="comment">--说明创建的是行级触发器</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="comment">--将修改前数据插入到日志记录表 del_emp ,以供监督使用。</span></span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp_his(deptno , empno, ename , job ,mgr , sal , comm , hiredate )</span><br><span class="line">       <span class="keyword">VALUES</span>( :old.deptno, :old.empno, :old.ename , :old.job,:old.mgr, :old.sal, :old.comm, :old.hiredate );</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="keyword">DELETE</span> emp <span class="keyword">WHERE</span> empno<span class="operator">=</span><span class="number">7788</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> emp_his;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> del_emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 限制对Departments表修改（包括INSERT,DELETE,UPDATE）的时间范围，</span></span><br><span class="line"><span class="comment">-- 即不允许在非工作时间修改departments表。 </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">TRIGGER</span> tr_dept_time</span><br><span class="line">BEFORE <span class="keyword">INSERT</span> <span class="keyword">OR</span> <span class="keyword">DELETE</span> <span class="keyword">OR</span> <span class="keyword">UPDATE</span></span><br><span class="line"><span class="keyword">ON</span> departments</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"> IF (TO_CHAR(sysdate,<span class="string">&#x27;DAY&#x27;</span>) <span class="keyword">IN</span> (<span class="string">&#x27;星期六&#x27;</span>, <span class="string">&#x27;星期日&#x27;</span>)) <span class="keyword">OR</span> (TO_CHAR(sysdate, <span class="string">&#x27;HH24:MI&#x27;</span>) </span><br><span class="line">     <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="string">&#x27;08:30&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;18:00&#x27;</span>) <span class="keyword">THEN</span></span><br><span class="line">     RAISE_APPLICATION_ERROR(<span class="number">-20001</span>, <span class="string">&#x27;不是上班时间，不能修改departments表&#x27;</span>);</span><br><span class="line"> <span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 限定只对部门号为80的记录进行行触发器操作。 </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">TRIGGER</span> tr_emp_sal_comm</span><br><span class="line">BEFORE <span class="keyword">UPDATE</span> <span class="keyword">OF</span> salary, commission_pct</span><br><span class="line">       <span class="keyword">OR</span> <span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">ON</span> HR.employees</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">WHEN</span> (old.department_id <span class="operator">=</span> <span class="number">80</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"> <span class="keyword">CASE</span></span><br><span class="line">     <span class="keyword">WHEN</span> UPDATING (<span class="string">&#x27;salary&#x27;</span>) <span class="keyword">THEN</span></span><br><span class="line">        IF :NEW.salary <span class="operator">&lt;</span> :old.salary <span class="keyword">THEN</span></span><br><span class="line"> </span><br><span class="line">           RAISE_APPLICATION_ERROR(<span class="number">-20001</span>, <span class="string">&#x27;部门80的人员的工资不能降&#x27;</span>);</span><br><span class="line">        <span class="keyword">END</span> IF;</span><br><span class="line">     <span class="keyword">WHEN</span> UPDATING (<span class="string">&#x27;commission_pct&#x27;</span>) <span class="keyword">THEN</span></span><br><span class="line"> </span><br><span class="line">        IF :NEW.commission_pct <span class="operator">&lt;</span> :old.commission_pct <span class="keyword">THEN</span></span><br><span class="line">           RAISE_APPLICATION_ERROR(<span class="number">-20002</span>, <span class="string">&#x27;部门80的人员的奖金不能降&#x27;</span>);</span><br><span class="line">        <span class="keyword">END</span> IF;</span><br><span class="line">     <span class="keyword">WHEN</span> DELETING <span class="keyword">THEN</span></span><br><span class="line">          RAISE_APPLICATION_ERROR(<span class="number">-20003</span>, <span class="string">&#x27;不能删除部门80的人员记录&#x27;</span>);</span><br><span class="line">     <span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 利用行触发器实现级联更新。在修改了主表regions中的region_id之后（AFTER），</span></span><br><span class="line"><span class="comment">-- 级联的、自动的更新子表countries表中原来在该地区的国家的region_id。 </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">TRIGGER</span> tr_reg_cou</span><br><span class="line">AFTER <span class="keyword">update</span> <span class="keyword">OF</span> region_id</span><br><span class="line"><span class="keyword">ON</span> regions</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"> DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;旧的region_id值是&#x27;</span><span class="operator">||</span>:old.region_id</span><br><span class="line">                  <span class="operator">||</span><span class="string">&#x27;、新的region_id值是&#x27;</span><span class="operator">||</span>:new.region_id);</span><br><span class="line"> <span class="keyword">UPDATE</span> countries <span class="keyword">SET</span> region_id <span class="operator">=</span> :new.region_id</span><br><span class="line"> <span class="keyword">WHERE</span> region_id <span class="operator">=</span> :old.region_id;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在触发器中调用过程。 </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">PROCEDURE</span> add_job_history</span><br><span class="line"> ( p_emp_id          job_history.employee_id<span class="operator">%</span>type</span><br><span class="line">   , p_start_date      job_history.start_date<span class="operator">%</span>type</span><br><span class="line">  , p_end_date        job_history.end_date<span class="operator">%</span>type</span><br><span class="line">   , p_job_id          job_history.job_id<span class="operator">%</span>type</span><br><span class="line">   , p_department_id   job_history.department_id<span class="operator">%</span>type</span><br><span class="line">   )</span><br><span class="line"><span class="keyword">IS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> job_history (employee_id, start_date, end_date,</span><br><span class="line">                           job_id, department_id)</span><br><span class="line">  <span class="keyword">VALUES</span>(p_emp_id, p_start_date, p_end_date, p_job_id, p_department_id);</span><br><span class="line"><span class="keyword">END</span> add_job_history;</span><br><span class="line"> </span><br><span class="line"><span class="comment">--创建触发器调用存储过程...</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">TRIGGER</span> update_job_history</span><br><span class="line"> AFTER <span class="keyword">UPDATE</span> <span class="keyword">OF</span> job_id, department_id <span class="keyword">ON</span> employees</span><br><span class="line"> <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"> add_job_history(:old.employee_id, :old.hire_date, sysdate,</span><br><span class="line">                  :old.job_id, :old.department_id);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="6-7-创建替代-INSTEAD-OF-触发器"><a href="#6-7-创建替代-INSTEAD-OF-触发器" class="headerlink" title="6.7 创建替代(INSTEAD OF)触发器"></a>6.7 创建替代(INSTEAD OF)触发器</h3><p>创建替代触发器的一般语法是:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">OR</span> REPLACE] <span class="keyword">TRIGGER</span> trigger_name</span><br><span class="line">INSTEAD <span class="keyword">OF</span></span><br><span class="line">&#123;<span class="keyword">INSERT</span> <span class="operator">|</span> <span class="keyword">DELETE</span> <span class="operator">|</span> <span class="keyword">UPDATE</span> [<span class="keyword">OF</span> <span class="keyword">column</span> [, <span class="keyword">column</span> …]]&#125;</span><br><span class="line">[<span class="keyword">OR</span> &#123;<span class="keyword">INSERT</span> <span class="operator">|</span> <span class="keyword">DELETE</span> <span class="operator">|</span> <span class="keyword">UPDATE</span> [<span class="keyword">OF</span> <span class="keyword">column</span> [, <span class="keyword">column</span> …]]&#125;...]</span><br><span class="line"><span class="keyword">ON</span> [schema.] view_name <span class="comment">--只能定义在视图上</span></span><br><span class="line">[<span class="keyword">REFERENCING</span> &#123;<span class="keyword">OLD</span> [<span class="keyword">AS</span>] <span class="keyword">old</span> <span class="operator">|</span> <span class="keyword">NEW</span> [<span class="keyword">AS</span>] <span class="keyword">new</span><span class="operator">|</span> PARENT <span class="keyword">as</span> parent&#125;]</span><br><span class="line">[<span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> ] <span class="comment">--因为INSTEAD OF触发器只能在行级上触发,所以没有必要指定</span></span><br><span class="line">[<span class="keyword">WHEN</span> <span class="keyword">condition</span>]</span><br><span class="line">PL<span class="operator">/</span>SQL_block <span class="operator">|</span> <span class="keyword">CALL</span> procedure_name;</span><br></pre></td></tr></table></figure>

<ul>
<li>INSTEAD OF 选项使ORACLE激活触发器，而不执行触发事件。只能对视图和对象视图建立INSTEAD OF触发器，而不能对表、模式和数据库建立INSTEAD OF 触发器。</li>
<li>FOR EACH ROW选项说明触发器为行触发器。行触发器和语句触发器的区别表现在：行触发器要求当一个DML语句操走影响数据库中的多行数据时，对于其中的每个数据行，只要它们符合触发约束条件，均激活一次触发器；而语句触发器将整个语句操作作为触发事件，当它符合约束条件时，激活一次触发器。当省略 FOR EACH ROW 选项时，BEFORE 和AFTER 触发器为语句触发器，而INSTEAD OF 触发器则为行触发器。</li>
<li>REFERENCING 子句说明相关名称，在行触发器的PL&#x2F;SQL块和 WHEN 子句中可以使用相关名称参照当前的新、旧列值，默认的相关名称分别为 OLD 和 NEW 。触发器的PL&#x2F;SQL块中应用相关名称时，必须在它们之前加冒号:，但在WHEN子句中则不能加冒号:</li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>PL/SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo文章排序和自定义排序</title>
    <url>/2023/11/14/hexo_post_order/</url>
    <content><![CDATA[<h4 id="按照创建时间或更新时间排序"><a href="#按照创建时间或更新时间排序" class="headerlink" title="按照创建时间或更新时间排序"></a>按照创建时间或更新时间排序</h4><p>此部分配置需要在_config.yml文件中配置index_generator项</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">9</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-updated</span> <span class="comment"># -:倒序 updated:更新时间 date:创建时间(默认)</span></span><br></pre></td></tr></table></figure>

<h4 id="自定义排序"><a href="#自定义排序" class="headerlink" title="自定义排序"></a>自定义排序</h4><p>通过index_generator查找文件时发现了 .&#x2F;node_modules&#x2F;hexo-generator-index&#x2F;lib&#x2F;generator.js 文件.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pagination = <span class="built_in">require</span>(<span class="string">&#x27;hexo-pagination&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span>(<span class="params">locals</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> config = <span class="variable language_">this</span>.<span class="property">config</span>;</span><br><span class="line">  <span class="keyword">const</span> posts = locals.<span class="property">posts</span>.<span class="title function_">sort</span>(config.<span class="property">index_generator</span>.<span class="property">order_by</span>);</span><br><span class="line"></span><br><span class="line">  posts.<span class="property">data</span>.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (b.<span class="property">sticky</span> || <span class="number">0</span>) - (a.<span class="property">sticky</span> || <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> paginationDir = config.<span class="property">pagination_dir</span> || <span class="string">&#x27;page&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> path = config.<span class="property">index_generator</span>.<span class="property">path</span> || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">pagination</span>(path, posts, &#123;</span><br><span class="line">    <span class="attr">perPage</span>: config.<span class="property">index_generator</span>.<span class="property">per_page</span>,</span><br><span class="line">    <span class="attr">layout</span>: [<span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;archive&#x27;</span>],</span><br><span class="line">    <span class="attr">format</span>: paginationDir + <span class="string">&#x27;/%d/&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">__index</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>其中sort的内容除了config.index_generator.order_by 上面配置的 -updated 外，还有一个是post.data.sticky<br>所以在文章头部中配置sticky的值，文章将会sticky大小来进行自定义的排序。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo文章排序和自定义排序</span><br><span class="line">tags: [Hexo, 主题]</span><br><span class="line"><span class="section">sticky: 100</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>主题</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/05/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<p><a href="https://www.imgbed.com/image/iMuo4"><img src="https://s1.imgbed.xyz/2023/03/21/iMuo4.png" alt="iMuo4.png"></a></p>
<!-- <div style="text-align: center" >
    <img src="https://i.imgur.com/Rwm7rzB.jpeg" width="50%" height="50%">
</div>  -->]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>主题</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统的用户管理常用命令</title>
    <url>/2023/05/09/linux-user-manegement/</url>
    <content><![CDATA[<h4 id="添加一个新的用户"><a href="#添加一个新的用户" class="headerlink" title="添加一个新的用户"></a>添加一个新的用户</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adduser qibao</span><br></pre></td></tr></table></figure>

<h4 id="给新的用户设置密码"><a href="#给新的用户设置密码" class="headerlink" title="给新的用户设置密码"></a>给新的用户设置密码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd qibao</span><br></pre></td></tr></table></figure>

<h4 id="切换到指定账户"><a href="#切换到指定账户" class="headerlink" title="切换到指定账户"></a>切换到指定账户</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su qibao</span><br></pre></td></tr></table></figure>

<h4 id="查看当前账户id信息"><a href="#查看当前账户id信息" class="headerlink" title="查看当前账户id信息"></a>查看当前账户id信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">whoami</span></span><br><span class="line"><span class="built_in">id</span> [<span class="built_in">id</span>] <span class="comment">#id qibao</span></span><br></pre></td></tr></table></figure>

<h4 id="查看账户id的用户组"><a href="#查看账户id的用户组" class="headerlink" title="查看账户id的用户组"></a>查看账户id的用户组</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">groups</span> [<span class="built_in">id</span>] <span class="comment">#id不填默认为当前用户的用户组</span></span><br></pre></td></tr></table></figure>

<h4 id="查看所有账户id和用户组"><a href="#查看所有账户id和用户组" class="headerlink" title="查看所有账户id和用户组"></a>查看所有账户id和用户组</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/passwd</span><br><span class="line"><span class="built_in">cat</span> /etc/group</span><br></pre></td></tr></table></figure>

<h4 id="赋予用户sudo权限"><a href="#赋予用户sudo权限" class="headerlink" title="赋予用户sudo权限"></a>赋予用户sudo权限</h4><p>修改&#x2F;etc&#x2F;sudoers 文件赋予新用户权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Allow qibao to run any commands anywhere</span></span><br><span class="line">qibao   ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure>

<p>或者赋予新用户所在的组权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Allows people in group qibao to run all commands</span></span><br><span class="line">%qibao  ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>User</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin对于常见的properties和yaml配置文件操作</title>
    <url>/2023/06/02/kotlin-file/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>为了配合MiraiBot机器人，对于一些本地持久化的数据读取，本来是想依照狼宝项目使用Redis来做整体的持久化的，但是又怕有服务器迁移之类的问题，所有就摆烂直接使用本地文件IO来做了。</p>
<h3 id="properties文件"><a href="#properties文件" class="headerlink" title="properties文件"></a>properties文件</h3><p>由于properties文件是纯键值对的关系，所有比较好处理。主要使用的也就是 java.util.Properties 类</p>
<h4 id="操作properties文件"><a href="#操作properties文件" class="headerlink" title="操作properties文件"></a>操作properties文件</h4><p>prop.load(it) 和 prop.getProperty(“groupId”)</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> file = File(<span class="string">&quot;src/main/resources/group.properties&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> prop = Properties()</span><br><span class="line"><span class="comment">//读取文件</span></span><br><span class="line">FileInputStream(file).use &#123; prop.load(it) &#125;</span><br><span class="line"><span class="comment">//添加/修改属性</span></span><br><span class="line">prop.setProperty(<span class="string">&quot;group.name&quot;</span>,<span class="string">&quot;abcd&quot;</span>)</span><br><span class="line"><span class="comment">//获取属性</span></span><br><span class="line">println(prop.getProperty(<span class="string">&quot;group.id&quot;</span>)?.toString())</span><br><span class="line"><span class="comment">//修改属性</span></span><br><span class="line">prop.replace(<span class="string">&quot;group.id&quot;</span>,<span class="string">&quot;85234298761&quot;</span>)</span><br><span class="line"><span class="comment">//删除属性</span></span><br><span class="line">prop.remove(<span class="string">&quot;group.name&quot;</span>)</span><br><span class="line"><span class="comment">//保存</span></span><br><span class="line">FileOutputStream(file).use &#123; prop.store(it, <span class="string">&quot;some comment&quot;</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印所有属性</span></span><br><span class="line">prop.stringPropertyNames()</span><br><span class="line">    .associateWith &#123; prop.getProperty(it) &#125;</span><br><span class="line">    .forEach &#123; println(it) &#125;</span><br></pre></td></tr></table></figure>

<h3 id="yaml文件"><a href="#yaml文件" class="headerlink" title="yaml文件"></a>yaml文件</h3><p>yaml文件能使用到主要分为两种情况，一种也是纯粹的键值对，另一种就是含有list的数据。</p>
<p>使用的是snakeyaml:2.0库来处理yaml文件</p>
<h4 id="键值对"><a href="#键值对" class="headerlink" title="键值对"></a>键值对</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> file2 = File(<span class="string">&quot;src/main/resources/test1.yml&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> yaml = Yaml()</span><br><span class="line">FileInputStream(file2).use &#123;</span><br><span class="line">    <span class="keyword">val</span> map = yaml.load(it) <span class="keyword">as</span> Map&lt;String, Any&gt;</span><br><span class="line">    println(map[<span class="string">&quot;groupId&quot;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>test1.yml文件内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">groupId:</span> <span class="number">9037486</span></span><br></pre></td></tr></table></figure>

<h4 id="含list"><a href="#含list" class="headerlink" title="含list"></a>含list</h4><p>当groupId存在多个的时候，通常在写yaml配置的时候回用 - 来表示多各相同的数据</p>
<p>group.yml文件内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">groupName:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="number">1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">momo</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">混吃等死</span></span><br><span class="line"><span class="attr">groupId:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="number">18860951634</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">25161460112</span></span><br></pre></td></tr></table></figure>

<p>这种情况就要用List来其中的内容了。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> file2 = File(<span class="string">&quot;src/main/resources/group.yml&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> yaml = Yaml()</span><br><span class="line">FileInputStream(file2).use &#123;</span><br><span class="line">    <span class="keyword">val</span> map = yaml.load(it) <span class="keyword">as</span> Map&lt;String, List&lt;Any&gt;&gt;</span><br><span class="line">    <span class="keyword">val</span> listGroupName = map[<span class="string">&quot;groupName&quot;</span>]</span><br><span class="line">    listGroupName?.forEach &#123; println(it) &#125;</span><br><span class="line">    <span class="keyword">val</span> listGroupId = map[<span class="string">&quot;groupId&quot;</span>] <span class="keyword">as</span> List&lt;<span class="built_in">Long</span>&gt;</span><br><span class="line">    listGroupId?.forEach&#123;</span><br><span class="line">        <span class="keyword">if</span> (it == <span class="number">25161460112L</span>) println(<span class="string">&quot;存在群号<span class="variable">$it</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="进阶：读取yaml文件到Java类"><a href="#进阶：读取yaml文件到Java类" class="headerlink" title="进阶：读取yaml文件到Java类"></a>进阶：读取yaml文件到Java类</h4><p>这一部分搞了好久，java中的使用和kotlin还是有较大的区别，由于学艺不精，导致花费的不少时间，依然存在部分问题。</p>
<p>java类，对，真的就成功解析到了java的类里面，原打算是使用Kotlin的Data类做数据的接收，结果一直出错，换成java类便能成功。简直离谱，还得花上不少的时间来看看两者的区别了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不写get和set方法会报错</span></span><br><span class="line">    <span class="comment">//没有测试Lombok注解</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGroupName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> groupName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGroupName</span><span class="params">(String groupName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.groupName = groupName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getGroupID</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> groupID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGroupID</span><span class="params">(Long groupID)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.groupID = groupID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRegisterDate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> registerDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRegisterDate</span><span class="params">(String registerDate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.registerDate = registerDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Long&gt; <span class="title function_">getMemberInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> memberInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMemberInfo</span><span class="params">(List&lt;Long&gt; memberInfo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.memberInfo = memberInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;UserInfo1&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;groupName=&#x27;&quot;</span> + groupName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, groupID=&quot;</span> + groupID +</span><br><span class="line">                <span class="string">&quot;, registerDate=&#x27;&quot;</span> + registerDate + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, memberInfo=&quot;</span> + memberInfo +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String groupName;</span><br><span class="line">    <span class="keyword">private</span> Long groupID;</span><br><span class="line">    <span class="keyword">private</span> String registerDate;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Long&gt; memberInfo;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>yaml文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">groupName:</span> <span class="string">abd</span></span><br><span class="line"><span class="attr">groupID:</span> <span class="number">12351</span></span><br><span class="line"><span class="attr">registerDate:</span> <span class="number">20230529</span></span><br><span class="line"><span class="attr">memberInfo:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">9823476</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">9812360</span></span><br></pre></td></tr></table></figure>

<p>Java版测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testFun</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Constructor</span>(UserInfo1.class,<span class="keyword">new</span> <span class="title class_">LoaderOptions</span>());</span><br><span class="line">    <span class="type">Yaml</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>(constructor);</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/main/resources/test.yml&quot;</span>);</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">    <span class="type">UserInfo1</span> <span class="variable">userInfo1</span> <span class="operator">=</span> yaml.load(fileInputStream);</span><br><span class="line">    System.out.println(userInfo1.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>kotlin版测试代码</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> file3 = File(<span class="string">&quot;src/main/resources/test.yml&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> cons = Constructor(UserInfo1::<span class="keyword">class</span>.java, LoaderOptions())</span><br><span class="line">        <span class="keyword">val</span> yaml = Yaml(cons)</span><br><span class="line">        FileInputStream(file3).use &#123; it -&gt;</span><br><span class="line">            <span class="keyword">val</span> all  = yaml.load(it) <span class="keyword">as</span> UserInfo1</span><br><span class="line">            println(all.toString())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="淦哦"><a href="#淦哦" class="headerlink" title="淦哦"></a>淦哦</h3><p>搞到最后还是选用的数据库的方案来持久化一些基本信息，用配置文件写感觉太傻逼了，为了避免像前项目一样，网络问题导致数据库访问效率很低的问题，这次就选用了SQLite数据库。</p>
<p>还有一句Kotlin的实体类似乎是使用 interface 来继承Entity&lt;&gt;类的。后续的数据库开发的文章会写到mirai的下一片里面了。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>配置文件</tag>
      </tags>
  </entry>
  <entry>
    <title>基于MiraiBot的简单开发（权限管理）</title>
    <url>/2023/06/05/miraibot04/</url>
    <content><![CDATA[<h3 id="MiraiBot-简介"><a href="#MiraiBot-简介" class="headerlink" title="MiraiBot 简介"></a>MiraiBot 简介</h3><p>不写了</p>
<h3 id="功能构想"><a href="#功能构想" class="headerlink" title="功能构想"></a>功能构想</h3><p>最初简单的构想只是用来管理bot会响应那些群的消息，响应那些群员的消息，然后在赋予群内bot管理员，来管理那些群员可以被禁止和bot交互。</p>
<p>这部分并没有设计成 指令的管理，比如开启&#x2F;关闭某个指令。根本原因是我没有想好怎么实现方便一些。</p>
<h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><p>群在注册的时候获取到群的各项信息并保存起来，同时给出一个属性<code>open</code>来判断bot是否响应群内消息&#x2F;事件。</p>
<p>为了方便数据入库，使用的Kotlin ORM 框架是 <code>Ktorm</code> <a href="https://www.ktorm.org/zh-cn/">使用说明</a> <a href="https://github.com/kotlin-orm/ktorm">仓库链接</a></p>
<h4 id="QQ群实体的设计"><a href="#QQ群实体的设计" class="headerlink" title="QQ群实体的设计"></a>QQ群实体的设计</h4><p>字段： name(群名),number(群号码),open(bot是否响应),registryTime(注册时间)</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//top.kagerou.data.Group.kt</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Group</span> : <span class="type">Entity</span>&lt;<span class="type">Group</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> : Entity.Factory&lt;Group&gt;()</span><br><span class="line">    <span class="keyword">val</span> number: <span class="built_in">Long</span></span><br><span class="line">    <span class="keyword">val</span> name: String</span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">open</span>: String</span><br><span class="line">    <span class="keyword">val</span> registryTime :String</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="QQ群表对象的实现"><a href="#QQ群表对象的实现" class="headerlink" title="QQ群表对象的实现"></a>QQ群表对象的实现</h4><p>在表对象中，将数据库的表名和表字段名和程序设计的类中的各字段名一一绑定起来。下面代码中<code>引号</code>中的内容为数据库对应名称</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//top.kagerou.data.Groups.kt</span></span><br><span class="line"><span class="keyword">object</span> Groups : Table&lt;Group&gt;(<span class="string">&quot;t_group&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">val</span> number = long(<span class="string">&quot;group_number&quot;</span>).bindTo &#123; it.number &#125;</span><br><span class="line">    <span class="keyword">val</span> name = varchar(<span class="string">&quot;name&quot;</span>).bindTo &#123; it.name &#125;</span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">open</span> = varchar(<span class="string">&quot;is_open&quot;</span>).bindTo &#123; it.<span class="keyword">open</span> &#125;</span><br><span class="line">    <span class="keyword">val</span> registryTime = varchar(<span class="string">&quot;registry_time&quot;</span>).bindTo &#123; it.registryTime &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="QQ群数据表的创建"><a href="#QQ群数据表的创建" class="headerlink" title="QQ群数据表的创建"></a>QQ群数据表的创建</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_group</span><br><span class="line">(</span><br><span class="line">group_number <span class="type">NUMERIC</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">is_open <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">registry_time <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line"><span class="keyword">primary</span> key(group_number)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="QQ群数据操作对象的实现"><a href="#QQ群数据操作对象的实现" class="headerlink" title="QQ群数据操作对象的实现"></a>QQ群数据操作对象的实现</h4><p>根据业务简单的实现了部分方法,后续有新的群信息获取的地方可以再此继续添加对应逻辑。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">object</span> GroupService &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化配置信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> database = Database.connect(<span class="string">&quot;jdbc:sqlite:src/test/resources/Chinook.db&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">save</span><span class="params">(name:<span class="type">String</span>,number: <span class="type">Long</span>)</span></span>&#123;</span><br><span class="line">        database.insert(Groups)&#123;</span><br><span class="line">            <span class="keyword">set</span>(it.number,number)</span><br><span class="line">            <span class="keyword">set</span>(it.name,name)</span><br><span class="line">            <span class="keyword">set</span>(it.<span class="keyword">open</span>,<span class="string">&quot;open&quot;</span>)</span><br><span class="line">            <span class="keyword">set</span>(it.registryTime, LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyyMMdd&quot;</span>)))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">open</span><span class="params">(number: <span class="type">Long</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.change(number,<span class="string">&quot;open&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">close</span><span class="params">(number: <span class="type">Long</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.change(number,<span class="string">&quot;close&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">change</span><span class="params">(number: <span class="type">Long</span>, <span class="keyword">open</span>:<span class="type">String</span>)</span></span>&#123;</span><br><span class="line">        database.update(Groups)&#123;</span><br><span class="line">            <span class="keyword">set</span>(it.<span class="keyword">open</span>,<span class="keyword">open</span>)</span><br><span class="line">            <span class="keyword">where</span> &#123; it.number eq number &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">exist</span><span class="params">(number: <span class="type">Long</span>)</span></span>:<span class="built_in">Boolean</span>&#123;</span><br><span class="line">        <span class="keyword">val</span> groupNumber = database</span><br><span class="line">            .from(Groups)</span><br><span class="line">            .select(Groups.number)</span><br><span class="line">            .<span class="keyword">where</span>((Groups.number eq number) and (Groups.<span class="keyword">open</span> eq <span class="string">&quot;open&quot;</span>))</span><br><span class="line">            .map &#123; row -&gt; Groups.createEntity(row) &#125;</span><br><span class="line">        <span class="keyword">return</span> groupNumber.isNotEmpty()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="在自定义监听类中添加if判断"><a href="#在自定义监听类中添加if判断" class="headerlink" title="在自定义监听类中添加if判断"></a>在自定义监听类中添加if判断</h4><p>添加了if增加判断群是否已经注册了bot并且状态为open，bot才会对应响应对应的指令功能。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EventHandler</span></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> GroupMessageEvent.<span class="title">NormalMessage</span><span class="params">()</span></span>: ListeningStatus&#123;</span><br><span class="line">    <span class="keyword">val</span> msg = message.contentToString()</span><br><span class="line">    <span class="comment">//相比较，添加了if增加判断群是否已经注册了bot并且状态为open，bot才会对应响应对应的指令功能。</span></span><br><span class="line">    <span class="keyword">if</span> ( GroupService.exist(group.id)) &#123;</span><br><span class="line">        <span class="keyword">when</span>&#123;</span><br><span class="line">            msg == <span class="string">&quot;狼宝菜单&quot;</span> -&gt;&#123;</span><br><span class="line">                <span class="keyword">val</span> menuMessages = <span class="string">&quot;狼宝是一个个人开发的QQ机器人，当前版本0.1.5 \n当前功能：\n \t1.自定义消息：有人发[文本]你回[文本/图片] \n \t2.chatGpt: #chat[内容] \n \t3.漂流瓶：扔漂流瓶[内容]/捡漂流瓶 \n \t4.二次元图片：来张[关键词]涩图 \n狼宝使用过程中可能会收集部分信息，包含丘丘号码，昵称等，同时请勿利用狼宝发布平台违禁内容。\n如果你同意以上规范，可以输入[你好，狼宝！]来狼宝认识你。&quot;</span></span><br><span class="line">                <span class="keyword">this</span>.group.sendMessage(menuMessages)</span><br><span class="line">            &#125;</span><br><span class="line">            msg == <span class="string">&quot;你好，狼宝！&quot;</span> -&gt;&#123;</span><br><span class="line">                <span class="comment">//todo 个人群成员注册</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ListeningStatus.LISTENING</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>QQ群的权限管理比简单和单一，之后不出意外还会有对QQ群员的更细致的一个权限管理体系的设计和开发，因为重来没有对用户系统的设计和开发经验，这一块真的脑壳疼😣</p>
<p>下一章应该是实用的一些Bot功能的实现了。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>MiraiBot</tag>
      </tags>
  </entry>
  <entry>
    <title>基于MiraiBot的简单开发(消息类型)</title>
    <url>/2023/05/16/miraibot02/</url>
    <content><![CDATA[<h3 id="MiraiBot简介"><a href="#MiraiBot简介" class="headerlink" title="MiraiBot简介"></a>MiraiBot简介</h3><div align="center">
   <img width="160" src="https://resources.kagerou.top/img/blog/mirai.png" alt="logo"></br>

   <img width="95" src="https://resources.kagerou.top/img/blog/mirai.svg" alt="title">

<p><img src="https://badges.gitter.im/mamoe/mirai.svg" alt="Gitter"><img src="https://img.shields.io/badge/post-on%20MiraiForum-yellow" alt="MiraiForum"></p>
<p><a href = "https://github.com/mamoe/mirai">mirai</a> 是一个在全平台下运行，提供 QQ Android 协议支持的高效率机器人库</p>
<p>这个项目的名字来源于<br>     <p><a href = "http://www.kyotoanimation.co.jp/">京都动画</a>作品<a href = "https://zh.moegirl.org.cn/zh-hans/%E5%A2%83%E7%95%8C%E7%9A%84%E5%BD%BC%E6%96%B9">《境界的彼方》</a>的<a href = "https://zh.moegirl.org.cn/zh-hans/%E6%A0%97%E5%B1%B1%E6%9C%AA%E6%9D%A5">栗山未来(Kuriyama <b>mirai</b>)</a></p><br>     <p><a href = "https://www.crypton.co.jp/">CRYPTON</a>以<a href = "https://www.crypton.co.jp/miku_eng">初音未来</a>为代表的创作与活动<a href = "https://magicalmirai.com/2019/index_en.html">(Magical <b>mirai</b>)</a></p><br>图标以及形象由画师<a href = "https://github.com/DazeCake">DazeCake</a>绘制</p>
</div>

<h3 id="Mairi-消息类型"><a href="#Mairi-消息类型" class="headerlink" title="Mairi 消息类型"></a>Mairi 消息类型</h3><p>各类型消息元素及其 contentToString() 如下表格所示。</p>
<table>
<thead>
<tr>
<th align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/SingleMessage.kt">MessageContent</a> 类型</th>
<th align="left">解释</th>
<th align="left">contentToString()</th>
<th align="center">最低支持的版本</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/PlainText.kt">PlainText</a></td>
<td align="left">纯文本</td>
<td align="left"><code>$content</code></td>
<td align="center">2.0</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/Image.kt">Image</a></td>
<td align="left">自定义图片</td>
<td align="left"><code>[图片]</code></td>
<td align="center">2.0</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/At.kt">At</a></td>
<td align="left">提及某人</td>
<td align="left"><code>@$target</code></td>
<td align="center">2.0</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/AtAll.kt">AtAll</a></td>
<td align="left">提及全体成员</td>
<td align="left"><code>@全体成员</code></td>
<td align="center">2.0</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/Face.kt">Face</a></td>
<td align="left">原生表情</td>
<td align="left"><code>[表情对应的中文名]</code></td>
<td align="center">2.0</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/FlashImage.kt">FlashImage</a></td>
<td align="left">闪照</td>
<td align="left"><code>[闪照]</code></td>
<td align="center">2.0</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/PokeMessage.kt">PokeMessage</a></td>
<td align="left">戳一戳消息（消息非动作）</td>
<td align="left"><code>[戳一戳]</code></td>
<td align="center">2.0</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/VipFace.kt">VipFace</a></td>
<td align="left">VIP 表情</td>
<td align="left"><code>[$&#123;kind.name&#125;]x$count</code></td>
<td align="center">2.0</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/RichMessage.kt">LightApp</a></td>
<td align="left">小程序</td>
<td align="left"><code>$content</code></td>
<td align="center">2.0</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/Voice.kt">Voice</a></td>
<td align="left">语音（已弃用）</td>
<td align="left"><code>[语音消息]</code></td>
<td align="center">2.0  <em><sup>(3)</sup></em></td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/MarketFace.kt">MarketFace</a></td>
<td align="left">商城表情</td>
<td align="left"><code>[表情对应的中文名]</code></td>
<td align="center">2.0</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/ForwardMessage.kt">ForwardMessage</a></td>
<td align="left">合并转发</td>
<td align="left"><code>[转发消息]</code></td>
<td align="center">2.0  <em><sup>(1)</sup></em></td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/RichMessage.kt">SimpleServiceMessage</a></td>
<td align="left">（不稳定）服务消息</td>
<td align="left"><code>$content</code></td>
<td align="center">2.0</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/MusicShare.kt">MusicShare</a></td>
<td align="left">音乐分享</td>
<td align="left"><code>[分享]曲名</code></td>
<td align="center">2.1</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/Dice.kt">Dice</a></td>
<td align="left">魔法表情骰子</td>
<td align="left"><code>[骰子:$value]</code></td>
<td align="center">2.5</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/RockPaperScissors.kt">RockPaperScissors</a></td>
<td align="left">魔法表情猜拳</td>
<td align="left"><code>[石头]</code>&#x2F;<code>[剪刀]</code>&#x2F;<code>[布]</code></td>
<td align="center">2.14</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/FileMessage.kt">FileMessage</a></td>
<td align="left">文件消息</td>
<td align="left"><code>[文件]文件名称</code></td>
<td align="center">2.5</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/Audio.kt">Audio</a></td>
<td align="left">语音</td>
<td align="left"><code>[语音消息]</code></td>
<td align="center">2.7</td>
</tr>
</tbody></table>
<h4 id="PlainText示例"><a href="#PlainText示例" class="headerlink" title="PlainText示例"></a>PlainText示例</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基础监听消息示例 subscribeGroupMessages 监听群消息</span></span><br><span class="line">    bot.eventChannel.subscribeGroupMessages &#123;</span><br><span class="line">        <span class="string">&quot;-test1&quot;</span> &#123;</span><br><span class="line">            <span class="keyword">val</span> newMessages = <span class="string">&quot;这是一个实列的文本消息，支持\n \t 来进行文字排版，空格在这里 \t 似乎不太好用&quot;</span></span><br><span class="line">            subject.sendMessage(newMessages)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// mirai的sendMessage方法可以直接放入一个String的字符串来进行文本发送如上，也可以使用 PlainText(&quot;Hello!&quot;)来构建一个 MessageContent</span></span><br><span class="line">        <span class="string">&quot;文本信息&quot;</span> &#123;</span><br><span class="line">            subject.sendMessage(PlainText(<span class="string">&quot;Hello!&quot;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="Image示例"><a href="#Image示例" class="headerlink" title="Image示例"></a>Image示例</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基础监听消息示例 subscribeGroupMessages 监听群消息</span></span><br><span class="line">    bot.eventChannel.subscribeGroupMessages &#123;</span><br><span class="line">        <span class="comment">// 发送图片 有两种方式</span></span><br><span class="line">        <span class="comment">// 1.使用图片的MiraiCode;MiraiCode的获取可以从Bot的消息日志中，查看到图片消息的原始消息，其中包含图片的MiraiCode</span></span><br><span class="line">        <span class="string">&quot;Image1&quot;</span> &#123;</span><br><span class="line">            subject.sendMessage(Image.fromId(<span class="string">&quot;&#123;E9A7782B-9F53-5F4A-9E41-FA53AA122707&#125;.gif&quot;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.本地上传并发送图片</span></span><br><span class="line">        <span class="string">&quot;Image2&quot;</span> &#123;</span><br><span class="line">            <span class="keyword">val</span> imageFile = File(<span class="string">&quot;src/main/resources/mirai.png&quot;</span>)</span><br><span class="line">            subject.sendImage(imageFile)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="AT示例"><a href="#AT示例" class="headerlink" title="AT示例"></a>AT示例</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基础监听消息示例 subscribeGroupMessages 监听群消息</span></span><br><span class="line">    bot.eventChannel.subscribeGroupMessages &#123;</span><br><span class="line">        <span class="string">&quot;At&quot;</span>&#123;</span><br><span class="line">            <span class="comment">//这是AT@所有人,遵循QQ规则，每天只能10次</span></span><br><span class="line">            subject.sendMessage(AtAll + <span class="string">&quot;起床啦！&quot;</span>)</span><br><span class="line">            <span class="comment">//AT@一个指定的QQ号</span></span><br><span class="line">            subject.sendMessage(At(<span class="number">98347293478L</span>) + <span class="string">&quot;睡觉啦！&quot;</span>)</span><br><span class="line">            <span class="comment">//AT@发送指令的人</span></span><br><span class="line">            subject.sendMessage(At(sender.id) + <span class="string">&quot;是你在召唤我？！&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="Face示例"><a href="#Face示例" class="headerlink" title="Face示例"></a>Face示例</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基础监听消息示例 subscribeGroupMessages 监听群消息</span></span><br><span class="line">    bot.eventChannel.subscribeGroupMessages &#123;</span><br><span class="line">        <span class="comment">// 表情ID:5是流泪的意思，更多ID对应的表情可以点进Face查看源码</span></span><br><span class="line">        <span class="string">&quot;表情&quot;</span>&#123;</span><br><span class="line">            subject.sendMessage(Face(<span class="number">5</span>) + <span class="string">&quot;哭哭&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="FlashImage示例"><a href="#FlashImage示例" class="headerlink" title="FlashImage示例"></a>FlashImage示例</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基础监听消息示例 subscribeGroupMessages 监听群消息</span></span><br><span class="line">    bot.eventChannel.subscribeGroupMessages &#123;</span><br><span class="line">         <span class="comment">// 发送闪照和发送图片一样的</span></span><br><span class="line">        <span class="string">&quot;闪照&quot;</span>&#123;</span><br><span class="line">            <span class="comment">//subject.sendMessage(FlashImage(Image.fromId(&quot;&#123;E9A7782B-9F53-5F4A-9E41-FA53AA122707&#125;.gif&quot;)))</span></span><br><span class="line">            <span class="keyword">val</span> imageFile = File(<span class="string">&quot;src/main/resources/mirai.png&quot;</span>)</span><br><span class="line">            <span class="keyword">val</span> uploadImage = subject.uploadImage(imageFile.toExternalResource())</span><br><span class="line">            subject.sendMessage(FlashImage(uploadImage))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="PokeMessage示例"><a href="#PokeMessage示例" class="headerlink" title="PokeMessage示例"></a>PokeMessage示例</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基础监听消息示例 subscribeGroupMessages 监听群消息</span></span><br><span class="line">    bot.eventChannel.subscribeGroupMessages &#123;</span><br><span class="line">        <span class="comment">//似乎没什么用，有一个拍了拍的事件</span></span><br><span class="line">        <span class="string">&quot;戳一戳&quot;</span>&#123;</span><br><span class="line">            subject.sendMessage(PokeMessage(<span class="string">&quot;比心&quot;</span>,<span class="number">2</span>,-<span class="number">1</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="LightApp示例"><a href="#LightApp示例" class="headerlink" title="LightApp示例"></a>LightApp示例</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基础监听消息示例 subscribeGroupMessages 监听群消息</span></span><br><span class="line">    bot.eventChannel.subscribeGroupMessages &#123;</span><br><span class="line">        <span class="comment">//LightApp 目前只会天气应用这一种。</span></span><br><span class="line">        <span class="string">&quot;小程序&quot;</span>&#123;</span><br><span class="line">            <span class="keyword">val</span> json = <span class="string">&quot;&#123;\&quot;app\&quot;:\&quot;com.tencent.weather\&quot;,\&quot;desc\&quot;:\&quot;天气\&quot;,\&quot;view\&quot;:\&quot;RichInfoView\&quot;,\&quot;ver\&quot;:\&quot;0.0.0.1\&quot;,\&quot;prompt\&quot;:\&quot;[应用]天气\&quot;,\&quot;meta\&quot;:&#123;\&quot;richinfo\&quot;:&#123;\&quot;adcode\&quot;:\&quot;\&quot;,\&quot;air\&quot;:\&quot;151\&quot;,\&quot;city\&quot;:\&quot;成都 \&quot;,\&quot;date\&quot;:\&quot; 2023-05-12 \&quot;,\&quot;max\&quot;:\&quot;26\&quot;,\&quot;min\&quot;:\&quot;18\&quot;,\&quot;ts\&quot;:\&quot;15158613\&quot;,\&quot;type\&quot;:\&quot;201\&quot;,\&quot;wind\&quot;:\&quot;\&quot;&#125;&#125;&#125;&quot;</span></span><br><span class="line">            subject.sendMessage(LightApp(json))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="MusicShare示例"><a href="#MusicShare示例" class="headerlink" title="MusicShare示例"></a>MusicShare示例</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基础监听消息示例 subscribeGroupMessages 监听群消息</span></span><br><span class="line">    bot.eventChannel.subscribeGroupMessages &#123;</span><br><span class="line">        <span class="string">&quot;点歌514&quot;</span>&#123;</span><br><span class="line">                <span class="keyword">val</span> musicShare = MusicShare(</span><br><span class="line">                    kind = MusicKind.NeteaseCloudMusic,</span><br><span class="line">                    title = <span class="string">&quot;514&quot;</span>,</span><br><span class="line">                    summary = <span class="string">&quot;Maritumix&quot;</span>,</span><br><span class="line">                    brief = <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    jumpUrl = <span class="string">&quot;http://music.163.com/song/72709841&quot;</span>,</span><br><span class="line">                    pictureUrl = <span class="string">&quot;https://p1.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg&quot;</span>,</span><br><span class="line">                    musicUrl = <span class="string">&quot;http://music.163.com/song/media/outer/url?id=72709841&quot;</span></span><br><span class="line">                )</span><br><span class="line">                subject.sendMessage(musicShare)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="Audio示例"><a href="#Audio示例" class="headerlink" title="Audio示例"></a>Audio示例</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基础监听消息示例 subscribeGroupMessages 监听群消息</span></span><br><span class="line">    bot.eventChannel.subscribeGroupMessages &#123;</span><br><span class="line">        <span class="string">&quot;语音&quot;</span>&#123;</span><br><span class="line">            <span class="keyword">val</span> audioFile = File(<span class="string">&quot;src/main/resources/mirai.amr&quot;</span>)</span><br><span class="line">            <span class="keyword">val</span> audio = group.uploadAudio(audioFile.toExternalResource())</span><br><span class="line">            subject.sendMessage(audio)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>MiraiBot</tag>
      </tags>
  </entry>
  <entry>
    <title>基于MiraiBot的简单开发(基础配置)</title>
    <url>/2023/05/11/miraibot01/</url>
    <content><![CDATA[<h3 id="MiraiBot简介"><a href="#MiraiBot简介" class="headerlink" title="MiraiBot简介"></a>MiraiBot简介</h3><div align="center">
   <img width="160" src="https://resources.kagerou.top/img/blog/mirai.png" alt="logo"></br>

   <img width="95" src="https://resources.kagerou.top/img/blog/mirai.svg" alt="title">

<p><img src="https://badges.gitter.im/mamoe/mirai.svg" alt="Gitter"><img src="https://img.shields.io/badge/post-on%20MiraiForum-yellow" alt="MiraiForum"></p>
<p><a href = "https://github.com/mamoe/mirai">mirai</a> 是一个在全平台下运行，提供 QQ Android 协议支持的高效率机器人库</p>
<p>这个项目的名字来源于<br>     <p><a href = "http://www.kyotoanimation.co.jp/">京都动画</a>作品<a href = "https://zh.moegirl.org.cn/zh-hans/%E5%A2%83%E7%95%8C%E7%9A%84%E5%BD%BC%E6%96%B9">《境界的彼方》</a>的<a href = "https://zh.moegirl.org.cn/zh-hans/%E6%A0%97%E5%B1%B1%E6%9C%AA%E6%9D%A5">栗山未来(Kuriyama <b>mirai</b>)</a></p><br>     <p><a href = "https://www.crypton.co.jp/">CRYPTON</a>以<a href = "https://www.crypton.co.jp/miku_eng">初音未来</a>为代表的创作与活动<a href = "https://magicalmirai.com/2019/index_en.html">(Magical <b>mirai</b>)</a></p><br>图标以及形象由画师<a href = "https://github.com/DazeCake">DazeCake</a>绘制</p>
</div>

<h3 id="Mairi项目"><a href="#Mairi项目" class="headerlink" title="Mairi项目"></a>Mairi项目</h3><h4 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h4><p>使用IEDA创建一个新的gradl项目</p>
<p><img src="https://resources.kagerou.top/img/blog/newGradle.webp" alt="gralde"></p>
<p>请修改<font color=red>红色</font>标签处的信息</p>
<p>项目目录如下图</p>
<p><img src="https://resources.kagerou.top/img/blog/gradleTree.webp" alt="gradleTree"></p>
<h4 id="build-gradle-kts配置"><a href="#build-gradle-kts配置" class="headerlink" title="build.gradle.kts配置"></a>build.gradle.kts配置</h4><p>主要引进mirai-core-jvm库和增加仓库地址<a href="https://jitpack.io/">https://jitpack.io</a></p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.jetbrains.kotlin.gradle.tasks.KotlinCompile</span><br><span class="line"></span><br><span class="line">plugins &#123;</span><br><span class="line">    kotlin(<span class="string">&quot;jvm&quot;</span>) version <span class="string">&quot;1.8.21&quot;</span></span><br><span class="line">    application</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">group</span> = <span class="string">&quot;top.kagerou&quot;</span></span><br><span class="line">version = <span class="string">&quot;1.0-dev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">    maven &#123; url = uri(<span class="string">&quot;https://jitpack.io&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    testImplementation(kotlin(<span class="string">&quot;test&quot;</span>))</span><br><span class="line">    <span class="comment">// https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp</span></span><br><span class="line">    implementation(<span class="string">&quot;com.squareup.okhttp3:okhttp:4.11.0&quot;</span>)</span><br><span class="line">    <span class="comment">// https://mvnrepository.com/artifact/net.mamoe/mirai-core-jvm</span></span><br><span class="line">    implementation(<span class="string">&quot;net.mamoe:mirai-core-jvm:2.15.0-M1&quot;</span>)</span><br><span class="line">    <span class="comment">// https://mvnrepository.com/artifact/com.alibaba.fastjson2/fastjson2</span></span><br><span class="line">    implementation(<span class="string">&quot;com.alibaba.fastjson2:fastjson2:2.0.31&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasks.test &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasks.withType&lt;KotlinCompile&gt; &#123;</span><br><span class="line">    kotlinOptions.jvmTarget = <span class="string">&quot;19&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">application &#123;</span><br><span class="line">    mainClass.set(<span class="string">&quot;MainKt&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="StratBot文件代码"><a href="#StratBot文件代码" class="headerlink" title="StratBot文件代码"></a>StratBot文件代码</h4><p>在main文件夹下创建一个启动文件StratBot.kt 代码如下</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.kagerou</span><br><span class="line"><span class="comment">//省略import 信息</span></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//设置qq号码</span></span><br><span class="line">    <span class="keyword">val</span> qqNumber: <span class="built_in">Long</span> = <span class="number">9548751264L</span></span><br><span class="line">    <span class="comment">//创建Bot登录实例 使用的是2.15.0-M1的扫码登录，密码登录的滑动验证总是有点问题。</span></span><br><span class="line">    <span class="keyword">val</span> bot = BotFactory.newBot(qqNumber, BotAuthorization.byQRCode())&#123;</span><br><span class="line">        fileBasedDeviceInfo(<span class="string">&quot;device.json&quot;</span>)</span><br><span class="line">        loginSolver = LoginSolver.Default</span><br><span class="line">        protocol = BotConfiguration.MiraiProtocol.ANDROID_WATCH</span><br><span class="line">    &#125;</span><br><span class="line">    bot.login()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//基础监听消息示例 subscribeGroupMessages 监听群消息</span></span><br><span class="line">    bot.eventChannel.subscribeGroupMessages &#123;</span><br><span class="line">        <span class="string">&quot;-test1&quot;</span> &#123;</span><br><span class="line">            subject.sendMessage(<span class="string">&quot;这是一个示例的文本消息&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bot.join()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动main函数，bot登录时会在控制台请求扫描二维码，用手机QQ在同一网络下扫描二维码即可登录成功。</p>
<h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><p>在任意bot所在的群里发送 “-test1” 指令，bot即回复 “这是一个示例的文本消息” 信息。</p>
<p><img src="https://resources.kagerou.top/img/blog/test1.webp" alt="test1"></p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>由于使用的时OpenJDK19在于IDEA默认的Gradle版本可能会发生冲突，最好的方案是使用较低的OpenJDK版本，比如15。</p>
<p>或者自定义Gradle版本为gradle-8.1.1。 </p>
<p>首先删除项目文件夹下 .gradle&#x2F;里面的所有内容。</p>
<p>然后修改项目文件夹下 gradle&#x2F;wrapper&#x2F;gradle-wrapper.properties 文件中 distributionUrl&#x3D;https:&#x2F;&#x2F;services.gradle.org&#x2F;distributions&#x2F;gradle-8.1.1-bin.zip</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">distributionBase</span>=<span class="string">GRADLE_USER_HOME</span></span><br><span class="line"><span class="attr">distributionPath</span>=<span class="string">wrapper/dists</span></span><br><span class="line"><span class="attr">distributionUrl</span>=<span class="string">https\://services.gradle.org/distributions/gradle-8.1.1-bin.zip</span></span><br><span class="line"><span class="attr">zipStoreBase</span>=<span class="string">GRADLE_USER_HOME</span></span><br><span class="line"><span class="attr">zipStorePath</span>=<span class="string">wrapper/dists</span></span><br></pre></td></tr></table></figure>

<p>最后重新构建项目。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>MiraiBot</tag>
      </tags>
  </entry>
  <entry>
    <title>基于MiraiBot的简单开发（扩展监听方式）</title>
    <url>/2023/06/02/miraibot03/</url>
    <content><![CDATA[<h3 id="MiraiBot-简介"><a href="#MiraiBot-简介" class="headerlink" title="MiraiBot 简介"></a>MiraiBot 简介</h3><p>不写了</p>
<h3 id="监听的方式"><a href="#监听的方式" class="headerlink" title="监听的方式"></a>监听的方式</h3><p>虽然StartBot.kt里面的main函数中可以直接使用 <code>bot.eventChannel.subscribeGroupMessages</code> 来监听到bot的消息事件，但是为了更好的开发或者说监听类型分类，我们可以自定义LintenerHost，通过<code>bot.eventChannel.registerListenerHost</code>方法来注册到Bot的监听频道中。</p>
<h4 id="自定义ListenerHost"><a href="#自定义ListenerHost" class="headerlink" title="自定义ListenerHost"></a>自定义ListenerHost</h4><p>下面的例子说明了一个简单的群消息监听和文本回复，更多可以监听的事件可以查看Mirai的原文档：<a href="https://github.com/mamoe/mirai/blob/dev/docs/EventList.md">事件列表一览</a></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">object</span> BotListenerEvents : SimpleListenerHost( <span class="comment">/* override coroutineContext here */</span> ) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//GroupMessageEvent 普通的群消息</span></span><br><span class="line">    <span class="comment">//FriendMessageEvent 好友消息</span></span><br><span class="line">    <span class="comment">//GroupRecall 群撤回</span></span><br><span class="line">    <span class="comment">//NudgeEvent 戳一戳</span></span><br><span class="line">    <span class="comment">//GroupNameChangeEvent 群名改变</span></span><br><span class="line">    <span class="comment">//MemberJoinEvent 群成员加入</span></span><br><span class="line">    <span class="comment">//MemberLeaveEvent 群成员离开</span></span><br><span class="line">    <span class="meta">@EventHandler</span></span><br><span class="line">    <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> GroupMessageEvent.<span class="title">onMessage</span><span class="params">()</span></span>: ListeningStatus &#123; </span><br><span class="line">        <span class="comment">// 可以抛出任何异常, 将在 handleException 处理</span></span><br><span class="line">        <span class="comment">// 事件触发后 在此处编写对应的逻辑处理</span></span><br><span class="line">        <span class="comment">// 例如监听 群消息 “狼宝菜单” 。 当有人在群里发送“狼宝菜单”时，机器人会对应回复响应的文本消息。 </span></span><br><span class="line">        <span class="keyword">val</span> msg = message.contentToString()</span><br><span class="line">        <span class="keyword">when</span>&#123;</span><br><span class="line">                msg == <span class="string">&quot;狼宝菜单&quot;</span> -&gt;&#123;</span><br><span class="line">                    <span class="keyword">val</span> menuMessages = <span class="string">&quot;狼宝是一个个人开发的QQ机器人，当前版本0.1.5 \n当前功能：\n \t1.自定义消息：有人发[文本]你回[文本/图片] \n \t2.chatGpt: #chat[内容] \n \t3.漂流瓶：扔漂流瓶[内容]/捡漂流瓶 \n \t4.二次元图片：来张[关键词]涩图 \n狼宝使用过程中可能会收集部分信息，包含丘丘号码，昵称等，同时请勿利用狼宝发布平台违禁内容。\n如果你同意以上规范，可以输入[你好，狼宝！]来狼宝认识你。&quot;</span></span><br><span class="line">                    <span class="keyword">this</span>.group.sendMessage(menuMessages)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">     	<span class="keyword">return</span> ListeningStatus.LISTENING</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">handleException</span><span class="params">(context: <span class="type">CoroutineContext</span>, exception: <span class="type">Throwable</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.handleException(context, exception)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="注册自定义监听类"><a href="#注册自定义监听类" class="headerlink" title="注册自定义监听类"></a>注册自定义监听类</h4><p>编写好了<code>自定义监听类</code>之后还需要将其注册到Bot的eventChannel中。在StartBot.kt文件中添加下列代码</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">bot.eventChannel.registerListenerHost(BotGroupEvents)</span><br></pre></td></tr></table></figure>

<p><img src="https://resources.kagerou.top/img/blog/stratbot_events.webp" alt="StartBot.kt"></p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>接下来应该就是应该就是用户信息和权限管理相关的内容了，数据的持久化选用的是sqlite数据库。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>MiraiBot</tag>
      </tags>
  </entry>
  <entry>
    <title>基于MiraiBot的简单开发（自定义消息）</title>
    <url>/2023/06/27/miraibot05/</url>
    <content><![CDATA[<h3 id="MiraiBot-简介"><a href="#MiraiBot-简介" class="headerlink" title="MiraiBot 简介"></a>MiraiBot 简介</h3><p>不写了</p>
<h3 id="功能构想"><a href="#功能构想" class="headerlink" title="功能构想"></a>功能构想</h3><p>群员可以自定义一些关键词和消息内容，当机器人检测到该关键词时回自动回复关键词对应的消息内容。</p>
<h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><p>构建一个自定义消息类，来保存关键字和消息内容等信息。监听每一条群消息并与表中关键字匹配，如匹配则查询出自定义内容，发送到对应群内。若群消息与狼宝内置关键词匹配，则优先执行狼宝对应功能，否则不予理会。</p>
<p>为了方便数据入库，使用的Kotlin ORM 框架是 <code>Ktorm</code> <a href="https://www.ktorm.org/zh-cn/">使用说明</a> <a href="https://github.com/kotlin-orm/ktorm">仓库链接</a></p>
<h4 id="自定义消息实体的设计"><a href="#自定义消息实体的设计" class="headerlink" title="自定义消息实体的设计"></a>自定义消息实体的设计</h4><p>字段： group(群号),kwy(关键词),message(自定义消息),sender(发送者号码)</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//top.kagerou.data.CustomizeMessage.kt</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">CustomizeMessage</span> : <span class="type">Entity</span>&lt;<span class="type">CustomizeMessage</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> : Entity.Factory&lt;CustomizeMessage&gt;()</span><br><span class="line">    <span class="keyword">val</span> group: <span class="built_in">Long</span></span><br><span class="line">    <span class="keyword">val</span> key: String</span><br><span class="line">    <span class="keyword">val</span> message: String</span><br><span class="line">    <span class="keyword">val</span> sender :<span class="built_in">Long</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="自定义消息表对象的实现"><a href="#自定义消息表对象的实现" class="headerlink" title="自定义消息表对象的实现"></a>自定义消息表对象的实现</h4><p>在表对象中，将数据库的表名和表字段名和程序设计的类中的各字段名一一绑定起来。下面代码中<code>引号</code>中的内容为数据库对应名称</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//top.kagerou.data.CustomizeMessages.kt</span></span><br><span class="line"><span class="keyword">object</span> CustomizeMessages : Table&lt;CustomizeMessage&gt;(<span class="string">&quot;t_customize_message&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">val</span> group = long(<span class="string">&quot;group_number&quot;</span>).primaryKey().bindTo &#123; it.group &#125;</span><br><span class="line">    <span class="keyword">val</span> key = varchar(<span class="string">&quot;q_key&quot;</span>).bindTo &#123; it.key &#125;</span><br><span class="line">    <span class="keyword">val</span> message = varchar(<span class="string">&quot;q_message&quot;</span>).bindTo &#123; it.message &#125;</span><br><span class="line">    <span class="keyword">val</span> sender = long(<span class="string">&quot;sender_number&quot;</span>).bindTo &#123; it.sender &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="自定义消息数据表的创建"><a href="#自定义消息数据表的创建" class="headerlink" title="自定义消息数据表的创建"></a>自定义消息数据表的创建</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_customize_message</span><br><span class="line">(</span><br><span class="line">group_number <span class="type">NUMERIC</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">q_key <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">q_message <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">sender_number <span class="type">NUMERIC</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="自定义消息数据操作对象的实现"><a href="#自定义消息数据操作对象的实现" class="headerlink" title="自定义消息数据操作对象的实现"></a>自定义消息数据操作对象的实现</h4><p>根据业务简单的实现了部分方法</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义消息数据持久化的操作对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaohuliqibao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/6/25 15:38</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">object</span> CustomizeMessagesService &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化配置信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> database = Database.connect(<span class="string">&quot;jdbc:sqlite:src/test/resources/Chinook.db&quot;</span>)</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *描述: 保存自定义消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> group 群号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 关键词</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 自定义消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sender 发送人ID</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">save</span><span class="params">(group: <span class="type">Long</span>,key: <span class="type">String</span>,message: <span class="type">String</span>,sender: <span class="type">Long</span>)</span></span>&#123;</span><br><span class="line">        database.insert(CustomizeMessages)&#123;</span><br><span class="line">            <span class="comment">//set(it.id,1)</span></span><br><span class="line">            <span class="keyword">set</span>(it.group,group)</span><br><span class="line">            <span class="keyword">set</span>(it.key,key)</span><br><span class="line">            <span class="keyword">set</span>(it.message,message)</span><br><span class="line">            <span class="keyword">set</span>(it.sender, sender)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述: 通过关键词和群号查找对应的自定义消息，可能会查询不到，返回空字符串。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> group 群号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 关键词</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">findByKey</span><span class="params">(group: <span class="type">Long</span>, key: <span class="type">String</span>)</span></span>: String? &#123;</span><br><span class="line">        <span class="keyword">val</span> messageList = database.from(CustomizeMessages).select()</span><br><span class="line">            .<span class="keyword">where</span> &#123; (CustomizeMessages.group eq group) and (CustomizeMessages.key eq key) &#125;</span><br><span class="line">            .map &#123; row -&gt; CustomizeMessages.createEntity(row) &#125;</span><br><span class="line">        <span class="keyword">return</span> messageList.first()?.message</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述: 通过群号和关键词更新自定义消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> group 群号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 关键词</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 自定义消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sender 发送人ID</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">update</span><span class="params">(group: <span class="type">Long</span>,key: <span class="type">String</span>,message: <span class="type">String</span>,sender: <span class="type">Long</span>)</span></span>&#123;</span><br><span class="line">        database.update(CustomizeMessages)&#123;</span><br><span class="line">            <span class="keyword">set</span>(it.message,message)</span><br><span class="line">            <span class="keyword">set</span>(it.sender, sender)</span><br><span class="line">            <span class="keyword">where</span> &#123; (it.group eq group) and (it.key eq key) &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述: 判断是否存在关键词消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> group 群号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 关键词</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">exist</span><span class="params">(group: <span class="type">Long</span>, key: <span class="type">String</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> messageList = database.from(CustomizeMessages).select()</span><br><span class="line">            .<span class="keyword">where</span> &#123; (CustomizeMessages.group eq group) and (CustomizeMessages.key eq key) &#125;</span><br><span class="line">            .map &#123; row -&gt; CustomizeMessages.createEntity(row) &#125;</span><br><span class="line">        <span class="keyword">return</span> messageList.isNotEmpty()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述: 存在了-&gt; update,不存在-&gt; save</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> save</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> update</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">savePlus</span><span class="params">(group: <span class="type">Long</span>,key: <span class="type">String</span>,message: <span class="type">String</span>,sender: <span class="type">Long</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.exist(group,key))&#123;</span><br><span class="line">            <span class="keyword">this</span>.update(group, key, message, sender)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.save(group, key, message, sender)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述:删除自定义消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> group 群号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oldKey 要删除的关键词</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">delete</span><span class="params">(group: <span class="type">Long</span>, oldKey: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        database.delete(CustomizeMessages)&#123;</span><br><span class="line">            (it.group eq group) and (it.key eq oldKey)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="在QQ群事件监听类中添加一个单独的消息事件监听"><a href="#在QQ群事件监听类中添加一个单独的消息事件监听" class="headerlink" title="在QQ群事件监听类中添加一个单独的消息事件监听"></a>在QQ群事件监听类中添加一个单独的消息事件监听</h4><p>设置的增加监听的关键词为“有人发key你回message”,删除监听的关键词为“不再回复key”<br>以下市具体实现</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EventHandler</span></span><br><span class="line">    <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> GroupMessageEvent.<span class="title">CustomizeMessage</span><span class="params">()</span></span>: ListeningStatus&#123;</span><br><span class="line">        <span class="keyword">val</span> msg = message.contentToString()</span><br><span class="line">        <span class="keyword">if</span> ( GroupService.exist(group.id)) &#123;</span><br><span class="line">            <span class="keyword">when</span> &#123;</span><br><span class="line">                msg.startsWith(<span class="string">&quot;有人发&quot;</span>) &amp;&amp; msg.contains(<span class="string">&quot;你回&quot;</span>) -&gt; &#123;</span><br><span class="line">                    <span class="keyword">val</span> split = msg.subSequence(<span class="number">3</span>,msg.length).split(<span class="string">&quot;你回&quot;</span>)</span><br><span class="line">                    <span class="keyword">val</span> newKey = split[<span class="number">0</span>]</span><br><span class="line">                    <span class="keyword">val</span> newMessage = split[<span class="number">1</span>]</span><br><span class="line">                    CustomizeMessagesService.savePlus(group.id,newKey,newMessage,sender.id)</span><br><span class="line">                    <span class="keyword">this</span>.group.sendMessage(<span class="string">&quot;好的，狼宝记住了&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                msg.startsWith(<span class="string">&quot;不再回复&quot;</span>) -&gt; &#123;</span><br><span class="line">                    <span class="keyword">val</span> oldKey = msg.substring(<span class="number">4</span>,msg.length)</span><br><span class="line">                    CustomizeMessagesService.delete(group.id,oldKey)</span><br><span class="line">                    <span class="keyword">this</span>.group.sendMessage(<span class="string">&quot;好的，已经没有[<span class="variable">$oldKey</span>]&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                !msg.startsWith(<span class="string">&quot;不再回复&quot;</span>) || !msg.startsWith(<span class="string">&quot;有人发&quot;</span>) || !msg.contains(<span class="string">&quot;你回&quot;</span>) -&gt;&#123;</span><br><span class="line">                    <span class="keyword">val</span> customizeMessage = CustomizeMessagesService.findByKey(group.id, msg)</span><br><span class="line">                    <span class="keyword">if</span> (customizeMessage != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="comment">//todo 实现回复自定义图片</span></span><br><span class="line">                        <span class="keyword">this</span>.group.sendMessage(customizeMessage)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ListeningStatus.LISTENING</span><br><span class="line">    &#125;    </span><br></pre></td></tr></table></figure>

<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>自定义消息的实现，是机器人监听功能和数据库交互的一个简单的例子。其中&#x2F;&#x2F;todo 还可以实现回复自定义的图片等其他非简单文本的消息，可以继续探索Mirai的消息系统来实现。</p>
<p>下一章应该是对网络api服务使用和实现了。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>MiraiBot</tag>
      </tags>
  </entry>
  <entry>
    <title>基于MiraiBot的开发（定时推送新闻消息）</title>
    <url>/2023/07/19/miraibot08/</url>
    <content><![CDATA[<h4 id="Kotlin定时任务"><a href="#Kotlin定时任务" class="headerlink" title="Kotlin定时任务"></a>Kotlin定时任务</h4><p>Kotlin的定时任务主要通过Timer().schedule()和TimerTask()来实现</p>
<p>schedule()需要三个参数 可执行的方法、开始时间、执行间隔时间(毫秒)，参考源码获取更多Timer().schedule()的信息</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Timer().schedule(</span><br><span class="line">        <span class="keyword">object</span>: TimerTask()&#123;</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">                println(<span class="string">&quot;每1秒钟打印一次，Date()表示立刻开始&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, Date(),<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="获取每日新闻图片"><a href="#获取每日新闻图片" class="headerlink" title="获取每日新闻图片"></a>获取每日新闻图片</h4><p>这一部分属于简单的API调用操作。分为 请求API-&gt;解析结果-&gt;获取资源链接-&gt;下载资源。主要使用的工具类OKhttp4和Alibaba JSON2</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取新闻图片url</span></span><br><span class="line"><span class="keyword">val</span> DAILYNEWSAPI = <span class="string">&quot;https://v2.alapi.cn/api/zaobao&quot;</span></span><br><span class="line"><span class="keyword">val</span> APITOKEN = <span class="string">&quot;**************&quot;</span></span><br><span class="line"><span class="keyword">val</span> params = mutableMapOf(<span class="string">&quot;token&quot;</span> to APITOKEN,<span class="string">&quot;format&quot;</span> to <span class="string">&quot;json&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> headers = Headers.headersOf(<span class="string">&quot;Content-Type&quot;</span> , <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> result = OkHttpClientUtil.getHttpRespondToString(DAILYNEWSAPI, params, headers)</span><br><span class="line"><span class="keyword">val</span> imageUrl = JSON.parseObject(result).getJSONObject(<span class="string">&quot;data&quot;</span>).getString(<span class="string">&quot;image&quot;</span>)</span><br><span class="line">println(imageUrl)</span><br><span class="line"><span class="keyword">var</span> imagePath: String</span><br><span class="line"><span class="comment">//判断系统适配下载路径</span></span><br><span class="line"><span class="keyword">if</span> (System.getProperty(<span class="string">&quot;os.name&quot;</span>).lowercase().contains(<span class="string">&quot;linux&quot;</span>)) &#123; imagePath = <span class="string">&quot;/root/file/resources/img/mirai/&quot;</span> &#125;<span class="keyword">else</span>&#123; imagePath = <span class="string">&quot;./&quot;</span> &#125;</span><br><span class="line"><span class="comment">//下载图片文件到本地</span></span><br><span class="line"><span class="keyword">val</span> imageTitle: String = LocalDate.now().toString()</span><br><span class="line"><span class="keyword">val</span> imageFile: File = OkHttpClientUtil.saveImageFile(imagePath,imageUrl,imageTitle,<span class="string">&quot;.png&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>OkHttpClientUtil.kt</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">object</span> OkHttpClientUtil &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> client = OkHttpClient()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getHttpRespondToString</span><span class="params">(url: <span class="type">String</span>,params: <span class="type">MutableMap</span>&lt;<span class="type">String</span>,String&gt;,headers: <span class="type">Headers</span>)</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">val</span> httpUrl = url.toHttpUrl().newBuilder()</span><br><span class="line">        <span class="keyword">var</span> responseStr = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (params != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (param <span class="keyword">in</span> params)&#123;</span><br><span class="line">                httpUrl.addQueryParameter(param.key,param.value)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> request = Request.Builder().url(httpUrl.build()).headers(headers).build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">val</span> response = client.newCall(request).execute()</span><br><span class="line">            responseStr =  response.body!!.string()</span><br><span class="line">            <span class="keyword">if</span>(response.body != <span class="literal">null</span>) &#123;</span><br><span class="line">                response.body!!.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (e: IOException)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Get Request Error!&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> responseStr</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在网络上下载图片到本地，使用的是okhttp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imageUrl 图片链接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imageTitle 图片标题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imageFormat 图片文件后缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imagePath 保存地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> File</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException IO异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">saveImageFile</span><span class="params">(imagePath: <span class="type">String</span>,imageUrl: <span class="type">String</span>,imageTitle: <span class="type">String</span>,imageFormat: <span class="type">String</span>)</span></span>: File&#123;</span><br><span class="line">        <span class="keyword">val</span> imageFile = File(imagePath + imageTitle + imageFormat)</span><br><span class="line">        <span class="keyword">val</span> request = Request.Builder().url(imageUrl).build();</span><br><span class="line">        <span class="keyword">val</span> fos: FileOutputStream</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fos = FileOutputStream(imageFile)</span><br><span class="line">            <span class="keyword">val</span> response: Response = client.newCall(request).execute()</span><br><span class="line">            Objects.requireNonNull(response.body)?.bytes()?.let &#123; fos.write(it) &#125;</span><br><span class="line">            fos.close()</span><br><span class="line">            response.close()</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: IOException) &#123;</span><br><span class="line">            e.printStackTrace()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  imageFile</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="狼宝应用实际开发"><a href="#狼宝应用实际开发" class="headerlink" title="狼宝应用实际开发"></a>狼宝应用实际开发</h4><p>这段代码放在了StartBot.kt中 bot.login()之后 bot.join()之前的位置。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//明早9点</span></span><br><span class="line"><span class="keyword">val</span> date = LocalDateTime.parse(<span class="string">&quot;<span class="subst">$&#123;LocalDate.now().plusDays(<span class="number">1</span>)&#125;</span>090000&quot;</span>, DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-ddHHmmss&quot;</span>))</span><br><span class="line">        .atZone(ZoneId.systemDefault()).toInstant()</span><br><span class="line">Timer().schedule(</span><br><span class="line">    <span class="keyword">object</span>: TimerTask()&#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">            <span class="comment">//获取open的群列表</span></span><br><span class="line">            <span class="keyword">val</span> groupList = GroupService.getOpenGroups()</span><br><span class="line">            <span class="comment">//获取新闻图片url</span></span><br><span class="line">            <span class="keyword">val</span> DAILYNEWSAPI = <span class="string">&quot;https://v2.alapi.cn/api/zaobao&quot;</span></span><br><span class="line">            <span class="keyword">val</span> APITOKEN = <span class="string">&quot;vpu5ehavLNShzQ5a&quot;</span></span><br><span class="line">            <span class="keyword">val</span> params = mutableMapOf(<span class="string">&quot;token&quot;</span> to APITOKEN,<span class="string">&quot;format&quot;</span> to <span class="string">&quot;json&quot;</span>)</span><br><span class="line">            <span class="keyword">val</span> headers = Headers.headersOf(<span class="string">&quot;Content-Type&quot;</span> , <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line">            <span class="keyword">val</span> result = OkHttpClientUtil.getHttpRespondToString(DAILYNEWSAPI, params, headers)</span><br><span class="line">            <span class="keyword">val</span> imageUrl = JSON.parseObject(result).getJSONObject(<span class="string">&quot;data&quot;</span>).getString(<span class="string">&quot;image&quot;</span>)</span><br><span class="line">            println(imageUrl)</span><br><span class="line">            <span class="keyword">var</span> imagePath: String</span><br><span class="line">            <span class="comment">//判断系统适配下载路径</span></span><br><span class="line">            <span class="keyword">if</span> (System.getProperty(<span class="string">&quot;os.name&quot;</span>).lowercase().contains(<span class="string">&quot;linux&quot;</span>)) &#123; imagePath = <span class="string">&quot;/root/file/resources/img/mirai/&quot;</span> &#125;<span class="keyword">else</span>&#123; imagePath = <span class="string">&quot;./&quot;</span> &#125;</span><br><span class="line">            <span class="comment">//下载图片文件到本地</span></span><br><span class="line">            <span class="keyword">val</span> imageTitle: String = LocalDate.now().toString()</span><br><span class="line">            <span class="keyword">val</span> imageFile: File = OkHttpClientUtil.saveImageFile(imagePath,imageUrl,imageTitle,<span class="string">&quot;.png&quot;</span>)</span><br><span class="line">            groupList.forEach &#123; group: Group -&gt;</span><br><span class="line">                println(group.number)</span><br><span class="line">                bot.getGroup(group.number)?.sendImage(imageFile)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, Date.from(date),<span class="number">86400000</span>) <span class="comment">//开始于明早9点，间隔24小时执行一次</span></span><br></pre></td></tr></table></figure>

<h4 id="实际效果和结语"><a href="#实际效果和结语" class="headerlink" title="实际效果和结语"></a>实际效果和结语</h4><p>稳定上线了再说吧。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>MiraiBot</tag>
      </tags>
  </entry>
  <entry>
    <title>基于MiraiBot的开发（接入ChatGPT）</title>
    <url>/2023/08/02/miraibot09/</url>
    <content><![CDATA[<p>摸鱼太久没写博客已经不知道怎么写了。</p>
<h4 id="Kotlin使用okhttp3对OpenAI的API的调用示例"><a href="#Kotlin使用okhttp3对OpenAI的API的调用示例" class="headerlink" title="Kotlin使用okhttp3对OpenAI的API的调用示例"></a>Kotlin使用okhttp3对OpenAI的API的调用示例</h4><p>先在这里放一个<a href="https://platform.openai.com/docs/api-reference/introduction">官方文档</a></p>
<p>我们需要关注的三个关键参数是： API的地址、API的KEY、构建的消息块</p>
<p><a href="https://api.openai.com/v1/chat/completions">https://api.openai.com/v1/chat/completions</a></p>
<p>Bearer sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gpt-3.5-turbo&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Say this is a test!&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;temperature&quot;</span><span class="punctuation">:</span> <span class="number">0.7</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>原始的curl示例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://api.openai.com/v1/chat/completions </span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> </span><br><span class="line">  -H <span class="string">&quot;Authorization: Bearer <span class="variable">$OPENAI_API_KEY</span>&quot;</span> </span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">     &quot;model&quot;: &quot;gpt-3.5-turbo&quot;,</span></span><br><span class="line"><span class="string">     &quot;messages&quot;: [&#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Say this is a test!&quot;&#125;],</span></span><br><span class="line"><span class="string">     &quot;temperature&quot;: 0.7</span></span><br><span class="line"><span class="string">   &#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>先使用Headers.headersOf()构建一个Header信息，把‘Content-Type’和‘Authorization’的内容放进去</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> headers = Headers.headersOf(<span class="string">&quot;Authorization&quot;</span>,<span class="string">&quot;Bearer sk-xxxxxx&quot;</span>,<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/json;charset=utf-8&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>在使用fastjson2来构建要发送的消息体，其中包含提问的模型信息和交流的问题等各类参数。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> chatMsgInfo = JSONArray.of(JSONObject.of(<span class="string">&quot;role&quot;</span>, <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>, <span class="string">&quot;Say this is a test!&quot;</span>))</span><br><span class="line"><span class="keyword">var</span> chatInfo = JSONObject.of(<span class="string">&quot;model&quot;</span>, <span class="string">&quot;gpt-3.5-turbo&quot;</span>, <span class="string">&quot;messages&quot;</span>, chatMsgInfo)</span><br></pre></td></tr></table></figure>

<p>构建request请求体，选择POST方式把URL,Header和param放入请求体中。为JSONObject类型的chatInfo需要转化一下类型：chatInfo.toString().toRequestBody(“application&#x2F;json;charset&#x3D;utf-8”.toMediaType())</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> request = Request.Builder().url(<span class="string">&quot;https://api.openai.com/v1/chat/completions&quot;</span>).headers(headers).post(chatInfo.toString().toRequestBody(<span class="string">&quot;application/json;charset=utf-8&quot;</span>.toMediaType())).build()</span><br></pre></td></tr></table></figure>

<p>构建请求客户端，与通常不同的是由于网络因素，需要配置代理和请求超时等。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> client = OkHttpClient.Builder() <span class="comment">//设置代理 .proxy(Proxy(Proxy.Type.SOCKS, InetSocketAddress(&quot;127.0.0.1&quot;, 8080)))</span></span><br><span class="line">            .connectTimeout(<span class="number">60L</span>, TimeUnit.SECONDS) <span class="comment">//连接超时</span></span><br><span class="line">            .readTimeout(<span class="number">60L</span>, TimeUnit.SECONDS) <span class="comment">//读超时</span></span><br><span class="line">            .writeTimeout(<span class="number">60L</span>, TimeUnit.SECONDS) <span class="comment">//写超时</span></span><br><span class="line">            .build()</span><br></pre></td></tr></table></figure>

<p>发起请求和解析返回的消息体，client.newCall(request).execute()直接请求，返回的格式体如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;chatcmpl-xxxxxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;chat.completion&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">1690959173</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gpt-3.5-turbo-0613&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;choices&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;This is a test!&quot;</span></span><br><span class="line">               <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;finish_reason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;stop&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">     <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;usage&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;prompt_tokens&quot;</span><span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;completion_tokens&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;total_tokens&quot;</span><span class="punctuation">:</span> <span class="number">18</span></span><br><span class="line">     <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>需要的内容为choices.message.content 里面的内容。解析过程如下</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> response = client.newCall(request).execute()</span><br><span class="line">    <span class="keyword">var</span> content = JSONObject.parseObject(response.body!!.string()).getJSONArray(<span class="string">&quot;choices&quot;</span>).getJSONObject(<span class="number">0</span>)</span><br><span class="line">        .getJSONObject(<span class="string">&quot;message&quot;</span>).getString(<span class="string">&quot;content&quot;</span>).toString()</span><br><span class="line">    println(content)</span><br><span class="line">    <span class="keyword">if</span>(response.body != <span class="literal">null</span>) &#123;</span><br><span class="line">        response.body!!.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span> (e: IOException)&#123;</span><br><span class="line">    println(e.message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上就是使用okhttp简单的访问OpenAPI的过程。</p>
<h4 id="接入miraibot"><a href="#接入miraibot" class="headerlink" title="接入miraibot"></a>接入miraibot</h4><p>贴代码吧，没什么区别。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">msg.startsWith(<span class="string">&quot;#chat&quot;</span>) -&gt;&#123;</span><br><span class="line">    <span class="keyword">val</span> chatMsg = msg.substring(<span class="number">5</span>, msg.length)</span><br><span class="line">    <span class="keyword">val</span> OPENAPI = <span class="string">&quot;https://api.openai.com/v1/chat/completions&quot;</span></span><br><span class="line">    <span class="keyword">val</span> headers = Headers.headersOf(<span class="string">&quot;Authorization&quot;</span>,<span class="string">&quot;Bearer sk-xxx&quot;</span>,<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/json;charset=utf-8&quot;</span>)</span><br><span class="line">    <span class="comment">//val localhostProxy: Proxy = Proxy(Proxy.Type.SOCKS, InetSocketAddress(&quot;127.0.0.1&quot;, 10808))</span></span><br><span class="line">    <span class="comment">// &quot;&#123; &quot;model&quot;: &quot;gpt-3.5-turbo&quot;,&quot;messages&quot;: [&#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Hello!&quot;&#125;] &#125;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> chatMsgInfo = JSONArray.of(JSONObject.of(<span class="string">&quot;role&quot;</span>, <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>, chatMsg))</span><br><span class="line">    <span class="keyword">var</span> chatInfo = JSONObject.of(<span class="string">&quot;model&quot;</span>, <span class="string">&quot;gpt-3.5-turbo&quot;</span>, <span class="string">&quot;messages&quot;</span>, chatMsgInfo)</span><br><span class="line">    println(chatInfo.toString())</span><br><span class="line">    <span class="keyword">val</span> request = Request.Builder().url(OPENAPI).headers(headers).post(chatInfo.toString().toRequestBody(<span class="string">&quot;application/json;charset=utf-8&quot;</span>.toMediaType())).build()</span><br><span class="line">    <span class="keyword">var</span> client = OkHttpClient.Builder() <span class="comment">//设置代理</span></span><br><span class="line">        .connectTimeout(<span class="number">60L</span>, TimeUnit.SECONDS) <span class="comment">//连接超时</span></span><br><span class="line">        .readTimeout(<span class="number">60L</span>, TimeUnit.SECONDS) <span class="comment">//读取超时</span></span><br><span class="line">        .writeTimeout(<span class="number">60L</span>, TimeUnit.SECONDS) <span class="comment">//写超时</span></span><br><span class="line">        .build()</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> response = client.newCall(request).execute()</span><br><span class="line">        <span class="keyword">var</span> content = JSONObject.parseObject(response.body!!.string()).getJSONArray(<span class="string">&quot;choices&quot;</span>).getJSONObject(<span class="number">0</span>)</span><br><span class="line">            .getJSONObject(<span class="string">&quot;message&quot;</span>).getString(<span class="string">&quot;content&quot;</span>).toString()</span><br><span class="line">        <span class="keyword">this</span>.group.sendMessage(message.quote() + At(sender.id) + content  )</span><br><span class="line">        <span class="comment">//LangBaoServer.updateMoney(sender.id,-1,sender.id)</span></span><br><span class="line">        <span class="keyword">if</span>(response.body != <span class="literal">null</span>) &#123;</span><br><span class="line">            response.body!!.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (e: IOException)&#123;</span><br><span class="line">        println(e.message)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里是at机器人触发所以是机器人的qq号</span></span><br><span class="line">msg.startsWith(<span class="string">&quot;@22&quot;</span>) -&gt;&#123;</span><br><span class="line">    <span class="comment">//用redis来缓存prompt数据</span></span><br><span class="line">    <span class="keyword">val</span> jedis: Jedis = Jedis(<span class="string">&quot;xxx.xxx.xxx.xxx&quot;</span>,<span class="number">6379</span>)</span><br><span class="line">    jedis.auth(<span class="string">&quot;xxxxxx&quot;</span>)</span><br><span class="line">    <span class="comment">//Todo 存在Bug 当Redis数据库没有数据时 get方法会抛出异常， 处理方案 1.判断并使用set赋予初始值[-]; 2.在用户注册时同时初始化Redis数据库; 3.设置指令初始化账户 也可用于prompt数据</span></span><br><span class="line">    <span class="keyword">val</span> prompt = jedis.<span class="keyword">get</span>(group.id.toString()+<span class="string">&quot;-&quot;</span>+ sender.id.toString()).substring(<span class="number">1</span>).dropLast(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">//这里的substring(11, msg.length)的11是因为前面有10位都是QQ号</span></span><br><span class="line">    <span class="keyword">val</span> chatMsg = prompt + msg.substring(<span class="number">11</span>, msg.length)</span><br><span class="line">    <span class="keyword">val</span> context = prompt.split(<span class="string">&quot;,&quot;</span>).toMutableList()</span><br><span class="line">    <span class="comment">// prompt 设置为5，表示缓存的上下文长度为5条消息</span></span><br><span class="line">    <span class="keyword">if</span> (context.size &lt; <span class="number">5</span>) &#123;</span><br><span class="line">        context.add(msg.substring(<span class="number">11</span>, msg.length))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        context.removeAt(<span class="number">0</span>)</span><br><span class="line">        context.add(msg.substring(<span class="number">11</span>, msg.length))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> OPENAPI = <span class="string">&quot;https://api.openai.com/v1/completions&quot;</span></span><br><span class="line">    <span class="keyword">val</span> headers = Headers.headersOf(<span class="string">&quot;Authorization&quot;</span>,<span class="string">&quot;Bearer sk-xxxxxxxx&quot;</span>,<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/json;charset=utf-8&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> localhostProxy: Proxy = Proxy(Proxy.Type.SOCKS, InetSocketAddress(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>))</span><br><span class="line">    <span class="keyword">var</span> chatInfo = JSONObject.of(<span class="string">&quot;model&quot;</span>, <span class="string">&quot;text-davinci-003&quot;</span>, <span class="string">&quot;prompt&quot;</span>, chatMsg,<span class="string">&quot;max_tokens&quot;</span>,<span class="number">500</span>)</span><br><span class="line">    println(chatInfo.toString())</span><br><span class="line">    <span class="keyword">val</span> request = Request.Builder().url(OPENAPI).headers(headers).post(chatInfo.toString().toRequestBody(<span class="string">&quot;application/json;charset=utf-8&quot;</span>.toMediaType())).build()</span><br><span class="line">    <span class="keyword">var</span> client = OkHttpClient.Builder()<span class="comment">//.proxy(localhostProxy) //设置代理</span></span><br><span class="line">        .connectTimeout(<span class="number">60L</span>, TimeUnit.SECONDS) <span class="comment">//连接超时</span></span><br><span class="line">        .readTimeout(<span class="number">60L</span>, TimeUnit.SECONDS) <span class="comment">//读取超时</span></span><br><span class="line">        .writeTimeout(<span class="number">60L</span>, TimeUnit.SECONDS) <span class="comment">//写超时</span></span><br><span class="line">        .build()</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> response = client.newCall(request).execute()</span><br><span class="line">        <span class="keyword">var</span> content = JSONObject.parseObject(response.body!!.string()).getJSONArray(<span class="string">&quot;choices&quot;</span>).getJSONObject(<span class="number">0</span>).getString(<span class="string">&quot;text&quot;</span>).toString()</span><br><span class="line">        <span class="keyword">this</span>.group.sendMessage(message.quote() + At(sender.id) + content.replace(<span class="string">&quot;/n&quot;</span>,<span class="string">&quot; &quot;</span>)  )</span><br><span class="line">        <span class="comment">//LangBaoServer.updateMoney(sender.id,-1,sender.id)</span></span><br><span class="line">        <span class="comment">// prompt 设置为5，表示缓存的上下文长度为5条消息</span></span><br><span class="line">        <span class="keyword">if</span> (context.size &lt; <span class="number">5</span>) &#123;</span><br><span class="line">            context.add(content)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            context.removeAt(<span class="number">0</span>)</span><br><span class="line">            context.add(content)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(response.body != <span class="literal">null</span>) &#123;</span><br><span class="line">            response.body!!.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (e: IOException)&#123;</span><br><span class="line">        println(e.message)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将新一轮的prompt存入数据库</span></span><br><span class="line">    jedis.<span class="keyword">set</span>(group.id.toString()+<span class="string">&quot;-&quot;</span>+ sender.id.toString(),context.toString()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清空prompt，过长的prompt会导致token的快速消耗</span></span><br><span class="line">msg == <span class="string">&quot;#update prompt&quot;</span> -&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> jedis: Jedis = Jedis(<span class="string">&quot;...&quot;</span>,<span class="number">6379</span>)</span><br><span class="line">    jedis.auth(<span class="string">&quot;Xxxx&quot;</span>)</span><br><span class="line">    jedis.<span class="keyword">set</span>(group.id.toString()+<span class="string">&quot;-&quot;</span>+ sender.id.toString(),<span class="string">&quot;[-]&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>MiraiBot</tag>
      </tags>
  </entry>
  <entry>
    <title>基于MiraiBot的开发（自定义回复图片）</title>
    <url>/2023/07/07/miraibot07/</url>
    <content><![CDATA[<h3 id="MiraiBot-简介"><a href="#MiraiBot-简介" class="headerlink" title="MiraiBot 简介"></a>MiraiBot 简介</h3><p>不写了</p>
<h3 id="功能差异"><a href="#功能差异" class="headerlink" title="功能差异"></a>功能差异</h3><p>这部分属于前篇<a href="https://blog.kagerou.top/2023/06/27/miraibot05/">自定义消息</a>中的拓展开发，自定义回复图片内容。之前是回复的消息都是简单的文本消息，可以从单个MessageChain中获取到完成的key和value属性，同时在发送消息的时候可以直接发送简单文本。<br>而自定义图片的区别的在于，文本消息和图片消息在两个顺序的MessageChain中，并且在发送消息的时候需要去构建的Image类型的消息。难点构建一个完整的Image消息。</p>
<h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><h4 id="修改mgs的获取方式"><a href="#修改mgs的获取方式" class="headerlink" title="修改mgs的获取方式"></a>修改mgs的获取方式</h4><p>前篇中我们使用了message.contentToString()来简单的获取文本消息，在Message.kt的源码中写出了方法的介绍<code>转为接近官方格式的字符串, 即 &quot;内容&quot;.</code>也就是说转化之后的msg，在接受到每一张图片都是“图片”文本字符。为了获取到详细的图片的信息，我们这里需要使用message.toString()来取得最原始的消息信息。Message中包含了MessageMetadata 消息元数据 和 MessageContent 含内容的消息。这里我们暂时不用消息元数据，需要过滤掉。获得完整的含内容的消息。</p>
<p><img src="https://resources.kagerou.top/img/blog/Message01.webp" alt="message01"></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> messageContent = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span>.message.size - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    messageContent += message[i].toString()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> msg = messageContent</span><br></pre></td></tr></table></figure>

<h4 id="回复自定义图片内容"><a href="#回复自定义图片内容" class="headerlink" title="回复自定义图片内容"></a>回复自定义图片内容</h4><p>按照2.15.0-M1版本来看，储存到数据库的图片消息应该是“[mirai:image:{BD4394DD-E387-7E36-E0CD-E24F4A0403E1}.jpg, width&#x3D;453, height&#x3D;560, size&#x3D;112256, type&#x3D;JPG, isEmoji&#x3D;false]”这个内容。<br>若是普通的jpg或者png格式的静态图片，使用图片ID,通过Image.fromId(“{BD4394DD-E387-7E36-E0CD-E24F4A0403E1}.jpg”)，即可以构造简单的图片消息；<br>但是在测试的时候，发现动态的gif图片，Image.fromId() 构建后发送，图片就不动了。所有使用另一种图片的构建方式：InternalImageProtocol.instance.createImage()</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@OptIn(MiraiInternalApi::class)</span> <span class="comment">//方法上添加注解，IDEA会提示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//done 实现回复自定义图片</span></span><br><span class="line"><span class="keyword">if</span> (customizeMessage.contains(<span class="string">&quot;mirai:image&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//构建图片 原数据[mirai:image:&#123;BD4394DD-E387-7E36-E0CD-E24F4A0403E1&#125;.jpg, width=453, height=560, size=112256, type=JPG, isEmoji=false]</span></span><br><span class="line">    <span class="comment">//解析过程有点抽象，建议封装</span></span><br><span class="line">    <span class="keyword">val</span> map: MutableMap&lt;String,String&gt; = mutableMapOf()</span><br><span class="line">    <span class="keyword">val</span> split = customizeMessage.split(<span class="string">&quot;, &quot;</span>.toRegex())</span><br><span class="line">    map[<span class="string">&quot;imageId&quot;</span>] = split[<span class="number">0</span>].substring(<span class="number">13</span>,split[<span class="number">0</span>].length)</span><br><span class="line">    Arrays.stream(split.dropLastWhile &#123; it.isEmpty() &#125;.toTypedArray())</span><br><span class="line">          .filter &#123; kv: String -&gt; kv.contains(<span class="string">&quot;=&quot;</span>) &#125;</span><br><span class="line">          .map &#123; kv: String -&gt; kv.split(<span class="string">&quot;=&quot;</span>.toRegex()).dropLastWhile &#123; it.isEmpty() &#125;.toTypedArray() &#125;</span><br><span class="line">          .forEach&#123; array: Array&lt;String&gt; -&gt; map[array[<span class="number">0</span>]] = array[<span class="number">1</span>] &#125;</span><br><span class="line">    <span class="keyword">val</span> image = InternalImageProtocol.instance.createImage(map[<span class="string">&quot;imageId&quot;</span>].toString(),map[<span class="string">&quot;size&quot;</span>].toString().toLong(),ImageType.match(map[<span class="string">&quot;type&quot;</span>].toString()),map[<span class="string">&quot;width&quot;</span>].toString().toInt(),map[<span class="string">&quot;height&quot;</span>].toString().toInt(),<span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">this</span>.group.sendMessage(image)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.group.sendMessage(customizeMessage)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>若是简单的发送静态图片，可以试试下面比较简单方式。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//done 实现回复自定义图片</span></span><br><span class="line"><span class="keyword">if</span> (customizeMessage.contains(<span class="string">&quot;mirai:image&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//构建图片 原数据[mirai:image:&#123;BD4394DD-E387-7E36-E0CD-E24F4A0403E1&#125;.jpg, width=453, height=560, size=112256, type=JPG, isEmoji=false]</span></span><br><span class="line">    <span class="comment">//只需要获取到图片ID</span></span><br><span class="line">    <span class="keyword">val</span> map: MutableMap&lt;String,String&gt; = mutableMapOf()</span><br><span class="line">    <span class="keyword">val</span> split = customizeMessage.split(<span class="string">&quot;, &quot;</span>.toRegex())</span><br><span class="line">    <span class="keyword">val</span> image = Image.fromId(split[<span class="number">0</span>].substring(<span class="number">13</span>,split[<span class="number">0</span>].length))</span><br><span class="line">    <span class="keyword">this</span>.group.sendMessage(image)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.group.sendMessage(customizeMessage)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>把之前挖的肯填上了，用户的权限和积分系统还在摸鱼，摸不出来啊，总觉得写法很笨拙，也没有这方面经验，恼火。总想着用注解来写。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>MiraiBot</tag>
      </tags>
  </entry>
  <entry>
    <title>基于MiraiBot的简单开发（网易云点歌）</title>
    <url>/2023/06/29/miraibot06/</url>
    <content><![CDATA[<h3 id="MiraiBot-简介"><a href="#MiraiBot-简介" class="headerlink" title="MiraiBot 简介"></a>MiraiBot 简介</h3><p>不写了</p>
<h3 id="功能构想"><a href="#功能构想" class="headerlink" title="功能构想"></a>功能构想</h3><p>群员可以通过发送“点歌[歌名]”指令让狼宝回复对应歌曲卡片内容。</p>
<h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><p>识别指令后，获取到歌名之后，根据API构建OKHTTP3.request，一般包含[url]，[param]，[header]。然后创建OKHTTP3.client，来向API请求request中的请求，最后将获取OKHTTP3.response，使用alibaba.fastjson2从中提取出需要的[songName]，[songId]，[artisName]，[albumPicUrl]，最后构建音乐卡片信息发送到群内。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gm=&gt;operation: 获取歌名</span><br><span class="line">cr=&gt;operation: 创建request</span><br><span class="line">cc=&gt;operation: 创建client并执行</span><br><span class="line">gr=&gt;operation: 获取response</span><br><span class="line">pr=&gt;operation: 解析response获取歌曲信息</span><br><span class="line">cmc=&gt;operation: 创建音乐卡片</span><br><span class="line">sg=&gt;operation: 发送群内</span><br><span class="line">gm-&gt;cr-&gt;cc-&gt;gr-&gt;pr-&gt;cmc-&gt;sg</span><br></pre></td></tr></table></figure>

<h4 id="获取歌名"><a href="#获取歌名" class="headerlink" title="获取歌名"></a>获取歌名</h4><p>截取消息除点歌外后面信息</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">msg.startsWith(<span class="string">&quot;点歌&quot;</span>) -&gt; &#123;</span><br><span class="line">    <span class="comment">//获取歌名</span></span><br><span class="line">    <span class="keyword">val</span> song = msg.substring(<span class="number">2</span>,msg.length)</span><br><span class="line">    println(song)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="创建request"><a href="#创建request" class="headerlink" title="创建request"></a>创建request</h4><p>分别构建httpUrl，headers并将param加入到httpUrl中。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置API信息</span></span><br><span class="line"><span class="keyword">val</span> CLOUDMUSICAPI = <span class="string">&quot;http://music.163.com/api/search/pc&quot;</span></span><br><span class="line"><span class="keyword">val</span> params = mutableMapOf&lt;String, String&gt;(<span class="string">&quot;s&quot;</span> to song, <span class="string">&quot;type&quot;</span> to <span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> headers = Headers.headersOf(</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>,</span><br><span class="line">    <span class="string">&quot;NMTID=00OROY9zyHPYl3__EqTgjOOsH0yh2sAAAGA1axg4Q&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">val</span> httpUrl = CLOUDMUSICAPI.toHttpUrl().newBuilder()</span><br><span class="line"><span class="keyword">if</span> (params != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (param <span class="keyword">in</span> params)&#123;</span><br><span class="line">        httpUrl.addQueryParameter(param.key,param.value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> request = Request.Builder().url(httpUrl.build()).headers(headers).build();</span><br></pre></td></tr></table></figure>

<h4 id="创建client后执行request并获取response"><a href="#创建client后执行request并获取response" class="headerlink" title="创建client后执行request并获取response"></a>创建client后执行request并获取response</h4><p>创建client后通过newCall(request).execute()来获取到响应的response实例，然后再获取到实际的响应data放置在responseStr中，最后关闭response。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建client</span></span><br><span class="line"><span class="keyword">val</span> client = OkHttpClient()</span><br><span class="line"><span class="keyword">var</span> responseStr = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> response = client.newCall(request).execute()</span><br><span class="line">    responseStr =  response.body!!.string()</span><br><span class="line">    <span class="keyword">if</span>(response.body != <span class="literal">null</span>) &#123;</span><br><span class="line">        response.body!!.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span> (e: IOException)&#123;</span><br><span class="line">    log.info(<span class="string">&quot;Get Request Error!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="解析response获取-songName-，-songId-，-artisName-，-albumPicUrl"><a href="#解析response获取-songName-，-songId-，-artisName-，-albumPicUrl" class="headerlink" title="解析response获取[songName]，[songId]，[artisName]，[albumPicUrl]"></a>解析response获取[songName]，[songId]，[artisName]，[albumPicUrl]</h4><p>解析response的data数据，具体怎么写，可以学习alibaba.fastjson。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//处理查询结果，获取想要的数据</span></span><br><span class="line"><span class="keyword">val</span> songsJsonArray = JSON.parseObject(responseStr).getJSONObject(<span class="string">&quot;result&quot;</span>).getJSONArray(<span class="string">&quot;songs&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> songJsonObject = songsJsonArray.getJSONObject(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">val</span> songName = songJsonObject.getString(<span class="string">&quot;name&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> songId = songJsonObject.getLong(<span class="string">&quot;id&quot;</span>).toString()</span><br><span class="line"><span class="keyword">val</span> artisName = songJsonObject.getJSONArray(<span class="string">&quot;artists&quot;</span>).getJSONObject(<span class="number">0</span>).getString(<span class="string">&quot;name&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> albumPicUrl = songJsonObject.getJSONObject(<span class="string">&quot;album&quot;</span>).getString(<span class="string">&quot;picUrl&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="创建音乐卡片并发送到群内"><a href="#创建音乐卡片并发送到群内" class="headerlink" title="创建音乐卡片并发送到群内"></a>创建音乐卡片并发送到群内</h4><p>创建音乐卡片，配置内容：</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">内容</th>
</tr>
</thead>
<tbody><tr>
<td align="center">kind</td>
<td align="center">音乐卡片类型</td>
</tr>
<tr>
<td align="center">title</td>
<td align="center">歌名</td>
</tr>
<tr>
<td align="center">summary</td>
<td align="center">专辑名</td>
</tr>
<tr>
<td align="center">brief</td>
<td align="center">忘了</td>
</tr>
<tr>
<td align="center">jumpUrl</td>
<td align="center">歌曲链接</td>
</tr>
<tr>
<td align="center">pictureUrl</td>
<td align="center">封面图片链接</td>
</tr>
<tr>
<td align="center">musicUrl</td>
<td align="center">歌曲播放链接</td>
</tr>
</tbody></table>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配饰音乐卡片消息并发送</span></span><br><span class="line"><span class="keyword">val</span> musicShare = MusicShare(</span><br><span class="line">        kind = MusicKind.NeteaseCloudMusic,</span><br><span class="line">        title = songName,</span><br><span class="line">        summary = artisName,</span><br><span class="line">        brief = <span class="string">&quot;&quot;</span>,</span><br><span class="line">        jumpUrl = CLOUDMUSICJUMPURL + songId,</span><br><span class="line">        pictureUrl = albumPicUrl,</span><br><span class="line">        musicUrl = CLOUDMUSICURL + songId</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">this</span>.group.sendMessage(musicShare)</span><br></pre></td></tr></table></figure>

<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>一个简单的对公共网络API的调用和音乐卡片的消息类型的实践。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>MiraiBot</tag>
      </tags>
  </entry>
  <entry>
    <title>JS文件操作</title>
    <url>/2024/05/06/nodejs-install/</url>
    <content><![CDATA[<h3 id="获取某一个目录下的所有文件"><a href="#获取某一个目录下的所有文件" class="headerlink" title="获取某一个目录下的所有文件"></a>获取某一个目录下的所有文件</h3><p>想把服务器上某个目录的文件全部拉一下信息，然后入库。</p>
<h4 id="使用的模块"><a href="#使用的模块" class="headerlink" title="使用的模块"></a>使用的模块</h4><p>引入模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">readdirSync</span>( <span class="attr">path</span>: <span class="title class_">PathLike</span>,options?:| &#123;<span class="attr">encoding</span>: <span class="title class_">BufferEncoding</span> | <span class="literal">null</span>;withFileTypes?: <span class="literal">false</span> | <span class="literal">undefined</span>;recursive?: boolean | <span class="literal">undefined</span>;&#125;| <span class="title class_">BufferEncoding</span>| <span class="literal">null</span>,) <span class="comment">//读取目录下的文件</span></span><br><span class="line">path.<span class="title function_">join</span>(...<span class="attr">paths</span>: string[]) <span class="comment">//拼接路径</span></span><br><span class="line">path.<span class="title function_">resolve</span>(paths) <span class="comment">//获取绝对路径</span></span><br><span class="line">path.<span class="title function_">basename</span>(paths) <span class="comment">//获取文件名</span></span><br><span class="line">path.<span class="title function_">dirname</span>(paths) <span class="comment">//获取文件夹路径</span></span><br><span class="line">path.<span class="title function_">extname</span>(paths) <span class="comment">//获取文件扩展名</span></span><br><span class="line">fs.<span class="title function_">statSync</span>(<span class="attr">path</span>: <span class="title class_">PathLike</span>, options?: <span class="literal">undefined</span>) <span class="comment">//获取文件信息</span></span><br><span class="line">stat.<span class="title function_">isDirectory</span>() <span class="comment">//判断是否是文件夹</span></span><br><span class="line">stat.<span class="title function_">isFile</span>() <span class="comment">//判断是否是文件</span></span><br><span class="line">stat.<span class="property">ctime</span> <span class="comment">//获取文件的创建时间</span></span><br><span class="line">stat.<span class="property">size</span> <span class="comment">//获取文件的大小</span></span><br></pre></td></tr></table></figure>

<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>代码实现写的比较随意，只有获取文件信息的部分，入库在BaoKeDun的整体服务里。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showfileinfo</span>(<span class="params">filePath</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(filePath);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">extname</span>(filePath));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">dirname</span>(filePath));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">basename</span>(filePath));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(fs.<span class="title function_">statSync</span>(filePath).<span class="property">size</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(fs.<span class="title function_">statSync</span>(filePath).<span class="property">ctime</span>.<span class="title function_">toLocaleDateString</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fileTest</span>(<span class="params">filedir</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">readdirSync</span>(filedir).<span class="title function_">map</span>(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> filePath = path.<span class="title function_">join</span>(filedir,file)</span><br><span class="line">            <span class="keyword">const</span> fileStat = fs.<span class="title function_">statSync</span>(filePath)</span><br><span class="line">            <span class="keyword">if</span>(fileStat.<span class="title function_">isDirectory</span>())&#123;</span><br><span class="line">                <span class="title function_">fileTest</span>(filePath)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fileStat.<span class="title function_">isFile</span>())&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">resolve</span>(filePath));</span><br><span class="line">                <span class="title function_">showfileinfo</span>(path.<span class="title function_">resolve</span>(filePath))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fileTest</span>(<span class="string">&#x27;../source&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;End&quot;</span>);</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<h3 id="fs模块下的各类函数"><a href="#fs模块下的各类函数" class="headerlink" title="fs模块下的各类函数"></a>fs模块下的各类函数</h3><p>node的fs是文件系统模块，它提供了文件读取、写入、删除、重命名等操作。</p>
<h4 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(<span class="attr">path</span>: <span class="title class_">PathLike</span>, <span class="attr">options</span>: <span class="title class_">BufferEncoding</span> | string | <span class="literal">null</span> | <span class="literal">undefined</span>, <span class="attr">callback</span>: <span class="function">(<span class="params">err: NodeJS.ErrnoException | <span class="literal">null</span>, data: Buffer</span>) =&gt;</span> <span class="keyword">void</span>): <span class="keyword">void</span>;</span><br><span class="line">fs.<span class="title function_">readFileSync</span>(<span class="attr">path</span>: <span class="title class_">PathLike</span>, options?: string | <span class="title class_">BufferEncoding</span> | <span class="literal">null</span>): <span class="title class_">Buffer</span>;</span><br></pre></td></tr></table></figure>

<h4 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">writeFile</span>(<span class="attr">path</span>: <span class="title class_">PathLike</span>, <span class="attr">data</span>: any, <span class="attr">options</span>: <span class="title class_">WriteFileOptions</span>, <span class="attr">callback</span>: <span class="function">(<span class="params">err: NodeJS.ErrnoException | <span class="literal">null</span></span>) =&gt;</span> <span class="keyword">void</span>): <span class="keyword">void</span>;</span><br><span class="line">fs.<span class="title function_">writeFileSync</span>(<span class="attr">path</span>: <span class="title class_">PathLike</span>, <span class="attr">data</span>: any, options?: string | <span class="title class_">BufferEncoding</span> | <span class="literal">null</span>): <span class="keyword">void</span>;</span><br></pre></td></tr></table></figure>

<h4 id="文件夹读取"><a href="#文件夹读取" class="headerlink" title="文件夹读取"></a>文件夹读取</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">readdir</span>(<span class="attr">path</span>: <span class="title class_">PathLike</span>, <span class="attr">options</span>: &#123; <span class="attr">encoding</span>: <span class="title class_">BufferEncoding</span> | <span class="literal">null</span>; withFileTypes?: boolean | <span class="literal">null</span> | <span class="literal">undefined</span>; &#125; | <span class="title class_">BufferEncoding</span> | <span class="literal">null</span>, <span class="attr">callback</span>: <span class="function">(<span class="params">err: NodeJS.ErrnoException | <span class="literal">null</span>, files: string[]</span>) =&gt;</span> <span class="keyword">void</span>): <span class="keyword">void</span>;</span><br><span class="line">fs.<span class="title function_">readdirSync</span>(<span class="attr">path</span>: <span class="title class_">PathLike</span>, options?: &#123; <span class="attr">encoding</span>: <span class="title class_">BufferEncoding</span> | <span class="literal">null</span>; withFileTypes?: boolean | <span class="literal">null</span> | <span class="literal">undefined</span>; &#125; | <span class="title class_">BufferEncoding</span> | <span class="literal">null</span>): string[];</span><br></pre></td></tr></table></figure>

<h4 id="文件夹写入"><a href="#文件夹写入" class="headerlink" title="文件夹写入"></a>文件夹写入</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">mkdir</span>(<span class="attr">path</span>: <span class="title class_">PathLike</span>, <span class="attr">options</span>: <span class="title class_">MakeDirectoryOptions</span> | <span class="literal">undefined</span> | <span class="literal">null</span>, <span class="attr">callback</span>: <span class="function">(<span class="params">err: NodeJS.ErrnoException | <span class="literal">null</span></span>) =&gt;</span> <span class="keyword">void</span>): <span class="keyword">void</span>;</span><br><span class="line">fs.<span class="title function_">mkdirSync</span>(<span class="attr">path</span>: <span class="title class_">PathLike</span>, options?: <span class="title class_">MakeDirectoryOptions</span> | <span class="literal">undefined</span> | <span class="literal">null</span>): <span class="keyword">void</span>;</span><br></pre></td></tr></table></figure>

<h4 id="文件夹删除"><a href="#文件夹删除" class="headerlink" title="文件夹删除"></a>文件夹删除</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">rmdir</span>(<span class="attr">path</span>: <span class="title class_">PathLike</span>, <span class="attr">callback</span>: <span class="function">(<span class="params">err: NodeJS.ErrnoException | <span class="literal">null</span></span>) =&gt;</span> <span class="keyword">void</span>): <span class="keyword">void</span>;</span><br><span class="line">fs.<span class="title function_">rmdirSync</span>(<span class="attr">path</span>: <span class="title class_">PathLike</span>): <span class="keyword">void</span>;</span><br></pre></td></tr></table></figure>

<h4 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">unlink</span>(<span class="attr">path</span>: <span class="title class_">PathLike</span>, <span class="attr">callback</span>: <span class="function">(<span class="params">err: NodeJS.ErrnoException | <span class="literal">null</span></span>) =&gt;</span> <span class="keyword">void</span>): <span class="keyword">void</span>;</span><br><span class="line">fs.<span class="title function_">unlinkSync</span>(<span class="attr">path</span>: <span class="title class_">PathLike</span>): <span class="keyword">void</span>;</span><br></pre></td></tr></table></figure>

<h4 id="文件夹重命名"><a href="#文件夹重命名" class="headerlink" title="文件夹重命名"></a>文件夹重命名</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">rename</span>(<span class="attr">oldPath</span>: <span class="title class_">PathLike</span>, <span class="attr">newPath</span>: <span class="title class_">PathLike</span>, <span class="attr">callback</span>: <span class="function">(<span class="params">err: NodeJS.ErrnoException | <span class="literal">null</span></span>) =&gt;</span> <span class="keyword">void</span>): <span class="keyword">void</span>;</span><br><span class="line">fs.<span class="title function_">renameSync</span>(<span class="attr">oldPath</span>: <span class="title class_">PathLike</span>, <span class="attr">newPath</span>: <span class="title class_">PathLike</span>): <span class="keyword">void</span>;</span><br></pre></td></tr></table></figure>

<h4 id="文件夹复制"><a href="#文件夹复制" class="headerlink" title="文件夹复制"></a>文件夹复制</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">copyFile</span>(<span class="attr">src</span>: <span class="title class_">PathLike</span>, <span class="attr">dest</span>: <span class="title class_">PathLike</span>, <span class="attr">flags</span>: number, <span class="attr">callback</span>: <span class="function">(<span class="params">err: NodeJS.ErrnoException | <span class="literal">null</span></span>) =&gt;</span> <span class="keyword">void</span>): <span class="keyword">void</span>;</span><br><span class="line">fs.<span class="title function_">copyFileSync</span>(<span class="attr">src</span>: <span class="title class_">PathLike</span>, <span class="attr">dest</span>: <span class="title class_">PathLike</span>, <span class="attr">flags</span>: number): <span class="keyword">void</span>;</span><br></pre></td></tr></table></figure>

<h4 id="文件夹移动"><a href="#文件夹移动" class="headerlink" title="文件夹移动"></a>文件夹移动</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">rename</span>(<span class="attr">oldPath</span>: <span class="title class_">PathLike</span>, <span class="attr">newPath</span>: <span class="title class_">PathLike</span>, <span class="attr">callback</span>: <span class="function">(<span class="params">err: NodeJS.ErrnoException | <span class="literal">null</span></span>) =&gt;</span> <span class="keyword">void</span>): <span class="keyword">void</span>;</span><br><span class="line">fs.<span class="title function_">renameSync</span>(<span class="attr">oldPath</span>: <span class="title class_">PathLike</span>, <span class="attr">newPath</span>: <span class="title class_">PathLike</span>): <span class="keyword">void</span>;</span><br></pre></td></tr></table></figure>

<h4 id="文件夹遍历"><a href="#文件夹遍历" class="headerlink" title="文件夹遍历"></a>文件夹遍历</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">readdir</span>(<span class="attr">path</span>: <span class="title class_">PathLike</span>, <span class="attr">options</span>: &#123; <span class="attr">encoding</span>: <span class="title class_">BufferEncoding</span> | <span class="literal">null</span>; withFileTypes?: boolean | <span class="literal">null</span> | <span class="literal">undefined</span>; &#125; | <span class="title class_">BufferEncoding</span> | <span class="literal">null</span>, <span class="attr">callback</span>: <span class="function">(<span class="params">err: NodeJS.ErrnoException | <span class="literal">null</span>, files: string[]</span>) =&gt;</span> <span class="keyword">void</span>): <span class="keyword">void</span>;</span><br><span class="line">fs.<span class="title function_">readdirSync</span>(<span class="attr">path</span>: <span class="title class_">PathLike</span>, options?: &#123; <span class="attr">encoding</span>: <span class="title class_">BufferEncoding</span> | <span class="literal">null</span>; withFileTypes?: boolean | <span class="literal">null</span> | <span class="literal">undefined</span>; &#125; | <span class="title class_">BufferEncoding</span> | <span class="literal">null</span>): string[];</span><br></pre></td></tr></table></figure>

<h4 id="文件夹创建"><a href="#文件夹创建" class="headerlink" title="文件夹创建"></a>文件夹创建</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">mkdir</span>(<span class="attr">path</span>: <span class="title class_">PathLike</span>, <span class="attr">options</span>: <span class="title class_">MakeDirectoryOptions</span> | <span class="literal">undefined</span> | <span class="literal">null</span>, <span class="attr">callback</span>: <span class="function">(<span class="params">err: NodeJS.ErrnoException | <span class="literal">null</span></span>) =&gt;</span> <span class="keyword">void</span>): <span class="keyword">void</span>;</span><br><span class="line">fs.<span class="title function_">mkdirSync</span>(<span class="attr">path</span>: <span class="title class_">PathLike</span>, options?: <span class="title class_">MakeDirectoryOptions</span> | <span class="literal">undefined</span> | <span class="literal">null</span>): <span class="keyword">void</span>;</span><br></pre></td></tr></table></figure>

<h4 id="文件夹删除-1"><a href="#文件夹删除-1" class="headerlink" title="文件夹删除"></a>文件夹删除</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">rmdir</span>(<span class="attr">path</span>: <span class="title class_">PathLike</span>, <span class="attr">callback</span>: <span class="function">(<span class="params">err: NodeJS.ErrnoException | <span class="literal">null</span></span>) =&gt;</span> <span class="keyword">void</span>): <span class="keyword">void</span>;</span><br><span class="line">fs.<span class="title function_">rmdirSync</span>(<span class="attr">path</span>: <span class="title class_">PathLike</span>): <span class="keyword">void</span>;</span><br></pre></td></tr></table></figure>

<h4 id="文件删除-1"><a href="#文件删除-1" class="headerlink" title="文件删除"></a>文件删除</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">unlink</span>(<span class="attr">path</span>: <span class="title class_">PathLike</span>, <span class="attr">callback</span>: <span class="function">(<span class="params">err: NodeJS.ErrnoException | <span class="literal">null</span></span>) =&gt;</span> <span class="keyword">void</span>): <span class="keyword">void</span>;</span><br><span class="line">fs.<span class="title function_">unlinkSync</span>(<span class="attr">path</span>: <span class="title class_">PathLike</span>): <span class="keyword">void</span>;</span><br></pre></td></tr></table></figure>

<h3 id="path模块下的各类函数"><a href="#path模块下的各类函数" class="headerlink" title="path模块下的各类函数"></a>path模块下的各类函数</h3><p>path模块提供了一些用于处理文件路径的函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path.<span class="title function_">join</span>() <span class="comment">//拼接路径</span></span><br><span class="line">path.<span class="title function_">resolve</span>() <span class="comment">//获取绝对路径</span></span><br><span class="line">path.<span class="title function_">basename</span>() <span class="comment">//获取文件名</span></span><br><span class="line">path.<span class="title function_">dirname</span>() <span class="comment">//获取文件夹路径</span></span><br><span class="line">path.<span class="title function_">extname</span>() <span class="comment">//获取文件扩展名</span></span><br><span class="line">path.<span class="title function_">parse</span>() <span class="comment">//获取文件信息</span></span><br><span class="line">path.<span class="title function_">format</span>() <span class="comment">//格式化路径</span></span><br><span class="line">path.<span class="title function_">normalize</span>() <span class="comment">//标准化路径</span></span><br><span class="line">path.<span class="title function_">relative</span>() <span class="comment">//获取相对路径</span></span><br><span class="line">path.<span class="property">sep</span> <span class="comment">//获取路径分隔符</span></span><br><span class="line">path.<span class="property">delimiter</span> <span class="comment">//获取路径分隔符</span></span><br><span class="line">path.<span class="title function_">win32</span>() <span class="comment">//获取windows路径</span></span><br><span class="line">path.<span class="title function_">posix</span>() <span class="comment">//获取posix路径</span></span><br><span class="line">path.<span class="title function_">toNamespacedPath</span>() <span class="comment">//获取命名空间路径</span></span><br><span class="line">path.<span class="title function_">isAbsolute</span>() <span class="comment">//判断是否是绝对路径</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>file</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库中的tnsnames.ora文件及网络配置</title>
    <url>/2023/07/12/oracle-tns/</url>
    <content><![CDATA[<h3 id="tnsnames-ora文件"><a href="#tnsnames-ora文件" class="headerlink" title="tnsnames.ora文件"></a>tnsnames.ora文件</h3><p>在上一篇文章中讲到了 <code>$ORACLE_HOME/network/admin</code> 目录下的 tnsnames.ora 文件，我们通过toad软件来完成了一个链接的配置。配置之后的文件内容大致为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">QIBAO =  //QIBAO 是此链接的别名</span><br><span class="line">  (DESCRIPTION = </span><br><span class="line">    (ADDRESS = </span><br><span class="line">      (PROTOCOL = TCP) //协议方式默认为TCP</span><br><span class="line">      (HOST = 10.11.34.89) //数据库地址，也可以是主机名，但需要能正常解析到</span><br><span class="line">      (PORT = 1521) //数据库监听端口，需要和服务端listener.ora中配置一样，默认为1521</span><br><span class="line">    )</span><br><span class="line">    (CONNECT_DATA = </span><br><span class="line">      (SERVER = default) </span><br><span class="line">      (SERVICE_NAME = NEWDATABASE) // 链接的Schema名称，也可以成为具体的数据库库名称</span><br><span class="line">    )</span><br><span class="line">  )</span><br></pre></td></tr></table></figure>

<p>TNS配置链接常用的使用方法是在sqlplus中使用命令行直接链接数据库，如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlplus username/password@QIBAO </span><br></pre></td></tr></table></figure>

<p>@后面接的就是在TNSNAMES.ORA文件中配置的链接的别名。一些数据管理软件也可以通过读取本地Oracle client的tns配置来进行数据库链接，比如Toad for Oracle。</p>
<h3 id="什么是TNS-ADMIN变量"><a href="#什么是TNS-ADMIN变量" class="headerlink" title="什么是TNS_ADMIN变量"></a>什么是TNS_ADMIN变量</h3><p>TNS_ADMIN 一般配置为tnsnames.ora文件所在的目录。如<code>$ORACLE_HOME/network/admin</code>。<br>他的作用是当你的计算机上存在多份tnsnames.ora配置文件的时候，手动更改TNS_ADMIN变量，来灵活的切换Oracle client优先选择的tnsnames.ora配置文件。TNS_ADMIN系统环境变量的优先级高于注册表，如果设置了环境变量，那么就会忽略注册表的值。</p>
<h3 id="sqlnet-ora文件"><a href="#sqlnet-ora文件" class="headerlink" title="sqlnet.ora文件"></a>sqlnet.ora文件</h3><p>sqlnet.ora文件中我们通常配置：连接数据库的认证方式和连接地址解析方式。通过Toad配置出来的sqlnet.ora文件如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SQLNET.AUTHENTICATION_SERVICES= (NTS) </span><br><span class="line">NAMES.DIRECTORY_PATH=(TNSNAME,EZCONNECT)</span><br><span class="line">LOG_DIRECTORY_CLIENT=C:\Users\93031\AppData\Roaming\Quest Software\Toad for Oracle\16.1\User Files\LOG</span><br><span class="line">SQLNET.EXPIRE_TIME=0</span><br><span class="line">TRACE_FILELEN_CLIENT=100</span><br><span class="line">TRACE_FILENO_CLIENT=3</span><br><span class="line">TRACE_LEVEL_CLIENT=OFF</span><br><span class="line">TRACE_TIMESTAMP_CLIENT=ON</span><br><span class="line">TRACE_UNIQUE_CLIENT=ON</span><br><span class="line">USE_DEDICATED_SERVER=OFF</span><br></pre></td></tr></table></figure>

<p>SQLNET.AUTHENTICATION_SERVICES 指定启动一个或多个认证服务<br>    - NONE: 不允许通过OS系统用户登录数据库，需要提供用户名及密码<br>    - ALL: 允许所有的登录方式<br>    - NTS: 允许本地操作系统用户认证</p>
<p>NAMES.DIRECTORY_PATH 指定CLIENT NAME解析方法的次序<br>    - TNSNAME：从tnsnames.ora开始解析地址     sqlplus username&#x2F;password@QIBAO<br>    - EZCONNECT：可以使用简单的方式连接Oracle  CONNECT username&#x2F;password@host[:port][&#x2F;service_name][&#x2F;instance_name]  </p>
<p>如果你是使用Toad中Direct的方式连接数据库，也记得在NAMES.DIRECTORY_PATH中添加上EZCONNECT。</p>
<h3 id="listener-ora文件"><a href="#listener-ora文件" class="headerlink" title="listener.ora文件"></a>listener.ora文件</h3><p>服务器端的，不写了，用不上。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2024/05/06/nodejs-file/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Oracle数据表的透视函数Pivot（行转列）</title>
    <url>/2023/06/28/oracle_pivot/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>行转列，依照实际的业务需求，在Oracle数据库中创建相应的透视&#x2F;交叉表。推荐阅读官方文档 <a href="https://www.oracle.com/cn/technical-resources/articles/database/sql-11g-pivot.html">透视和逆透视</a></p>
<h3 id="透视（行转列）"><a href="#透视（行转列）" class="headerlink" title="透视（行转列）"></a>透视（行转列）</h3><p>原查询语句为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> p.Prod_date,p.INDEX_NAME ,p.ITEM_VALUE </span><br><span class="line"><span class="keyword">FROM</span> PC_SPL_REPORT_INDEX_ITEM p</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">AND</span> p.REPORT_ID <span class="operator">=</span> <span class="string">&#x27;16673814706151363&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> p.INDEX_NAME <span class="keyword">IN</span> (<span class="string">&#x27;商品量&#x27;</span>,<span class="string">&#x27;工业产量&#x27;</span>,<span class="string">&#x27;销售量&#x27;</span>) </span><br><span class="line"><span class="keyword">AND</span> to_char(p.Prod_date,<span class="string">&#x27;yyyy&#x27;</span>) <span class="operator">=</span> to_char(sysdate,<span class="string">&#x27;yyyy&#x27;</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> p.Prod_date,p.INDEX_NAME</span><br></pre></td></tr></table></figure>

<p>查询结果为：</p>
<p>| Prod_date  | INDEX_NAME  |  ITEM_VALUE  |<br>| :—-：   | :—-:  | :—-:  |<br>| 2023-01-01 | 商品量   |   6154086  |<br>| 2023-01-01 | 工业产量 |   6308353  |<br>| 2023-01-01 | 销售量   |   7632859  |<br>| 2023-01-02 | 商品量   |   6260378  |<br>| 2023-01-02 | 工业产量 |   6341415  |<br>| 2023-01-02 | 销售量   |   7293744  |<br>| 2023-01-03 | 商品量   |   6396051  |<br>| 2023-01-03 | 工业产量 |   6350111  |<br>| 2023-01-03 | 销售量   |   7571332  |</p>
<p>我们需要把Index_Name字段横行排列，形成新的交叉表，以方便我们在后续的报表上使用，这个时候就要使用到pivot函数。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> p.Prod_date,p.INDEX_NAME ,p.ITEM_VALUE </span><br><span class="line">	<span class="keyword">FROM</span> PC_SPL_REPORT_INDEX_ITEM p</span><br><span class="line">	<span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">	<span class="keyword">AND</span> p.REPORT_ID <span class="operator">=</span> <span class="string">&#x27;16673814706151363&#x27;</span></span><br><span class="line">	<span class="keyword">AND</span> p.INDEX_NAME <span class="keyword">IN</span> (<span class="string">&#x27;商品量&#x27;</span>,<span class="string">&#x27;工业产量&#x27;</span>,<span class="string">&#x27;销售量&#x27;</span>) </span><br><span class="line">	<span class="keyword">AND</span> to_char(p.Prod_date,<span class="string">&#x27;yyyy&#x27;</span>) <span class="operator">=</span> to_char(sysdate,<span class="string">&#x27;yyyy&#x27;</span>)</span><br><span class="line">	<span class="keyword">ORDER</span> <span class="keyword">BY</span> p.Prod_date,p.INDEX_NAME</span><br><span class="line">)PIVOT</span><br><span class="line">(</span><br><span class="line"><span class="built_in">SUM</span>(ITEM_VALUE) <span class="keyword">AS</span> <span class="keyword">VALUE</span> <span class="keyword">FOR</span> INDEX_NAME <span class="keyword">IN</span> (<span class="string">&#x27;商品量&#x27;</span> <span class="keyword">AS</span> SPL,<span class="string">&#x27;工业产量&#x27;</span> <span class="keyword">AS</span> GYCL,<span class="string">&#x27;销售量&#x27;</span> <span class="keyword">AS</span> XSL )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>查询后的结果为：</p>
<p>| Prod_date  | SPL_VALUE  |  GYCL_VALUE  |  XSL_VALUE |<br>| :—-：   | :—-:  | :—-:  | :—-:  |<br>| 2023-01-01 |6154086	|6308353 |	7632859 |<br>| 2023-01-02 |6260378	|6341415 |	7293744 |<br>| 2023-01-03 |6396051	|6350111 |	7571332 |</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>除了透视pivot函数Oracle 11g还提供了反透视unpivot函数，可以将列转换为行。具体的使用还得看实际的业务场景了。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Toad for Oracle的安装记录。</title>
    <url>/2023/07/11/toad4oracle/</url>
    <content><![CDATA[<h4 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h4><p>安装Toad需要本地有一个Oracle的客户端，所有先去下载一个Oracle客户端。<a href="https://www.oracle.com/database/technologies/instant-client/microsoft-windows-32-downloads.html">下载地址</a><br>我这里下载一个Light(轻量)版的32位的客户端就好了。<br><img src="https://resources.kagerou.top/img/blog/oracledownload.webp" alt="oracle下载图片"></p>
<p>解压之后，在环境变量的PATH中添加你的Oracle客户端的路径。<br><img src="https://resources.kagerou.top/img/blog/oraclepath.webp" alt="path路径图片"></p>
<p>最后在network&#x2F;admin文件夹下在新建tnsnames.ora、sqlnet.ora、ldap.ora文件，内容可以为空。如果你懂的怎么配置或者已经有现成的配置，可以优先配置好。<br><img src="https://resources.kagerou.top/img/blog/network_admin.webp" alt="新建文件的图片"></p>
<h4 id="下载Toad软件"><a href="#下载Toad软件" class="headerlink" title="下载Toad软件"></a>下载Toad软件</h4><p>本网站暂不支持提供下载服务。建议去<a href="https://www.jb51.net/database/840251.html">jb51网站</a>中下载，点击下载地址-普通下载地址。注意甄别广告。</p>
<h4 id="安装Toad软件"><a href="#安装Toad软件" class="headerlink" title="安装Toad软件"></a>安装Toad软件</h4><p>解压下载完成的文件后，打开直接点击Setup_x86.exe开始安装引导程序。在同意条款之后，输入license。<br><code>License key</code> : CJ2PFCQ6P49Q4WHQT2D03GNTVX2AN5DG6FWD04YL4QW625KT391J9YF38VKB92SNBWNW-RU-BOARD-BD<br><code>Site message</code> : cr2384<br><img src="https://resources.kagerou.top/img/blog/license.webp" alt="License"><br>接着一路Next等待安装完成。</p>
<p>tips: 如果没有提前安装oracl客户端，在安装前检查时候会提示您，你可以暂时搁置安装进程，去配置好oracl客户端环境再来继续安装Toad。</p>
<h4 id="配置Toad软件"><a href="#配置Toad软件" class="headerlink" title="配置Toad软件"></a>配置Toad软件</h4><p><code>首先请获取到数据库相关的链接信息！</code></p>
<p>双击软件图标打开后，如果没有自动弹出配置数据库链接的对话框，您可以点击菜单栏的Session-New Connection。<br><img src="https://resources.kagerou.top/img/blog/NewConnection.webp" alt="New Connection"></p>
<p>在新建链接的右下角，点击TNSNAME Editor,新建一个TNSNAME信息，如果已经编辑了tnsnames.ora文件，可以忽略，这一步是在帮助不懂tnsnames.ora的人创建一个新的tnsnames.ora文件内容。<br><img src="https://resources.kagerou.top/img/blog/TNSNAMEEDITOR.webp" alt="TNSNAME Editor"></p>
<p>点击左上 add login record 按钮，添加一个新的登录履历。填写数据库登录的用户名&#x2F;密码，TNS选择上一步中配置的TNSNAME。<br><img src="https://resources.kagerou.top/img/blog/addloginrecord.webp" alt="add login record"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>Toad</tag>
      </tags>
  </entry>
  <entry>
    <title>切噜语(Kotlin版)，附带Java版</title>
    <url>/2023/07/19/qieru/</url>
    <content><![CDATA[<h4 id="切噜语介绍"><a href="#切噜语介绍" class="headerlink" title="切噜语介绍"></a>切噜语介绍</h4><h3><span id=".E5.88.87.E5.99.9C.E8.AF.AD"></span><span class="mw-headline" id="切噜语">切噜语</span></h3>
<table style="display: table; border-collapse: collapse; margin: auto; background-color:transparent;">
<tbody><tr>
<td style="vertical-align: top; color:#B2B7F2; font-size:36px; font-family:'Times New Roman',serif; font-weight:bold; text-align:left; padding:10px 10px; line-height:100%">“</td>
<td style="text-align: left; padding: 1em; vertical-align: middle;"><big><b><span style="color:#F164B0;"><span lang="ja">ちぇるーん♪</span><br><span lang="ja">ちぇるちぇる、ちぇちぇるぱ、ちぇるるるん！</span><br><span lang="ja">ちぇらるれ、ちぇらちぇら、ちぇるちぇぽぱぴ？</span></span></b></big></td>
<td style="vertical-align: bottom; color:#B2B7F2; font-size:36px; font-family:'Times New Roman',serif; font-weight:bold; text-align:left; padding:10px 10px; line-height:100%">”</td>
</tr>
</tbody></table>
<p><a href="https://mzh.moegirl.org.cn/%E5%85%AC%E4%B8%BB%E8%BF%9E%E7%BB%93Re:Dive/%E9%A3%8E%E9%97%B4%E5%8D%83%E7%88%B1%E7%91%A0" title="风间千爱瑠">千爱瑠</a>在剧情中所使用的一种不明所以的表达方式，其基本形态为千爱瑠的口头禅“<span style="color:#F164B0;"><ruby><rb data-id="template-ruby">切噜<span class="template-ruby-hidden">（</span></rb><rt style="font-size:0.75em"><span lang="ja">ちぇるーん</span></rt><span class="template-ruby-hidden">）</span></ruby></span>”，详见“<a href="https://mzh.moegirl.org.cn/%E5%85%AC%E4%B8%BB%E8%BF%9E%E7%BB%93Re:Dive/%E9%A3%8E%E9%97%B4%E5%8D%83%E7%88%B1%E7%91%A0" title="风间千爱瑠">风间千爱瑠</a>”。
</p>

<p>来源于<a href="https://mzh.moegirl.org.cn/%E5%85%AC%E4%B8%BB%E8%BF%9E%E7%BB%93Re:Dive/%E6%A2%97#%E5%88%87%E5%99%9C%E8%AF%AD">萌娘百科</a></p>
<h4 id="编码介绍"><a href="#编码介绍" class="headerlink" title="编码介绍"></a>编码介绍</h4><p>将汉字的UTF-8编码的前4位和后4位，分别对应16位长度的字符集中位置，拿到对应的字符重新编码成的一种加密语言。<br><img src="https://resources.kagerou.top/img/blog/qieru-encode.webp" alt="qieru"></p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>编码：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> QIERU =</span><br><span class="line">    arrayOf(<span class="string">&quot;切&quot;</span>, <span class="string">&quot;卟&quot;</span>, <span class="string">&quot;叮&quot;</span>, <span class="string">&quot;咧&quot;</span>, <span class="string">&quot;哔&quot;</span>, <span class="string">&quot;唎&quot;</span>, <span class="string">&quot;啪&quot;</span>, <span class="string">&quot;啰&quot;</span>, <span class="string">&quot;啵&quot;</span>, <span class="string">&quot;嘭&quot;</span>, <span class="string">&quot;噜&quot;</span>, <span class="string">&quot;噼&quot;</span>, <span class="string">&quot;巴&quot;</span>, <span class="string">&quot;拉&quot;</span>, <span class="string">&quot;蹦&quot;</span>, <span class="string">&quot;铃&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> qstr: String = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">//编码 encode</span></span><br><span class="line"><span class="keyword">val</span> str = <span class="string">&quot;七宝&quot;</span>.toByteArray()</span><br><span class="line">str.forEach &#123; it -&gt;</span><br><span class="line">    qstr += QIERU[it.toInt().and(<span class="number">15</span>)]</span><br><span class="line">    qstr += QIERU[it.toInt().shr(<span class="number">4</span>).and(<span class="number">15</span>)]</span><br><span class="line">&#125;</span><br><span class="line">println(qstr) <span class="comment">//哔蹦波噼咧波喇蹦蹦噜拉嘭</span></span><br></pre></td></tr></table></figure>

<p>解码：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> QIERU =</span><br><span class="line">    arrayOf(<span class="string">&quot;切&quot;</span>, <span class="string">&quot;卟&quot;</span>, <span class="string">&quot;叮&quot;</span>, <span class="string">&quot;咧&quot;</span>, <span class="string">&quot;哔&quot;</span>, <span class="string">&quot;唎&quot;</span>, <span class="string">&quot;啪&quot;</span>, <span class="string">&quot;啰&quot;</span>, <span class="string">&quot;啵&quot;</span>, <span class="string">&quot;嘭&quot;</span>, <span class="string">&quot;噜&quot;</span>, <span class="string">&quot;噼&quot;</span>, <span class="string">&quot;巴&quot;</span>, <span class="string">&quot;拉&quot;</span>, <span class="string">&quot;蹦&quot;</span>, <span class="string">&quot;铃&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> qstr = <span class="string">&quot;哔蹦波噼咧波喇蹦蹦噜拉嘭&quot;</span></span><br><span class="line"><span class="keyword">var</span> pstr: ByteArray = ByteArray(qstr.length / <span class="number">2</span>)</span><br><span class="line"><span class="comment">//解码时两个编码为一组</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until qstr.length step <span class="number">2</span>) &#123;</span><br><span class="line">    println(<span class="string">&quot;index: <span class="subst">$&#123;i / <span class="number">2</span>&#125;</span>,element1: <span class="subst">$&#123;qstr[i]&#125;</span>,element2: <span class="subst">$&#123;qstr[i + <span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    pstr[i / <span class="number">2</span>] = QIERU.indexOf(qstr[i].toString()).or(QIERU.indexOf(qstr[i + <span class="number">1</span>].toString()).shl(<span class="number">4</span>)).toByte()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> s = pstr.toString(Charsets.UTF_8)</span><br><span class="line">println(s) <span class="comment">//七宝</span></span><br></pre></td></tr></table></figure>

<p>Java版</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//回去翻数据库</span></span><br></pre></td></tr></table></figure>

<h4 id="基于狼宝机器人的实际应用"><a href="#基于狼宝机器人的实际应用" class="headerlink" title="基于狼宝机器人的实际应用"></a>基于狼宝机器人的实际应用</h4><p>通过两个关键词来判定是否触发相应功能。</p>
<p>编码：“切噜一下[内容]”</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">msg.startsWith(<span class="string">&quot;切噜一下&quot;</span>) -&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> QIERU =</span><br><span class="line">        arrayOf(<span class="string">&quot;切&quot;</span>, <span class="string">&quot;卟&quot;</span>, <span class="string">&quot;叮&quot;</span>, <span class="string">&quot;咧&quot;</span>, <span class="string">&quot;哔&quot;</span>, <span class="string">&quot;唎&quot;</span>, <span class="string">&quot;啪&quot;</span>, <span class="string">&quot;啰&quot;</span>, <span class="string">&quot;啵&quot;</span>, <span class="string">&quot;嘭&quot;</span>, <span class="string">&quot;噜&quot;</span>, <span class="string">&quot;噼&quot;</span>, <span class="string">&quot;巴&quot;</span>, <span class="string">&quot;拉&quot;</span>, <span class="string">&quot;蹦&quot;</span>, <span class="string">&quot;铃&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> qieru = msg.substring(<span class="number">4</span>,msg.length).replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> encode: String = <span class="string">&quot;切噜～♪切&quot;</span></span><br><span class="line">    qieru.toByteArray().forEach &#123;</span><br><span class="line">        encode += QIERU[it.toInt().and(<span class="number">15</span>)]</span><br><span class="line">        encode += QIERU[it.toInt().shr(<span class="number">4</span>).and(<span class="number">15</span>)]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.group.sendMessage(encode)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解码：切噜～♪切</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">msg.startsWith(<span class="string">&quot;切噜～♪切&quot;</span>) -&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> QIERU =</span><br><span class="line">        arrayOf(<span class="string">&quot;切&quot;</span>, <span class="string">&quot;卟&quot;</span>, <span class="string">&quot;叮&quot;</span>, <span class="string">&quot;咧&quot;</span>, <span class="string">&quot;哔&quot;</span>, <span class="string">&quot;唎&quot;</span>, <span class="string">&quot;啪&quot;</span>, <span class="string">&quot;啰&quot;</span>, <span class="string">&quot;啵&quot;</span>, <span class="string">&quot;嘭&quot;</span>, <span class="string">&quot;噜&quot;</span>, <span class="string">&quot;噼&quot;</span>, <span class="string">&quot;巴&quot;</span>, <span class="string">&quot;拉&quot;</span>, <span class="string">&quot;蹦&quot;</span>, <span class="string">&quot;铃&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> qieru = msg.substring(<span class="number">5</span>,msg.length).replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="comment">//todo 判断包含符号报错</span></span><br><span class="line">    <span class="keyword">var</span> decode: ByteArray = ByteArray(qieru.length / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until qieru.length step <span class="number">2</span>) &#123;</span><br><span class="line">        decode[i / <span class="number">2</span>] = QIERU.indexOf(qieru[i].toString()).or(QIERU.indexOf(qieru[i + <span class="number">1</span>].toString()).shl(<span class="number">4</span>)).toByte()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> s = decode.toString(Charsets.UTF_8)</span><br><span class="line">    <span class="keyword">this</span>.group.sendMessage(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>结束，下一篇</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
        <tag>utf-8</tag>
      </tags>
  </entry>
  <entry>
    <title>Vite 跨域问题中vite.config.ts的配置</title>
    <url>/2023/05/09/vite-proxy/</url>
    <content><![CDATA[<p><strong>问题描述：</strong><br>Access to XMLHttpRequest at ‘<a href="http://lxxx:9407/login">http://lxxx:9407/login</a>‘ from origin ‘<a href="http://localhost:8888/">http://localhost:8888</a>‘ has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource.</p>
<p><img src="http://rr8o9naqf.bkt.clouddn.com/blog/image-44.png" alt="error"><br>只需要配置vite.config.ts中的server-proxy选项。</p>
<p><strong>代码如下：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://xxl:9407&quot;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">&quot;&quot;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>使用：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> httpClinet = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;/api&#x27;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123; <span class="string">&#x27;Content-type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>baseURL处使用&#x2F;api来代替原来的链接路径就好了。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Vite</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>部署vscode server服务器</title>
    <url>/2023/05/10/vscode-server/</url>
    <content><![CDATA[<h3 id="vscode-server简介"><a href="#vscode-server简介" class="headerlink" title="vscode server简介"></a>vscode server简介</h3><p>&#x2F;&#x2F;TODO</p>
<h3 id="安装vscode-server"><a href="#安装vscode-server" class="headerlink" title="安装vscode server"></a>安装vscode server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://code-server.dev/install.sh | sh</span><br></pre></td></tr></table></figure>

<p>直接安装，安装好之后使用code-server就可以直接启动服务了</p>
<h3 id="修改配置文件-x2F-config-x2F-code-server-x2F-config-yaml"><a href="#修改配置文件-x2F-config-x2F-code-server-x2F-config-yaml" class="headerlink" title="修改配置文件 ~&#x2F;.config&#x2F;code-server&#x2F;config.yaml"></a>修改配置文件 ~&#x2F;.config&#x2F;code-server&#x2F;config.yaml</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">bind-addr:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:8080</span> <span class="comment">#设置IP权限和端口</span></span><br><span class="line"><span class="attr">auth:</span> <span class="string">password</span> <span class="comment">#设置认证方式</span></span><br><span class="line"><span class="attr">password:</span> <span class="number">12345679</span> <span class="comment">#设置登录密码</span></span><br><span class="line"><span class="attr">cert:</span> <span class="literal">false</span> <span class="comment">#默认</span></span><br></pre></td></tr></table></figure>

<p>访问方式为 ip:8080</p>
<h3 id="安装screen来实现后台运行"><a href="#安装screen来实现后台运行" class="headerlink" title="安装screen来实现后台运行"></a>安装screen来实现后台运行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install screen -y</span><br></pre></td></tr></table></figure>

<p>使用screen来新建一个视窗 code（名字随意不要与已有的视窗重复）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screen -R code </span><br></pre></td></tr></table></figure>

<p>在新的视窗里面启动code-server，启动成功之后，使用Ctrl + Alt + D 退出视窗返回主shell窗口。这样code-server就一直在后台运行了。</p>
<h3 id="nginx配置二级域名访问"><a href="#nginx配置二级域名访问" class="headerlink" title="nginx配置二级域名访问"></a>nginx配置二级域名访问</h3><h4 id="配置DNS解析"><a href="#配置DNS解析" class="headerlink" title="配置DNS解析"></a>配置DNS解析</h4><p>示例域名为 code.exmaple.com</p>
<p>在你的域名DNS解析控制台里面，添加code的A解析到你的服务器ip上。</p>
<p>如下图<br>【图片】</p>
<h4 id="安装nginx服务"><a href="#安装nginx服务" class="headerlink" title="安装nginx服务"></a>安装nginx服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install nginx -y</span><br></pre></td></tr></table></figure>

<h4 id="配置nginx服务"><a href="#配置nginx服务" class="headerlink" title="配置nginx服务"></a>配置nginx服务</h4><p>修改&#x2F;etc&#x2F;nginx&#x2F;nginx.conf文件,注释掉部分关于80端口的server描述。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># For more information on configuration, see:</span><br><span class="line">#   * Official English Documentation: http://nginx.org/en/docs/</span><br><span class="line">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span><br><span class="line"></span><br><span class="line">user nginx;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log /var/log/nginx/error.log;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line"></span><br><span class="line"># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span><br><span class="line">include /usr/share/nginx/modules/*.conf;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile            on;</span><br><span class="line">    tcp_nopush          on;</span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line"></span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    # Load modular configuration files from the /etc/nginx/conf.d directory.</span><br><span class="line">    # See http://nginx.org/en/docs/ngx_core_module.html#include</span><br><span class="line">    # for more information.</span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line"></span><br><span class="line">    # 从这里开始注释</span><br><span class="line">    # server &#123;</span><br><span class="line">    #    listen       80 default_server;</span><br><span class="line">    #    listen       [::]:80 default_server;</span><br><span class="line">    #    server_name  _;</span><br><span class="line">    #    root         /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">        # Load configuration files for the default server block.</span><br><span class="line">    #    include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #    &#125;</span><br><span class="line"></span><br><span class="line">    #    error_page 404 /404.html;</span><br><span class="line">    #        location = /40x.html &#123;</span><br><span class="line">    #    &#125;</span><br><span class="line"></span><br><span class="line">    #    error_page 500 502 503 504 /50x.html;</span><br><span class="line">    #        location = /50x.html &#123;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line">    #直到这里解释</span><br><span class="line"></span><br><span class="line"># Settings for a TLS enabled server.</span><br><span class="line">#</span><br><span class="line">#    server &#123;</span><br><span class="line">#        listen       443 ssl http2 default_server;</span><br><span class="line">#        listen       [::]:443 ssl http2 default_server;</span><br><span class="line">#        server_name  _;</span><br><span class="line">#        root         /usr/share/nginx/html;</span><br><span class="line">#</span><br><span class="line">#        ssl_certificate &quot;/etc/pki/nginx/server.crt&quot;;</span><br><span class="line">#        ssl_certificate_key &quot;/etc/pki/nginx/private/server.key&quot;;</span><br><span class="line">#        ssl_session_cache shared:SSL:1m;</span><br><span class="line">#        ssl_session_timeout  10m;</span><br><span class="line">#        ssl_ciphers PROFILE=SYSTEM;</span><br><span class="line">#        ssl_prefer_server_ciphers on;</span><br><span class="line">#</span><br><span class="line">#        # Load configuration files for the default server block.</span><br><span class="line">#        include /etc/nginx/default.d/*.conf;</span><br><span class="line">#</span><br><span class="line">#        location / &#123;</span><br><span class="line">#        &#125;</span><br><span class="line">#</span><br><span class="line">#        error_page 404 /404.html;</span><br><span class="line">#            location = /40x.html &#123;</span><br><span class="line">#        &#125;</span><br><span class="line">#</span><br><span class="line">#        error_page 500 502 503 504 /50x.html;</span><br><span class="line">#            location = /50x.html &#123;</span><br><span class="line">#        &#125;</span><br><span class="line">#    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;code.exmaple.com.conf 配置文件，将code server的8080端口转发到80端口。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen          80 default_server;</span><br><span class="line">        listen          [::]:80 default_server;</span><br><span class="line">        server_name     code.exmaple.com;</span><br><span class="line">        #auth_basic      &quot;Plz input qibao‘s password&quot;;</span><br><span class="line">        #auth_basic_user_file &quot;/usr/local/nginx/pass&quot;;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                #root   html;</span><br><span class="line">                proxy_pass http:// 127.0.0.1:8080;</span><br><span class="line"></span><br><span class="line">                proxy_set_header Host $host;</span><br><span class="line">                proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">                proxy_set_header Connection upgrade;</span><br><span class="line">                proxy_set_header Accept-Encoding gzip;</span><br><span class="line">                #</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启nginx服务或者重载nginx配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart nginx</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>

<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>你就可以同过code.exmaple.com来直接访问你的code server服务了，在登录界面输入配置文件中的密码既可以开始使用code server。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库的缓存管理机制</title>
    <url>/2023/08/02/oracledatabase-sga/</url>
    <content><![CDATA[<p>在之前的学习中，有幸学习过有关SGA的一些内容，但都是简单的介绍了其中的模块和对应的作用，当时也是刚接触到Oracle数据库，所以听下来都是一知半解，最近又接触到GPT之后，才想着用机器人来检索一下这方面的知识。</p>
<h3 id="Oracle的缓存管理机制"><a href="#Oracle的缓存管理机制" class="headerlink" title="Oracle的缓存管理机制"></a>Oracle的缓存管理机制</h3><p>Oracle数据库的内存管理机制是基于SGA（System Global Area，系统全局区域）和PGA（Program Global Area，程序全局区域）的概念。</p>
<ol>
<li><p>SGA（System Global Area）：<br>SGA是Oracle数据库实例在内存中分配的一块共享内存区域，用于存储全局的数据和结构。SGA包括以下关键组件：</p>
<ul>
<li>数据缓冲区（Data Buffer Cache）：用于缓存数据库块（数据和索引）的内存区域，减少磁盘I&#x2F;O操作。</li>
<li>共享池（Shared Pool）：存储共享的SQL和PL&#x2F;SQL代码、数据字典缓存和共享游标等，提高SQL执行效率。</li>
<li>重做日志缓冲区（Redo Log Buffer）：用于缓存事务的重做日志信息，以支持数据库的恢复和故障恢复。</li>
<li>大池（Large Pool）：存储较大的内存块，用于处理特定的操作，如备份和并行查询等。</li>
<li>Java池（Java Pool）：用于存储Java对象和Java执行环境相关的内存结构。</li>
<li>其他组件：包括SGA目标、缓冲区管理器等。</li>
</ul>
<p>Oracle数据库管理员可以通过参数调整来配置SGA的大小和组件的分配比例，以满足特定的性能需求。</p>
</li>
<li><p>PGA（Program Global Area）：<br>PGA是每个Oracle进程（如Server进程和后台进程）独立分配的内存区域，用于存储会话级别的数据和结构。PGA包括以下关键组件：</p>
<ul>
<li>排序区（Sort Area）：用于排序操作的内存区域。</li>
<li>连接区（Session Memory）：存储会话级别的变量、游标和会话状态等信息。</li>
<li>临时表区（Temporary Table Area）：用于存储临时表的数据。</li>
<li>其他组件：包括SQL Work Area、PL&#x2F;SQL表和游标等。</li>
</ul>
<p>PGA的大小和分配是由Oracle自动管理的，但管理员可以通过参数调整来影响PGA的行为和资源分配。</p>
</li>
</ol>
<p>通过合理配置和管理SGA和PGA，可以优化Oracle数据库的性能和资源利用率。管理员可以根据系统的负载、应用程序的需求和硬件资源的限制来进行调整，并监控内存使用情况以及性能指标，以确保数据库的稳定和高效运行。</p>
<h3 id="什么是SGA"><a href="#什么是SGA" class="headerlink" title="什么是SGA"></a>什么是SGA</h3><p>SGA（System Global Area）是Oracle数据库实例在内存中分配的一块共享内存区域，包括多个组件，每个组件都有不同的作用和功能。以下是SGA中每个组件的详细介绍：</p>
<ol>
<li><p>数据缓冲区（Data Buffer Cache）：<br>数据缓冲区是SGA中最重要的组件之一，用于缓存数据库块（数据和索引）的内存区域。它的主要作用是减少磁盘I&#x2F;O操作，提高数据库的读取性能。当用户请求数据时，Oracle首先在数据缓冲区中查找数据块，如果找到则直接返回给用户，避免了磁盘读取的开销。</p>
</li>
<li><p>共享池（Shared Pool）：<br>共享池存储了共享的SQL和PL&#x2F;SQL代码、数据字典缓存和共享游标等。它的主要作用是提高SQL执行的效率和共享可重用的内存结构。当用户提交SQL语句时，Oracle首先检查共享池中是否存在相同的SQL语句，如果存在则直接使用已编译的执行计划，避免了重复的解析和优化过程。</p>
</li>
<li><p>重做日志缓冲区（Redo Log Buffer）：<br>重做日志缓冲区用于缓存事务的重做日志信息。在每个事务提交时，相关的重做日志记录会被写入重做日志缓冲区，然后由后台进程将其刷新到磁盘上的重做日志文件中。重做日志缓冲区的作用是支持数据库的恢复和故障恢复，确保事务的持久性和数据的一致性。</p>
</li>
<li><p>大池（Large Pool）：<br>大池是一个可选的组件，用于存储较大的内存块，主要用于处理特定的操作，如备份和并行查询等。大池的作用是提供额外的内存空间，以减轻SGA的压力，特别是在执行复杂操作时需要更多的临时内存空间。</p>
</li>
<li><p>Java池（Java Pool）：<br>Java池用于存储Java对象和Java执行环境相关的内存结构，主要用于支持Oracle数据库中的Java应用程序和Java虚拟机（JVM）。Java池的作用是提供Java执行所需的内存资源，包括Java类定义、Java堆栈和Java对象等。</p>
</li>
</ol>
<p>除了上述主要组件之外，SGA还包括其他一些辅助组件，如SGA目标（SGA Target）、缓冲区管理器（Buffer Cache Manager）等。SGA目标是一种自动管理机制，用于根据系统负载和资源需求动态调整SGA的大小。缓冲区管理器负责管理数据缓冲区的内容和替换策略，以保证高效的数据访问和存储。</p>
<p>通过合理配置和调整SGA的大小和组件的分配比例，可以根据系统的需求和资源限制来优化Oracle数据库的性能和资源利用率。管理员可以根据实际情况进行监控和调整，以确保SGA的稳定和高效运行。</p>
<h4 id="什么是数据缓冲区"><a href="#什么是数据缓冲区" class="headerlink" title="什么是数据缓冲区"></a>什么是数据缓冲区</h4><p>数据缓冲区（Data Buffer Cache）是Oracle数据库SGA（System Global Area）中的一个组件，用于缓存数据库块（数据和索引）的内存区域。数据缓冲区主要存储以下类型的数据：</p>
<ol>
<li><p>数据块（Data Blocks）：<br>数据块是Oracle数据库中最基本的存储单位，用于存储表、索引和簇等对象的数据。当用户请求读取或修改表中的数据时，相关的数据块会被加载到数据缓冲区中。数据块的大小通常是Oracle数据库块大小的整数倍（通常为8KB），并且数据块是按需读取和写入的。</p>
</li>
<li><p>索引块（Index Blocks）：<br>索引块用于存储数据库索引的数据。索引是一种数据结构，用于加快对表数据的访问速度。当用户执行查询语句时，如果涉及到索引的使用，相关的索引块会被加载到数据缓冲区中，以提供更快的索引访问。</p>
</li>
<li><p>控制块（Control Blocks）：<br>控制块包括数据块头（Data Block Header）和索引块头（Index Block Header）等。它们存储了有关数据块和索引块的元数据信息，如块的状态、版本号、块的大小等。控制块通常也会被加载到数据缓冲区中，以支持对数据块和索引块的管理和访问。</p>
</li>
</ol>
<p>当用户请求读取或修改数据库中的数据时，Oracle数据库会首先检查数据缓冲区中是否已经存在相应的数据块或索引块。如果存在，则直接从数据缓冲区中读取或修改数据，避免了磁盘I&#x2F;O操作，从而提高了数据库的读取性能。如果数据缓冲区中不存在所需的数据块或索引块，则需要从磁盘读取相应的块到数据缓冲区中，然后再进行数据访问或修改。</p>
<p>通过数据缓冲区，Oracle数据库能够在内存中缓存常用的数据块和索引块，以提供更快的数据访问速度，并减少对磁盘的频繁读写，从而提高数据库的性能和响应速度。</p>
<h4 id="数据缓冲区的数据是如何更替的？"><a href="#数据缓冲区的数据是如何更替的？" class="headerlink" title="数据缓冲区的数据是如何更替的？"></a>数据缓冲区的数据是如何更替的？</h4><p>数据缓冲区中数据块的替换是通过缓冲区管理器（Buffer Cache Manager）来进行的。缓冲区管理器负责管理数据缓冲区的内容和替换策略，以确保高效的数据访问和存储。</p>
<p>Oracle数据库使用了一种称为LRU（Least Recently Used，最近最少使用）算法来进行数据块的替换。LRU算法基于以下原则：最近被访问的数据块是最有可能在未来被再次访问的，而较长时间没有被访问的数据块则可能被替换出缓冲区。</p>
<p>当需要将一个新的数据块加载到数据缓冲区时，缓冲区管理器会首先检查数据缓冲区中是否有空闲的位置。如果有空闲位置，则将新的数据块直接放入空闲位置，并更新相关的元数据信息。</p>
<p>如果数据缓冲区已满，缓冲区管理器需要选择一个合适的数据块进行替换。它会根据LRU算法选择最久未被访问的数据块进行替换。具体的替换过程如下：</p>
<ol>
<li><p>缓冲区管理器维护一个链表，称为LRU链表（Least Recently Used List），用于记录数据缓冲区中数据块的访问顺序。最近被访问的数据块位于链表的前端，而最久未被访问的数据块位于链表的末尾。</p>
</li>
<li><p>当需要替换一个数据块时，缓冲区管理器会选择链表末尾的数据块进行替换，即选择最久未被访问的数据块。</p>
</li>
<li><p>替换选中的数据块之前，缓冲区管理器会将其中的脏数据（已被修改但尚未写回磁盘的数据）写回到磁盘，以确保数据的持久性。</p>
</li>
<li><p>替换完成后，新的数据块会被加载到空出的位置，并更新LRU链表的顺序，将新的数据块放置在链表的前端。</p>
</li>
</ol>
<p>通过使用LRU算法，Oracle数据库能够保持数据缓冲区中的常用数据块，提高数据的访问速度。同时，较长时间未被访问的数据块会被替换出缓冲区，以保持缓冲区的有效利用和适应变化的访问模式。</p>
<h4 id="ARC自适应缓存交替算法"><a href="#ARC自适应缓存交替算法" class="headerlink" title="ARC自适应缓存交替算法"></a>ARC自适应缓存交替算法</h4><p>ARC（Adaptive Replacement Cache，自适应缓存交替）算法是一种用于替换数据缓冲区中数据块的混合算法，它结合了LRU算法和LFU算法的特性，旨在提供更好的缓存性能。</p>
<p>ARC算法的设计目标是在不同的访问模式下自适应地选择最适合的替换策略。它维护两个列表：T1和T2。T1列表用于记录最近被访问的数据块，类似于LRU算法；T2列表用于记录最常被访问的数据块，类似于LFU算法。</p>
<p>ARC算法的替换过程如下：</p>
<ol>
<li><p>当需要替换一个数据块时，ARC算法首先检查T1列表，如果数据块在T1列表中，则选择最近未被访问的数据块进行替换，类似于LRU算法。</p>
</li>
<li><p>如果数据块不在T1列表中，ARC算法会检查T2列表。如果数据块在T2列表中，则选择最近未被访问的数据块进行替换，类似于LRU算法。</p>
</li>
<li><p>如果数据块既不在T1列表中也不在T2列表中，ARC算法需要根据当前的访问模式来进行调整。它会根据两个列表的大小比例来判断当前的访问模式是偏向于LRU还是LFU。如果T1列表的大小比例较大，说明当前偏向于LRU访问模式，ARC算法会选择从T1列表中选择最近未被访问的数据块进行替换。如果T2列表的大小比例较大，说明当前偏向于LFU访问模式，ARC算法会选择从T2列表中选择最近未被访问的数据块进行替换。</p>
</li>
<li><p>替换完成后，ARC算法会根据替换的结果来调整T1和T2列表的大小，以适应不同的访问模式。如果替换的数据块来自T1列表，ARC算法会将一部分T1列表的数据块移动到T2列表中。如果替换的数据块来自T2列表，ARC算法会将一部分T2列表的数据块移动到T1列表中。</p>
</li>
</ol>
<p>通过自适应地选择LRU和LFU替换策略，ARC算法能够根据实际的访问模式来优化数据缓冲区的性能。它可以适应不同的访问模式，提供更好的缓存命中率和数据访问性能。</p>
<h4 id="其他更替算法"><a href="#其他更替算法" class="headerlink" title="其他更替算法"></a>其他更替算法</h4><p>除了LRU算法，Oracle数据库还支持其他一些替换算法来管理数据缓冲区中的数据块。以下是其中几种常见的算法：</p>
<ol>
<li><p>MRU（Most Recently Used，最近最常使用）算法：<br>MRU算法与LRU算法相反，它选择最近被访问的数据块进行替换。MRU算法假设最近被访问的数据块是最有可能在未来被再次访问的，因此选择最近被访问的数据块进行替换。</p>
</li>
<li><p>LFU（Least Frequently Used，最不经常使用）算法：<br>LFU算法根据数据块被访问的频率来进行替换。它记录每个数据块被访问的次数，并选择访问次数最少的数据块进行替换。LFU算法适用于一些访问模式呈现频繁变化的场景。</p>
</li>
<li><p>LRU-K算法：<br>LRU-K算法是对LRU算法的一种改进。它考虑了数据块的历史访问模式，除了最近被访问的数据块外，还考虑了最近K次访问的数据块。通过增加历史访问的考虑，LRU-K算法可以更好地适应特定的访问模式。</p>
</li>
</ol>
<p>这些替换算法的选择取决于数据库管理员根据应用程序的访问模式和性能需求进行配置。Oracle数据库默认使用LRU算法，因为它在大多数情况下能够提供良好的性能。但在某些特殊情况下，根据实际需求选择其他算法可能会更加合适。</p>
<h4 id="如何修改数据缓冲区的算法策略？"><a href="#如何修改数据缓冲区的算法策略？" class="headerlink" title="如何修改数据缓冲区的算法策略？"></a>如何修改数据缓冲区的算法策略？</h4><p>要修改Oracle数据库中数据缓冲区的算法策略，您可以采取以下步骤：</p>
<ol>
<li><p>确定当前的缓冲区算法策略：首先，您需要确定当前数据库实例正在使用的缓冲区算法策略。您可以查询数据库的参数设置或使用以下命令来获取当前的缓冲区算法策略：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">PARAMETER</span> db_cache_advice</span><br></pre></td></tr></table></figure>

<p>该参数显示了当前数据库实例推荐的缓冲区大小和算法策略。</p>
</li>
<li><p>修改缓冲区算法策略：要修改缓冲区算法策略，您可以使用<code>ALTER SYSTEM</code>语句来更改相关的参数设置。以下是一些常用的参数和示例：</p>
<ul>
<li><p><code>DB_CACHE_SIZE</code>：该参数用于设置数据库实例的缓冲区大小。您可以根据实际需求调整缓冲区的大小，以适应数据库的工作负载。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> <span class="keyword">SET</span> DB_CACHE_SIZE <span class="operator">=</span> <span class="operator">&lt;</span>size<span class="operator">&gt;</span> [G<span class="operator">|</span>M<span class="operator">|</span>K];</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>DB_KEEP_CACHE_SIZE</code>：该参数用于设置保留缓冲区的大小。保留缓冲区用于存储经常访问的数据块，以提高缓存命中率。您可以根据常用数据块的大小和访问模式来调整保留缓冲区的大小。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> <span class="keyword">SET</span> DB_KEEP_CACHE_SIZE <span class="operator">=</span> <span class="operator">&lt;</span>size<span class="operator">&gt;</span> [G<span class="operator">|</span>M<span class="operator">|</span>K];</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>DB_RECYCLE_CACHE_SIZE</code>：该参数用于设置回收缓冲区的大小。回收缓冲区用于存储不常访问的数据块，以减少缓冲区的浪费。您可以根据不常用数据块的大小和访问模式来调整回收缓冲区的大小。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> <span class="keyword">SET</span> DB_RECYCLE_CACHE_SIZE <span class="operator">=</span> <span class="operator">&lt;</span>size<span class="operator">&gt;</span> [G<span class="operator">|</span>M<span class="operator">|</span>K];</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>DB_2K_CACHE_SIZE</code>、<code>DB_4K_CACHE_SIZE</code>、<code>DB_8K_CACHE_SIZE</code>、<code>DB_16K_CACHE_SIZE</code>、<code>DB_32K_CACHE_SIZE</code>：这些参数用于设置不同大小数据块的缓冲区大小。您可以根据不同大小数据块的访问模式来调整相应缓冲区的大小。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> <span class="keyword">SET</span> DB_2K_CACHE_SIZE <span class="operator">=</span> <span class="operator">&lt;</span>size<span class="operator">&gt;</span> [G<span class="operator">|</span>M<span class="operator">|</span>K];</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> <span class="keyword">SET</span> DB_4K_CACHE_SIZE <span class="operator">=</span> <span class="operator">&lt;</span>size<span class="operator">&gt;</span> [G<span class="operator">|</span>M<span class="operator">|</span>K];</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> <span class="keyword">SET</span> DB_8K_CACHE_SIZE <span class="operator">=</span> <span class="operator">&lt;</span>size<span class="operator">&gt;</span> [G<span class="operator">|</span>M<span class="operator">|</span>K];</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> <span class="keyword">SET</span> DB_16K_CACHE_SIZE <span class="operator">=</span> <span class="operator">&lt;</span>size<span class="operator">&gt;</span> [G<span class="operator">|</span>M<span class="operator">|</span>K];</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> <span class="keyword">SET</span> DB_32K_CACHE_SIZE <span class="operator">=</span> <span class="operator">&lt;</span>size<span class="operator">&gt;</span> [G<span class="operator">|</span>M<span class="operator">|</span>K];</span><br></pre></td></tr></table></figure></li>
</ul>
<p>注意：在修改参数之前，请确保您对数据库的工作负载和访问模式有一定的了解，并根据实际需求进行调整。</p>
</li>
<li><p>重新启动数据库实例：修改缓冲区算法策略后，您需要重新启动数据库实例以使更改生效。</p>
</li>
</ol>
<p>请注意，在修改数据库参数之前，请确保您具备适当的权限，并在生产环境中进行谨慎测试和评估。修改缓冲区算法策略可能会对数据库性能产生影响，因此建议在进行任何更改之前备份数据库并进行充分测试。</p>
<h4 id="什么是共享池？"><a href="#什么是共享池？" class="headerlink" title="什么是共享池？"></a>什么是共享池？</h4><p>共享池（Shared Pool）是Oracle数据库中的一个重要组件，用于缓存和共享SQL语句的执行计划、共享游标、共享SQL区域和共享PL&#x2F;SQL代码等重要结构。它位于数据库系统全局区域（System Global Area，SGA）内，用于提高数据库的性能和资源利用率。</p>
<p>共享池主要包括以下几个重要的组件：</p>
<ol>
<li><p>SQL区域（SQL Area）：共享池中的SQL区域用于缓存SQL语句的解析信息、执行计划和运行时统计信息。当应用程序执行一个SQL语句时，数据库会首先检查共享池中是否存在相同的SQL语句。如果存在，数据库可以重用已经解析过的SQL语句，从而避免重复的解析和优化过程，提高执行效率。</p>
</li>
<li><p>共享游标（Shared Cursor）：共享池还用于缓存共享游标，这些游标是数据库为SQL语句分配的内部结构，用于执行和管理SQL语句的执行计划和结果集。共享游标的缓存可以减少游标的重复分配和释放操作，提高数据库的性能和资源利用率。</p>
</li>
<li><p>PL&#x2F;SQL代码区域（PL&#x2F;SQL Code Area）：共享池中还包括一个专门用于缓存共享PL&#x2F;SQL代码的区域。PL&#x2F;SQL代码区域用于存储经常使用的PL&#x2F;SQL存储过程、函数和包等对象的编译代码，以便在需要时可以重用这些编译代码，提高执行效率。</p>
</li>
</ol>
<p>通过共享池，Oracle数据库可以重用已经解析过的SQL语句、共享游标和PL&#x2F;SQL代码，从而减少系统资源的消耗，提高数据库的性能和响应速度。共享池的大小可以通过调整相关的数据库参数来进行配置，以满足具体应用的需求。</p>
<p>七宝言：共享池里面最关心的应该是就是执行计划的内容了，之后再单独写一篇关于执行计划和对应优化的内容。</p>
<h4 id="什么是重做日志缓冲区？"><a href="#什么是重做日志缓冲区？" class="headerlink" title="什么是重做日志缓冲区？"></a>什么是重做日志缓冲区？</h4><p>重做日志缓冲区（Redo Log Buffer）是数据库管理系统中的一个重要组件，用于记录事务对数据库所做的更改操作。下面是对重做日志缓冲区的介绍：</p>
<ol>
<li><p>定义：<br>重做日志缓冲区是数据库管理系统中的一块内存区域，用于临时存储事务对数据库所做的更改操作。当事务提交或数据库发生故障时，重做日志缓冲区中的数据将被写入到磁盘上的重做日志文件中，以确保数据的持久性和一致性。</p>
</li>
<li><p>功能：<br>重做日志缓冲区的主要功能是记录事务对数据库的更改操作，包括插入、更新和删除等操作。它的作用是将这些更改操作以日志的形式保存下来，以便在数据库发生故障时进行恢复。通过将更改操作记录到重做日志缓冲区中，可以避免频繁地写入磁盘，提高数据库的性能。</p>
</li>
<li><p>写入策略：<br>重做日志缓冲区的数据在内存中进行写入，并不直接写入磁盘。数据库管理系统会根据一定的策略将重做日志缓冲区中的数据写入到磁盘上的重做日志文件中。常见的写入策略包括：</p>
<ul>
<li>基于事务提交：当事务提交时，相关的重做日志缓冲区数据将被写入磁盘。</li>
<li>基于日志刷新：当重做日志缓冲区满或数据库系统空闲时，将缓冲区中的数据写入磁盘。</li>
<li>基于时间间隔：定期将重做日志缓冲区中的数据写入磁盘，无论事务是否提交。</li>
</ul>
</li>
<li><p>重做日志文件：<br>重做日志缓冲区中的数据在写入磁盘时，会被追加到重做日志文件中。重做日志文件记录了数据库中所有事务的更改操作，以及其发生的顺序。这些日志文件是循环使用的，当一个日志文件写满后，会继续写入下一个日志文件。数据库管理系统会定期将已经提交的事务的日志文件进行归档，以释放磁盘空间。</p>
</li>
</ol>
<p>总结：<br>重做日志缓冲区是数据库管理系统中的一个关键组件，用于记录事务对数据库的更改操作。它的作用是确保数据的持久性和一致性，并在数据库发生故障时进行恢复。通过将更改操作记录到重做日志缓冲区中，可以提高数据库的性能并减少频繁的磁盘写入操作。</p>
<h4 id="重做日志文件的有效期"><a href="#重做日志文件的有效期" class="headerlink" title="重做日志文件的有效期"></a>重做日志文件的有效期</h4><p>在Oracle数据库中，重做日志文件的有效期是相对较短的，通常是几天到几周的时间范围。有效期的具体长度取决于多个因素，包括数据库的活动水平、重做日志文件的大小和数量、数据库的恢复策略以及数据库管理员的配置设置。</p>
<p>Oracle数据库使用了一种称为”重做日志切换”（Redo Log Switch）的机制来管理重做日志文件的切换和重用。当当前组的重做日志文件被写满或数据库需要切换到下一个组时，数据库会自动进行重做日志切换。这意味着旧的重做日志文件将不再被使用，并可以被重复利用。</p>
<p>数据库管理员可以配置数据库的日志切换频率和重做日志文件的大小，以满足数据库的需求。通常情况下，为了保证数据库的恢复能力和故障恢复能力，数据库管理员会确保有足够的重做日志文件可供使用，并设置适当的重做日志文件大小和数量。</p>
<p>需要注意的是，如果数据库的活动水平很高或者进行了大量的事务更改操作，重做日志文件可能会更快地被写满和切换。相反，如果数据库的活动水平较低，重做日志文件可能会保持较长时间的有效期。</p>
<p>总结来说，重做日志文件的有效期在Oracle数据库中通常是几天到几周的范围，具体取决于数据库的活动水平和管理员的配置设置。数据库管理员需要根据实际情况进行适当的配置和管理，以确保数据库的恢复能力和故障恢复能力。</p>
<h4 id="如何设置重做日志文件大小和数量。"><a href="#如何设置重做日志文件大小和数量。" class="headerlink" title="如何设置重做日志文件大小和数量。"></a>如何设置重做日志文件大小和数量。</h4><p>在Oracle数据库中，可以通过以下步骤来设置重做日志文件的大小和数量：</p>
<ol>
<li><p>查询当前的重做日志配置：<br>使用以下SQL语句查询当前的重做日志配置信息：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">GROUP</span>#, THREAD#, SEQUENCE#, ARCHIVED, STATUS, <span class="keyword">MEMBER</span>, BYTES<span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span> <span class="keyword">AS</span> SIZE_MB</span><br><span class="line"><span class="keyword">FROM</span> V$LOG;</span><br></pre></td></tr></table></figure>
</li>
<li><p>确定重做日志文件的大小：<br>根据数据库的需求和性能考虑，确定每个重做日志文件的大小。一般建议将重做日志文件大小设置为几百兆字节（MB）到几千兆字节（GB）之间。</p>
</li>
<li><p>确定重做日志文件的数量：<br>根据数据库的活动水平和性能需求，确定需要配置的重做日志文件的数量。一般建议至少配置两到三个重做日志组，每个组包含多个重做日志文件。</p>
</li>
<li><p>创建新的重做日志组：<br>使用以下SQL语句创建新的重做日志组：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE <span class="keyword">ADD</span> LOGFILE <span class="keyword">GROUP</span> <span class="operator">&lt;</span>group_number<span class="operator">&gt;</span> (<span class="string">&#x27;&lt;log_file_1&gt;&#x27;</span>, <span class="string">&#x27;&lt;log_file_2&gt;&#x27;</span>, <span class="string">&#x27;&lt;log_file_3&gt;&#x27;</span>) SIZE <span class="operator">&lt;</span>size<span class="operator">&gt;</span> [G<span class="operator">|</span>M];</span><br></pre></td></tr></table></figure>

<p>其中，<code>&lt;group_number&gt;</code>是组的编号，<code>&lt;log_file_1&gt;</code>, <code>&lt;log_file_2&gt;</code>, <code>&lt;log_file_3&gt;</code>是重做日志文件的路径和名称，<code>&lt;size&gt;</code>是重做日志文件的大小。</p>
</li>
<li><p>激活新的重做日志组：<br>使用以下SQL语句激活新的重做日志组：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE SWITCH LOGFILE;</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证新的重做日志配置：<br>使用步骤1中的SQL语句再次查询重做日志配置，确保新的重做日志组已经生效。</p>
</li>
</ol>
<p>需要注意的是，对于正在运行的生产数据库，更改重做日志配置可能需要谨慎操作，并且可能需要在数据库维护窗口或离线期间进行。在进行任何更改之前，建议备份数据库并参考Oracle官方文档以获取更详细的指导和最佳实践。</p>
<p>以上是一般设置重做日志文件大小和数量的步骤，具体的配置和调整应根据实际情况和需求进行。</p>
<h4 id="如果备用数据库需要定时同步主数据库的数据，是否可以使用重做日志文件来实现？"><a href="#如果备用数据库需要定时同步主数据库的数据，是否可以使用重做日志文件来实现？" class="headerlink" title="如果备用数据库需要定时同步主数据库的数据，是否可以使用重做日志文件来实现？"></a>如果备用数据库需要定时同步主数据库的数据，是否可以使用重做日志文件来实现？</h4><p>是的，备用数据库可以使用重做日志文件来实现与主数据库的数据同步。这种方法被称为基于重做日志的数据复制或基于日志的数据复制。</p>
<p>基于重做日志的数据复制涉及以下步骤：</p>
<ol>
<li><p>主数据库记录重做日志：<br>在主数据库上，所有的事务更改操作都会被记录到重做日志文件中。这些日志记录包含了对数据库的修改操作的详细信息。</p>
</li>
<li><p>传输重做日志：<br>备用数据库通过某种方式获取主数据库的重做日志文件。这可以通过网络传输、共享存储或其他数据传输机制来完成。</p>
</li>
<li><p>应用重做日志：<br>备用数据库将接收到的重做日志文件应用到自身的数据库中。这个过程涉及将重做日志中的事务更改操作重新应用到备用数据库中，以使备用数据库与主数据库保持一致。</p>
</li>
<li><p>同步延迟：<br>由于网络传输和应用重做日志的过程需要一定的时间，备用数据库的数据可能会有一定的同步延迟。这意味着备用数据库中的数据可能不是实时的，而是稍微滞后于主数据库。</p>
</li>
</ol>
<p>基于重做日志的数据复制提供了较高的数据一致性和完整性，因为它记录了主数据库上发生的所有事务更改操作，并将其应用到备用数据库中。在主数据库发生故障或不可用时，备用数据库可以接管并继续提供服务。</p>
<p>需要注意的是，实施基于重做日志的数据复制需要考虑网络带宽、传输安全性、日志应用的性能等因素。此外，备用数据库的配置和设置也需要与主数据库保持一致，以确保数据的一致性和可用性。</p>
<p>总结来说，基于重做日志的数据复制是一种常见的方法，可用于实现备用数据库与主数据库之间的数据同步。这种方法可以提供较高的数据一致性和完整性，并在主数据库故障时提供故障转移和容灾能力。</p>
<h4 id="什么是大池？"><a href="#什么是大池？" class="headerlink" title="什么是大池？"></a>什么是大池？</h4><p>大池是SGA的一个可选组件，它提供了一块专门用于支持特定功能和操作的内存区域。大池的主要作用是提供额外的共享内存，用于支持一些需要较大内存缓冲区的功能，如备份和恢复、并行查询、共享服务器进程（Shared Server Processes）等。</p>
<p>大池的主要特点和功能包括：</p>
<ol>
<li><p>备份和恢复：大池用于存储备份和恢复操作期间使用的内存结构，如备份缓冲区（Backup Buffer）和恢复管理区（Recovery Manager Area）。这些结构可以提高备份和恢复的性能和效率。</p>
</li>
<li><p>并行查询：在执行并行查询时，大池用于存储并行执行操作所需的内存结构，如并行执行消息缓冲区（Parallel Execution Message Buffers）和并行执行服务器（Parallel Execution Servers）。这些结构可以提高并行查询的效率和扩展性。</p>
</li>
<li><p>共享服务器进程：在使用共享服务器架构（Shared Server Architecture）时，大池用于存储共享服务器进程所需的内存结构，如共享池（Shared Pool）和会话信息（Session Information）。这些结构可以提高共享服务器的性能和资源利用率。</p>
</li>
</ol>
<p>为了启用大池，需要在数据库的初始化参数文件（init.ora或spfile）中设置相关的参数，如<code>LARGE_POOL_SIZE</code>。通过适当配置大池的大小，可以根据数据库的需求提供足够的内存来支持备份和恢复、并行查询和共享服务器等功能。</p>
<p>需要注意的是，大池的大小应根据实际需求和数据库的工作负载进行调整。如果数据库不需要备份和恢复、并行查询或共享服务器功能，或者已经使用其他内存区域满足了这些需求，那么大池可以不进行配置或设置为较小的值。</p>
<p>总结来说，大池是Oracle数据库中SGA的一个可选组件，用于提供额外的共享内存来支持备份和恢复、并行查询和共享服务器等功能。通过适当配置大池的大小，可以根据数据库的需求提供足够的内存支持这些功能，并提高数据库的性能和效率。</p>
<h4 id="什么是JAVA池？"><a href="#什么是JAVA池？" class="headerlink" title="什么是JAVA池？"></a>什么是JAVA池？</h4><p>Java池是SGA中的一个可选组件，用于存储和管理Java对象和Java执行环境所需的内存。它主要用于支持Oracle数据库中的Java相关功能，如Java存储过程、Java触发器、Java类和Java应用程序等。</p>
<p>Java池的主要作用是提供一个专门的内存区域来存放Java对象的定义和实例。它包括以下两个主要部分：</p>
<ol>
<li><p>Java对象池（Java Object Pool）：Java对象池用于存储已加载的Java类的定义和实例。当数据库中的Java程序被调用时，相关的Java类和对象将被加载到Java对象池中，并在需要时进行重用。这样可以提高Java程序的性能和执行效率。</p>
</li>
<li><p>Java执行环境（Java Execution Environment）：Java执行环境是Java池中的另一个重要组成部分，用于支持Java程序的执行和运行。它包括Java虚拟机（Java Virtual Machine，JVM）和与Java相关的运行时环境。Java执行环境提供了必要的资源和功能，以便在数据库中执行Java程序。</p>
</li>
</ol>
<p>通过适当配置Java池的大小，可以根据数据库的需求提供足够的内存来支持Java相关功能。可以使用初始化参数文件（init.ora或spfile）中的相关参数来设置Java池的大小，如<code>JAVA_POOL_SIZE</code>。</p>
<p>需要注意的是，Java池的大小应根据实际需求和数据库中Java程序的使用情况进行调整。如果数据库中没有使用Java相关功能，或者Java程序的使用较少，那么可以不进行配置或设置较小的Java池大小。</p>
<p>总结来说，Java池是Oracle数据库中SGA的一个可选组件，用于存储和管理Java对象和Java执行环境所需的内存。通过适当配置Java池的大小，可以根据数据库的需求提供足够的内存支持Java相关功能，并提高数据库的性能和效率。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>我的时间永远和身边人差了半年</title>
    <url>/2024/03/08/my183daylife/</url>
    <content><![CDATA[<p>【转载X岛】原帖链接：<a href="https://www.nmbxd.com/t/50688566">link</a> 作者：R6tlM33 </p>
<p><strong>注意：此篇只保留了BE结局，想要看全结局的可以移步X岛链接</strong></p>
<p>如题所示，我的时间永远和身边人差了半年，更准确点，是差了183天。不过好在依然是北京时区内，不然我不仅要跟别人隔着四季，还要隔着白天黑夜，那日子就真没法过了。然而就在这么艰难的情况下，我竟然还能拥有一个肤白貌美(?)的女朋友可喜可贺,可喜可贺。为啥在肤白貌美后面打了个问号呢，因为这特征至今存疑。</p>
<p>没错，到目前为止，我们俩仍然处于网恋阶段，我只看过她发给我的照片，照片里的她闪闪发光，甜美的笑容，若隐若现的梨涡，阳光照在她的脸颊上留下的阴影，每一处都精准戳中了我的xp系统。于是我在她给我发照片的那天立即马上单方面宣布她就是我灵魂的伴侣，未来的另一半。</p>
<p>这事儿唯一的缺陷就是，当时我还不知道她的真名，只能在心里大喊：就现在！我要和半糖奶茶不要啵啵原地结婚！哦，对了，我最喜欢的还是她眼角那颗棕色的小痣，色情又不失纯真，直接让我一眼沦陷。</p>
<p>咳咳，还是说回时间差吧。</p>
<p>可能有人对我身上的这个时间差感兴趣，比如“它”是怎么出现的？具体会对我产生什么影响？这种状态下的我该怎么和其他人接触？能不能利用时间差去买彩票中大奖？”之类的问题，在我发帖之前统统都想好了答案。</p>
<p>那么第一个问题，它是怎么出现的？<br>我的回答是，我也不知道。我只能说打我记事起我对温度的感觉就和别人差了好多度，但是最开始话还说不清楚嘛，就只会说“冷”“热”之类的，所以我妈也没觉出来我这孩子有哪里不对，最多就是小孩子对温度比较敏感嘛，她也就没当回事儿。</p>
<p>但是后来再长大点儿，我妈就觉出来不对了，毕竟家里孩子再熊也不会大夏天的天天对着窗户喊：“外边下雪了！妈妈妈妈我要堆雪人！”于是那段时间我一这么喊，她就会忧愁地看着我，眼神里写满了“我怎么会生个智障出来”，当然这句话作为小孩子的我并没能成功解读，是我长大之后我妈告诉我的，当时我只觉得我妈看我的眼神很慈爱，我一定是她绝无仅有的宝贝儿子。</p>
<p>也许有肥哥会想，难道我妈没有带我去医院检查一下吗？<br>我只能说，我妈当时初为人母，觉得只要我“身体健康白白胖胖就行了，就算真的是个智障也问题不大，自己的孩子还能扔了不是，大不了养一辈子呗”以上是我妈原话，所以根本没想着“也许智障可以治”，也就没带我去过医院做检查( ﾟ∀。)</p>
<p>那么第二个问题，这奇妙的时间差具体对我都产生了什么影响？<br>简单来说，我所能感觉到的一切事物都是183天之前出现的（这个时间要按照其他人过的正常时间推），我感受到的温度是滞后的，看到的景色是滞后的，就像是我整个人被时间抛弃了一样，别人的过去是我的未来，而这其间差了183天。</p>
<p>可以说是抛弃又没完全抛弃？那么这个时间差我是怎么算出来的呢，还有我又是怎么知道我是被滞后了而不是去了未来呢？这就要感谢伟大的九年义务教育了。</p>
<p>在我妈觉得我是个智障之后，我妈就刻意把我和其他小朋友隔开了，一直到七岁，我一直都待在家里接受来自我妈的学前教育。我也不知道我妈的教学水平有多高，但从结果上来看，我很顺利地通过了小学的入学考试。</p>
<p>据我妈讲，她在教我认字和算数的时候一直都没觉得我的智商有问题，但是她又不能确定她的感觉是真的，于是在听说家附近的小学如果提前上学需要参加入学考试的消息后，悄咪咪地给我报了名，美其名曰检查一下她的教学质量。而在我通过了入学考试之后，我妈在难以置信的同时又十分自信的认为是她的母爱和智慧治愈了我，并不是我本身就没有问题。</p>
<p>于是我妈光速报名参加了教师资格考试，结果是显而易见的，她至今也没考下来。而通过了入学考试的我，只能去上学了。</p>
<p>上学那天我一直吵着很冷，我妈只好把我套得像个球似的送我上学，路上路过一家电器店，橱窗里的电视正在播早间新闻，隐约间我听到主持人说“今天是2001年3月2日……”当晚我用学校新发的汉语拼音本子的背面里用拼音写道：3月2日wo tao yan 上 xue。小 peng 友 dou 不禾口 wo wan。</p>
<p>那时候我还没意识到这会是一个非常严重的问题。大概上了有半个月的学吧，我终于顶不住身边的小朋友都把我当做透明人，老师也时而当我不存在的压力了，和我妈吵着不想上学。</p>
<p>我妈一开始只以为我是不适应群体生活，想着对亲儿子还是应该先礼后兵，于是跟老师打电话请了个假，准备耐心问我不想上学的原因，现在想想要是我说不出来什么的话，估计只会得到一顿胖揍和被亲妈提着衣服领子送到学校的成就。</p>
<p>还好我说出来了。</p>
<p>我：“学校里的小朋友都不理我，没人愿意和我一起玩儿。”</p>
<p>我妈：“你有好好说话吗？有讲礼貌吗？”</p>
<p>我(;´Д`)：“当然了！我很讲礼貌，但是小朋友们都不讲礼貌的，他们都不听我说话。”</p>
<p>我妈：“那你有没有找老师说这个事情？就是之前去考试领你进学校的那个漂亮老师。”</p>
<p>我：“有啦！我记得你叫我有问题找老师的，可是老师也总不记得我是谁(;´Д`)”</p>
<p>我妈：“咋可能呢？刚才请假的时候老师知道你是谁呀？”</p>
<p>我：“我说的时候就不知道，你说的时候才知道，老师只认得你不认得我(;´Д`)”</p>
<p>我妈觉得不太对，难道说校园欺凌也从娃娃抓起？于是她决定给老师再打个电话问问情况，这回我妈还开了免提，示意我可以听听老师怎么说。电话通了。</p>
<p>老师：“喂，您好，现在是上课时间，请问您是哪位？有什么事吗？”</p>
<p>我妈：“我是小肥的妈妈，有点事想问一下老师，挺重要的，现在就得问。”</p>
<p>老师：“是谁的家长？”</p>
<p>我妈：“小肥。”</p>
<p>老师：“呃，不好意思，我班里没有叫小肥的同学呀，你是不是找错班了？”</p>
<p><em>我妈一脸不耐烦，她嘀咕了一句“怎么又来一遍”，一边对着电话说到：“我叫林静，是林萧斐的妈妈，这回有印象了吗？”</em></p>
<p><em>老师：“啊！不好意思林女士，我看看林萧斐同学是不是我班上的孩子……查到了，确实是，奇怪，我怎么一点关于这孩子的印象都没有……您有什么事儿要找他吗？”</em></p>
<p><em>我妈彻底被点燃了：“老师，你说这话是什么意思？一小时前我才给你打过电话给林萧斐请一天假，这么快你就忘了吗？你这样问我，是根本没发现我家孩子没去上学？那我是不是可以理解成我家孩子在学校根本不受重视，连上没上学请没请假这种大事他的班主任都会记不得？要不是我家小孩今天哭着说学校里没人理他，我要多久才能知道他在学校被孤立了？还是老师带头孤立？我要立刻去学校找校长投诉！”</em></p>
<p>说完我妈就挂电话气冲冲地走了，还忘了带我。在我用积木快搭完一个城堡之前，我妈一脸复杂地回来了，那大概是一种愤怒交织着迷惑，理智还没占据高地的结合体表情，她就带着这种表情看着我，我看看手里的积木，又看看我妈，最后还是迟疑着跑到房间门口抱住了我妈的大腿，我妈也蹲下来回抱了我。然后我就听到我妈宣布了一个当时的我认为是最好的消息：“明天我们不去上学了。”</p>
<p>接下来的几天我妈总是在问我一些怪问题。比如我妈指着窗户外边，“你现在还能看见外边在下雪？”</p>
<p>我看看窗外，“今天没下呀，外边的树都长绿牙牙了。”</p>
<p>我妈一脸复杂。又比如我妈拿着我家的台历，“你看看今天是几号？”</p>
<p>我看了眼，“3月23号！”</p>
<p>我妈二脸复杂。再比如我妈打开了我家很久没看的电视机，“电视里说了什么？”</p>
<p>我抬头听了会儿，“听不懂，这个叔叔在说新闻吗？”</p>
<p>我妈换了个台，“哦，那这个呢？”</p>
<p>我兴奋：“是数码宝贝！”</p>
<p>我妈三脸复杂。每次问完我问题，我妈都会消失一阵，在这么被放养了好几天之后，我觉得可以了，玩够了，我已经不难过了，于是去敲我妈卧室的门，“妈妈妈妈，妈妈小课堂什么时候开课呀？”我妈坐在床上四脸复杂。</p>
<p>我站在门口歪头看她。</p>
<p>等了一会儿，我妈叹了口气，“先不开课了，今天我带你出去玩儿。”</p>
<p>我妈领我进了一家看起来很高级的餐厅，在经过左转右转的随机组合后，她选中了一张靠窗的餐桌。我妈拉我坐下，但半天都不见有服务员过来。</p>
<p>我拽拽我妈的衣角：“妈妈，我们要在这吃饭吗？”</p>
<p>我妈没理我，而是五脸复杂地看着餐桌对面。</p>
<p>我又拽：“妈妈？”</p>
<p>我妈再叹气，没有看我，而是看着空无一人的桌子对面，她把她的手放在我的肩膀上，像是在向一个我看不见的人介绍我一样说道：“这是我儿子，你能看见吗？”</p>
<p>“我操？”一个陌生的女声出现在我耳边。当时的我没有听懂她在说什么，但这两个简短有力的音节给我留下了深刻的印象，以至于成了我学会的第一句脏话。</p>
<p>我顺着声音抬头，发现桌子对面不知道什么时候坐了一个漂亮阿姨，正震惊地看着我和我妈。</p>
<p>我有些迷糊，“阿姨好？”</p>
<p>漂亮阿姨：“我操？？”</p>
<p>我妈怒：“你注意点！我儿子还在这呢！现在能看见他了？”</p>
<p>漂亮阿姨：“啊啊啊失态了失态了，乖侄子阿姨刚刚什么都没说哦。”</p>
<p>我妈看着我，“这是你曹阿姨，今天曹阿姨请你好吃的饭饭，快说谢谢曹阿姨。”</p>
<p>我乖巧地看着漂亮阿姨：“谢谢曹阿姨～”</p>
<p>漂亮阿姨给我点了份欢乐儿童套餐，不一会儿桌面上就出现了一份儿童套餐，我正好奇它是怎么出现的，我妈就递给了我，于是我啥也不想了，欢乐开吃。</p>
<p>“这什么情况？”漂亮阿姨悄悄问我妈。</p>
<p>“我也没弄清楚呢，这几天这在摸索规律。”我妈忧愁地看着傻吃的我。</p>
<p>“什么规律啊？”漂亮阿姨问。</p>
<p>“让除我之外的其他人能看见我这个傻儿子的规律。”我妈叹气。</p>
<p>“现在有啥结论了吗？我能突然看见乖侄子就说明你研究出来啥了吧？”漂亮阿姨又问。</p>
<p>“是有一点儿，”我妈不自觉地戳她碗里的冰淇淋球，像是突然想起了什么，“诶？你完全能接受我儿子凭空冒出来的吗？”</p>
<p>“我不是说‘那个’了嘛。”漂亮阿姨看了看我妈迷茫的脸，“哎呀，就是不能在小孩子面前说的那个词。”</p>
<p>我妈木了：“这就结束了？我发现他只能被我看见的时候在心里整整说了三天‘那个’。”</p>
<p>“别打岔，”漂亮阿姨打断我妈，“所以我为啥能看见乖侄子呢？”</p>
<p>“因为我向你介绍了我和我儿子的关系，目前我只发现了这一种能让别人看见我儿子的方法，就是让别人知道他是我儿子。”我妈忧愁，“而且是有时限的，得见一面说一次，”</p>
<p>我妈终于挖了勺我馋了很久的冰淇淋塞到了我嘴里，“这可怎么送他去上学呀。”</p>
<p>我：妈妈和阿姨在说什么哦听不懂听不懂冰淇淋香香！</p>
<p>漂亮阿姨愣住：“你只担心他上不了学吗？”</p>
<p>我妈认真点了点头，“对呀，现在社会发展这么快，可不能让小孩当文盲。再说了，正常小孩九年义务教育是一定要去的呀。”</p>
<p>漂亮阿姨：“呃，提前说好，我的话没别的意思，就是，你觉得，我乖侄子还能算正常小孩吗？”</p>
<p>我妈迟疑了，“算的吧，他还挺聪明的…我教的东西他都学得挺快的。”</p>
<p>我耳朵一竖，听见我妈在夸我，立刻停下吃东西的嘴，给漂亮阿姨连背三首古诗外加九九乘法表，背完还不忘骄傲地看着我妈。</p>
<p>我妈拿了张纸擦了擦我的嘴，“我们小肥真棒呀，让阿姨再给你点个冰淇淋吃~”我点头，又想了想，“可以要巧克力味的吗？”我看向我妈，我妈看向漂亮阿姨，漂亮阿姨，漂亮阿姨无人可看，只好大喊一声“服务员，我这桌加三个巧克力味的冰淇凌球！”</p>
<p>我：“好耶！”</p>
<p>漂亮阿姨幽幽地说：“我看出来你家孩子聪明了，你骗别人给你花钱的技巧他学了九成九。”</p>
<p>我妈眨眨眼睛：你说什么？我听不懂●ｖ●我对漂亮阿姨的好感度直线up，在漂亮阿姨和我妈咕噜咕噜说了一大堆我听不懂的话之后又一起笑眯眯地看着我的时候，我一点危机感都没有察觉到。</p>
<p>所以我万万没想到她是在和我妈讨论用什么方法才能把我送回九年义务教育的怀抱。而整件事最神奇的地方就是她俩真的想到了一个绝妙的好主意，让我后来顺利地拿到了小学和初中毕业证。</p>
<p>我妈发现如果她不对我进行任何干预，我就会处于183天前的世界，而且和正常世界的时间差不会变化，就像是两辆在公路上匀速前进的小车，一辆正常出发，一辆后出发，它们俩的速度相等，在不考虑其他外在因素的情况下，两辆小车之前永远隔着一段不会改变的距离。</p>
<p>我妈，或者说除了我之外的所有人都坐在正常出发的小车上，他们共同走在一条不会被任何人预测的道路上，只有我一个人坐在后出发的小车上，走过的路满是前车留下的痕迹。一旦我妈干预了，我就会被短暂地拉到第一辆小车上，跟着我妈看几眼没见过的景色。</p>
<p>所以，理论上来说，只要经过准确的计算，我妈就能把我送进学校，跟着老师的过去进行正常的学习，而到了正常时间的考试前夕，她只需要跟老师说一次“这是我儿子”，我就能去参加考试，但这个方法有个缺点，就是我考试的时间总是很奇怪。</p>
<p>这一点对小时候的我来说，简直是灾难。（我妈看见我写的帖子了，她说让我在这里加上一句，“对于数学不好的我妈来说同样也是一场灾难”。）</p>
<p>在我还没有深刻意识到我是多么的与众不同之前，我脑子里关于时间的概念总是一团浆糊，我认为，和成一团浆糊最重要的原因就是，我妈通知我的考试时间和学校老师通知我的考试时间，完全对不上。</p>
<p>在老师第一次说要考试的时候，我第一时间告诉了我妈，我妈听完一点都不紧张，她翻了翻我家的台历，告诉我这次考试不用去，当时我很迷惑，但是谁愿意考试呢？就这样，虽然迷惑，我也开开心心地接受了。</p>
<p>等到我妈通知我该去考试的时候，这种迷惑再次涌上了心头，但我妈没给我太多的时间用来反应，而是抓起我就往学校送。</p>
<p>而这种迷惑的情绪在我妈把我交给一位我完全不认识的老师之后不断上升，在我翻开考试卷子，发现上面的问题全都是关于我半年前学过的知识的时候达到了顶点。</p>
<p>我是谁？我在哪？我在干什么？我是小肥，我在学校，考半年前就应该考的试？所以不是不考，而是时候未到？后来又经历了很多次这种奇怪的考试，我逐渐从迷惑变成了麻木，一直到小学的毕业考试，我都是这样过来的。</p>
<p>而“我一直不断的在我妈的指挥下，在错误的时间去参加考试，学校却给我发了张成绩填满优秀的小学毕业证书”这件事，也成了我十三岁前最大的未解之谜。为啥是十三岁呢？因为这年我上初中了。在十三岁之前，我一直都没有同龄的好朋友，一开始我以为是学校的同学把我当成透明人，再长大一点，我才隐隐约约地发现我上课迟到不会被抓，举手提问不会被叫，忘写作业不会被罚，都是因为他们看不见我。</p>
<p>这个隐约的指向大大地吓坏了我，我甚至不敢告诉我妈。</p>
<p>于是我沉默地上学，沉默地毕业，沉默地等待新学校的宣判。我既期待初中会有能看见我的人出现，又害怕那只是另一所和小学没什么不同的学校。</p>
<p>好在我妈看不得一个十三岁小屁孩越来越消沉。在开始初中生活前的那个冬天，我妈不仅解开了困扰我的谜团，还带我进入了一个新世界，一个会有好朋友回应我的新世界。</p>
<p>那天是从我安安静静吃完早饭开始的。我本想吃完饭继续窝在沙发上看前一天没看完的数码宝贝 VCD，却没想到我妈一反常态地叫我出门去玩。</p>
<p>我疑惑地看着我妈，“妈妈，没有小朋友和我玩的，你不是知道吗？”</p>
<p>我妈：“没事儿没事儿，我叫了你曹阿姨陪你出去玩儿，一会儿她就该到了，你先去收拾收拾~”</p>
<p>我：“好吧，妈妈不去吗？”</p>
<p>我妈：“妈妈有事要在家，你今天要玩得开心哦，曹阿姨和妈妈很好的，你不用害羞，出去玩儿就把曹阿姨当成妈妈好啦。”</p>
<p>我觉得哪里怪怪的，又说不上来，只好万能乖巧：“好哦。”</p>
<p>不一会儿曹阿姨到了，我妈牵着我开门迎接，她一边对曹阿姨说“这我儿子，你别给我整丢了”，一边把我往屋外送。还没等我回过神，就已经被换了个人牵着。</p>
<p>只见曹阿姨笑眯眯看着我，“走吧乖侄子，阿姨带你去游乐场好不好？”</p>
<p>我冲着曹阿姨眨眨眼睛，“好哦，漂亮阿姨。”</p>
<p>我眼馋很久但苦于我妈不敢坐的摩天轮在我的游乐园计划里首当其冲。曹阿姨完全不怕这个，我俩一起在上面坐了三圈，每一次我们的座舱转到最顶点的时候，我都感觉世界上没有比这更快乐的事了。</p>
<p>但当天晚上就证明一个十二岁小孩对于快乐极限的认知还是太少。在我俩玩得天昏地暗之后，曹阿姨用实际行动证明了野妈不如亲妈香，坚定地拒绝了我还想去海洋公园的想法，把我扭送回家。</p>
<p>曹阿姨敲门：“姐姐，亲姐姐，我顶不住了，我乖侄子怎么是个运动系啊？”</p>
<p>我妈开门，“你这怎么提前两小时就给我送回来了？小孩子嘛，都是一疯起来就没完的呀。”</p>
<p>曹阿姨：“我不管了，真顶不住了，今天的运动量都抵得上我半年的了。你那个准备好了吗？”</p>
<p>我妈点头：“差不多刚弄好，我还没试。你不进来坐坐吗？”</p>
<p>曹阿姨慌忙摆手：“不了不了，你的崽我送回来了，我要回家瘫着去了。”</p>
<p>说罢，曹阿姨一溜烟地跑了，我都没找到机会说声“阿姨再见”。</p>
<p>我妈弹了我一个脑瓜崩，“看把你曹阿姨累的，下回可不许这样了哦。”</p>
<p>晚饭过后，我妈拉着我坐在沙发上，她语重心长地对我说：“小肥呀，你已经是个大孩子了，所以呢，有些事情，我觉得还是告诉你比较好。”</p>
<p>我看了看她紧闭的卧室房门，小心翼翼地问：“你给我找新爸爸了？”</p>
<p>我妈爆捶我头：“你觉得这种事儿能让我愁成这样？”我仔细观察我妈的脸，没看出来哪里写了“愁”字。</p>
<p>我妈再捶我头：“别看了！这种忧愁已经化外而内了( ` ・´)”</p>
<p>我：“好吧，那是什么大事让我美丽坚强的妈妈愁成这样了呢？”</p>
<p>我妈突然变得严肃：“小肥啊，你小时候和我说过学校里的小朋友都不和你玩，怎么后来就听不到你这样说了呢？”</p>
<p>我：“啊……我长大了嘛，小学没有好朋友上了初中总会有的呀，哎呀我小学都毕业了怎么还问这个(*ﾟーﾟ)”</p>
<p>我妈：“如果我说你上了初中也不会有能在学校认识的好朋友呢？”我ﾟÅﾟ )　：“啊？？”</p>
<p>我妈开始了连环叹气。她拿出了我小时候玩的两辆玩具小汽车，错开摆在沙发前的茶几上，发表了由她和曹阿姨共同讨论出的“小车理论”。这是我第一次听说“小车理论”，我受到了巨大的冲击。我宕机的表情让我妈的忧愁立刻转内而外了。</p>
<p>我妈拽着我的手，“小肥别怕别怕，你问我点啥，你问点想知道的事好缓缓。”</p>
<p>我难以置信：“这是真的吗？”</p>
<p>我妈：“真的。”</p>
<p>我：“那我看到的东西和其他人看到的东西一直都是不同步的吗？”</p>
<p>我妈：“大部分时间是的，但要是我把你拽过来了，”我妈指指代表我“坐”的小车，虚空一抓，放到了代表我妈“坐”的小车上，“你看到的跟我看到的就是同步的了。”</p>
<p>我：“所以现在不是冬天？”</p>
<p>我妈点头，“按大部分人的时间来说，现在是夏天。”</p>
<p>我：“是应该这样的，今天我和曹阿姨一起玩的时候都没感觉冷的……诶，曹阿姨，曹阿姨为什么能跟我一起玩呢？”</p>
<p>我妈：“因为我把你临时拽过来了。”</p>
<p>我：“可是你没跟着我们……”我妈再点头，“我不需要跟着你们，因为这个‘拽’呢，不是物理意义上的拉扯，而是让其他人知道我们俩的联系，是抽象的，看不见摸不着的，”</p>
<p>我妈看到我茫然的脸，立即刹车，“简单点，就是告诉谁你是我儿子，谁就能看见你。”</p>
<p>“那你可以……”我听懂了。</p>
<p>“不可以。”我妈也听懂了，她打断我，“这只是临时的，我试过，说一次最多能把你拽过来一天，等第二天就需要我再说一次，还有如果在我把你介绍给其他人，而你又离开了他们的视线之后，他们也会不记得你。”</p>
<p>“……小学那个漂亮老师？”</p>
<p>我妈揉了揉我的头，“你还记得她呀？”她叹了口气，继续道，“没错，那个老师不记得你就是这个原因。所以你不管在小学还是初中，都没法找到能看见你的好朋友，对不起呀小肥，妈妈没法每天和所有人都说一遍‘你是我儿子’。”</p>
<p>我默默消化着我妈的话。</p>
<p>“小肥还有什么想问的吗？”我妈持续 rua 我的头发。</p>
<p>我尝试挣脱我妈的魔爪，“有！为啥我总是要在奇怪的时间去考试？虽然我现在知道了我的时间和别人不一样，但是，但是我还是想不出这个…”</p>
<p>我妈按住扑腾的我，一脸‘你终于问这件事了’的表情，说话的语气中充斥着满足：“哎呀，这当然是根据妈妈的计算得出的时间呀。你记不记得你小时候不愿意去上学，我以为你在学校受欺负的那会儿？就是这事让我发现你身上的不对劲的，然后你曹阿姨就问我还要不要送你去上学，我是觉得不会有比让小孩子去上学更重要的事情了，所以我和曹阿姨就一起想了个绝妙的主意。”</p>
<p>我挣脱未果，我妈继续 rua 我，“就是让你跟着上一届的老师上课学习，但是要跟着下一届的同学考试，这样，我只要算好日期把你送到学校，你就可以在自己的时间线里在学校学习；只要在下一届开学前给你报名入学，再在下一届同学考试的时候对着老师说一遍‘你是我儿子’，你就能到正常时间线里参加考试，唯一的小缺点就是考试内容会有那么一点对不上，不过肯定都是你学过的知识就是了。但是瑕不掩瑜嘛，我们小肥可是顺利地从小学毕业了呀。”</p>
<p>我小小的意识终于抓住了重点：“那我的初中也得这么上吗？”</p>
<p>“是这样的。”我妈终于停下了 rua 我的手，“不过没关系哦，妈妈我找到了能让你交朋友的好方法！”我妈把我领进了她的卧室，我看到她的梳妆台上放着一台像是翻版电视机，但比我家的电视机小两圈的陌生机器。</p>
<p>“这是什么？”我记得我妈总是叫我家电视机大脑袋，所以这是，“小脑袋？”我妈弯腰在梳妆台底下摸索了一会，我听见“嗡”地一声，接着那个陌生机器的屏幕亮了。屏幕的蓝光映着我妈抬起的脸，我听见我妈说：“傻儿子，这叫电脑。”我妈研究了六年，终于找到了可以让其他人感知到我的第二种方法。</p>
<p>一开始我妈发现的其实是我“可以接触到来自正常时间线，属于我妈或者经我妈手的东西”。“属于我妈”发现得很简单，在我可以自如地用我家的 VCD 看各种碟片的时候，我妈就察觉到了。</p>
<p>至于“经我妈手”这一点，是在我第一次和曹阿姨吃饭的时候，我妈用那份点给我的儿童套餐暗戳戳地试出来的。于是我妈产生了一个大胆的想法：如果她买一台电脑，以她的名字安装一条网线，那我是不是可以通过这条用户名为“林静”的家庭宽带连接到正常的时间线上呢？我妈想了，然后做了。</p>
<p>而现在诸君能看见我发的串，就是因为我妈的试验成功了。她成功的让我感受到了世界不是沉默冰冷的，而是热情温暖的。不过当时我妈和我对电脑的操作基本上都是一窍不通，而曹阿姨提前把我送回家更是让我妈只来得及通过教程在电脑上安了个“祖玛”。</p>
<p>所以在我知道“小脑袋”是个电脑，兴奋地让我妈教我玩电脑的时候，我妈别无他法，只好双击点开了桌面上唯一一个很起来很有趣的图标。那天是从”zuma zuma“和”你打错啦让我来“的声中结束的。我不记得那天到底玩到了几点，只记得我困得迷迷糊糊的时候问出了最后一个问题。</p>
<p>我问我妈为什么她一直都能看见我。我妈则温柔地回答：“傻崽崽，因为我是妈妈呀。”啊，我好像说得太多了，连带着把第三个问题的答案也说出来了，不过第二个问题和第三个问题确实有很大的联系，如果要分开回答，我还真不知道该怎么说。以上的内容大部分来自我妈的回忆，我那时候太小了，记得的事情不多，只能做补充说明。</p>
<p>我就当做第三个问题也回答完好了。</p>
<p>那么接下来，第四个问题是，我能不能利用时间差去买彩票中大奖？</p>
<p>答案是不能。</p>
<p>相比于我妈用她的“小车理论”做比喻，说我是坐在后出发的小车上往前走，我更喜欢用“残缺的副本”来比喻我处于的环境。我独自一人的时候接触到的世界，就是以正常世界为原本建立的，但又缺失了 183 天时间数据，且只读的副本世界。这两个世界只有一点点联系，以保证在正常世界更新时间的时候，副本世界也会随之更新时间，除此之外，基本就可以算是两个独立的个体了。</p>
<p>所以不管我在副本世界里做什么，都不会影响到正常世界的历史，更何况其实我也做不了什么。副本世界里的所有人、物都是“只读”状态，我不能改变任何事情的轨迹，不能和任何人交流，只能读取这段属于正常世界的记忆。</p>
<p>所以我并没有会让人羡慕的可以改变过去的能力，我只是一个生活在错误时间里的普通人。在我刚刚知道这件事的时候，我做过很多事情来证实我妈说的话，比如我试过在蹭摩托车的时候挠摩的大哥的痒痒，他没有反应，车骑得稳稳当当，他就像是设定好程序的人偶在机械运动一样，完全无视我的捣乱，不过从那以后我蹭车蹭得倒是更随心所欲了……我也在去书店看了书之后，不把书放回原位过，因为想着省得第二天再找一遍，结果第二天去书店的时候它又回到原位了，最惨的是我第三天去想看完大结局的时候发现这本书已经被卖掉了。</p>
<p>上了初中以后，我开始在网络上结交“狐朋狗友”。对于上网这事儿，学校老师和我妈的态度可为截然相反，学校老师说一句“互联网上很多坏人”，我妈就要跟一句“现实坏人也不少”；学校老师再一句“初中学习很关键”，我妈就呛一句“我家孩子你管不着”，这个嘛，老师还真的“管”不到我。当然老师和我妈是没办法真的对吵的，所以我成了这场跨时间吵架的唯一指定受害者( ﾟ∀。)后来我成熟了，知道如何扼杀这种只有我受折磨的无意义争吵了。</p>
<p>于是在下一次我妈“不经意”间提起学校老师的时候，我脑中的警报瞬间响起，时刻等待我妈出击。</p>
<p>“小肥呀，最近学校的老师有说什么关于上网的言论吗？”我妈直球出击。</p>
<p>我假装随意，“哦，说了呀，她说互联网是人类的好朋友。”</p>
<p>“她说的是什么狗……等会儿，你这老师的态度变了？”我妈震惊。</p>
<p>“是呀是呀，突然就变了，我估计是正常世界的哪个学生家长跟你想得一样，所以去找老师理论了，老师被说服了，所以她态度就变了吧？”我拿出早就想好的理由。</p>
<p>“啊……那，这是个好事儿，”我妈蔫蔫地走了，背影里全是失落，“就这么被说服了？”</p>
<p>我装作没听见我妈最后的疑问。我是看出来了，我妈才不是正经的互联网精神股东，她就是想找个理由和老师虚空对吵，我甚至怀疑她年计划表里的第一条就是“和小肥的初中老师吵架”！在我妈日复一日的念叨互联网的种种好处之下，我终于愿意让我妈以她的名义申请一个给我用的社交账号。结果注册的时候傻眼了，这玩意儿根本不记名。好在经过我俩激烈地探讨与尝试，找到了一个可以让我钻过去的漏洞，但相应的我也得付出巨大的代价。为了在互联网上寻找友谊，我妥协了。</p>
<p>于是2013年10月5日（正常世界的时间），一个网名为“林静的儿子”的账号注册成功了，我就顶着这个名字开启了互联网奇幻之旅。当时某乎还没在网络上流行，所以当时我“纵有千般愁”，也只能对着我妈说。而一旦我向我妈表示我不是很喜欢这个网名，我妈就会立刻把这事儿上升到阶级高度，认为我这个“被统治阶级”在挑战她这个“统治阶级”的权威，为了家庭的和睦与幸福，我只能憋着。</p>
<p>如果让当时的我在现在的某乎上回答“如何形容‘明明不想做，却由于现实的原因不得不做一件事’的感觉？”我想我一定会说：“那是一种纠结与不甘交织在一起，想要挣脱命运的枷锁最后为了大义又不得不妥协的心酸。”谁又能想到在很久以后，一个成年人午夜梦回，辗转反侧，只是因为想起了自己第一个网名没有如自己所愿的注册成“南极幽灵王”呢？</p>
<p>其实到现在我的网名依然是“林静的儿子”，但我已经学会了与它和平共处，甚至能顶着它和我喜欢的女生告白。是的，我终于终于要讲我和我可爱又迷人，温柔又善良的女朋友的故事了。她就像星星闪烁在美妙的夜空里，所有仰望星空的人都能欣赏到她的美，就连时间滞后里的我也可以。我和我女朋友的相识起源于普普通通的熟人介绍，而这个熟人就是我在网络上结识的第一个好朋友，他也是我互联网奇幻之旅的重要领路人。</p>
<p>现在想一下我接触互联网的时间也不算太早，按理说也没必要到欢天喜地敲锣打鼓的程度，只不过那种“可以和其他人交流”的喜悦通过它表现了出来，以至于时至今日，我都觉得那个让我连接到现实世界的冬天异常温暖。因为没有同龄的朋友，我对网上的论坛又一知半解，面对眼花缭乱的网络游戏根本无从下手，以至于很长一段时间我一直处于“虽然我能上网，但我不知道要干点啥”的状态，最后，我选了一个现在看起来最奇怪的方向下手，书友群。</p>
<p>在得到了我妈对我进行的网络安全培训测验的满分之后，我加入了一个十分小众的杂志书友群，面对着满屏的“新人爆照”临危不惧，淡定地敲出：“叔叔阿姨好，这里都是喜欢《xx世界》的人吗？”沉默是今晚的康……不，沉默是停止刷屏的群聊。渐渐有人顶不住了。</p>
<p><em>Bleach：你几岁？</em><br><em>林静的儿子：应该算13？</em><br><em>Bleach：那叫哥就行了，还不至于叫叔…我妹妹跟你差不多大</em><br><em>林静的儿子：好的bleach哥</em></p>
<p>有了Bleach起了个头儿，群里又重新充满了欢声笑语，有人趁机让我叫她姐姐，有人吐槽我这么大的小孩都看《xx世界》了，有人感叹年轻真好，有人问我作业写完没有，我从没和这么多人接触过，不知道如何处理这些蜂拥而至的问题，只好按照顺序一个一个地回复过去。</p>
<p>当我正在回答“你是在用手机上网吗”的时候，聊天软件特有的咳嗽声响了起来，我点进消息通知一看，Bleach请求添加我为好友。</p>
<p>我点击了同意，这是我在这个软件上的第三个好友，第一个是我妈，第二个是漂亮阿姨。而十三岁的我怎么也想不到，我轻轻点的这下同意，把我未来的大舅子给点出来了。</p>
<p>“你已同意Bleach的好友请求，现在你们可以开始聊天了～”</p>
<p><em>Bleach：嗨！小弟弟</em><br><em>Bleach：怎么这么怪</em><br><em>Bleach：嗨！小伙子，你有昵称吗？你这网名不太好叫啊</em></p>
<p>我慢吞吞打字。</p>
<p><em>林静的儿子：你好，bleash哥</em><br><em>林静的儿子：昵称是干什么的？</em><br><em>Bleach：就是让群里的人方便叫的名字，比如我虽然网名是Bleach，但群里的人都是叫我白哥的。</em><br><em>林静的儿子：哦( ﾟ∀ﾟ)</em><br><em>林静的儿子：那我可以叫南极幽灵王吗？</em><br><em>Bleach：？？</em><br><em>Bleach：要不你再想一下？</em><br><em>…</em><br><em>Bleach：我没别的意思啊，主要是你说的这个也不是很简便，最好想个两三个字的昵称吧？</em><br><em>Bleach：你觉得呢？</em><br><em>林静的儿子：好吧，我妈也不喜欢我想的名字</em><br><em>Bleach：hhh，所以你就叫了林静的儿子？</em><br><em>林静的儿子：是呀</em><br><em>Bleach：那就叫你林崽好了，或者静崽？</em><br><em>林静的儿子：……林崽吧(ﾟーﾟ)</em><br><em>林静的儿子：这个群是讨论《xx世界》的群吗？</em><br><em>Bleach：呃</em><br><em>Bleach：最开始是吧，现在已经变成插科打诨群了</em><br><em>Bleach：你想在群里说什么都行，大家都很友好的(ゝ∀･)</em><br><em>林静的儿子：好的，谢谢白哥～</em></p>
<p>“xx世界读者群”</p>
<p><em>林崽：大家好，请问什么是暴风雪山庄模式呀？</em><br><em>孙不堵：！原来还有人记得这里是读者群吗</em><br><em>孙不堵：暴风雪山庄模式是一种本格推理小说的写作模式</em><br><em>孙不堵：简单来说就是作者写一群人被困在一个不能联系外界的地方，接下来会不断出现受害者，而犯人只会是幸存者中的一员，在这种情况下侦探进行推理的小说</em><br><em>林崽：本格推理是？</em><br><em>孙不堵：这种类型的书我强烈推荐阿婆的无人生还！</em><br><em>孙不堵：东野圭吾的白马山庄杀人事件也可以</em><br><em>孙不堵：岛田庄司的斜屋犯罪也行</em><br><em>孙不堵：通通推荐通通推荐！</em><br><em>林崽：等等……</em><br><em>Bleach：不用在意，他有病</em></p>
<p>孙不堵的热情让我大为震撼，这一切对我来说都是新奇的。当时的我只是个看过几期推理杂志预备中学生，最多算是在扒着门缝好奇地看着这个从未涉及的领域，而这位孙不堵网友就像是门后伺机伏动的野兽，我刚露头他就顺着网线把我拽进了门后的世界。所以很难说后来我家书柜里满满的推理小说和孙不堵没有任何关系。</p>
<p>很久以后，在我和这位孙不堵达成了“阿婆天下第一！柯南道尔算什么推理作家”这一暴论后，孙不堵对我的热情就像是学校老师看见了年级第一一样。于是我当机立断，在此时正面冲锋，问出了一个我早就想问的问题。</p>
<p><em>林静的儿子：你为什么叫孙不堵呀？这是真名吗？</em><br><em>孙不堵：哈哈哈哈</em><br><em>孙不堵：我叫孙畅，畅，不堵也孙不堵：当然它也包含了一个非常重要的愿望</em><br><em>孙不堵：我希望我的大O永远不堵！</em><br><em>林静的儿子：(ﾟーﾟ)…</em><br><em>林静的儿子：真是个朴实的愿望呢</em><br><em>孙不堵：少在这阴阳怪气( `д´)长大了你就知道把宿舍拉堵了是多么悲惨无助的事了</em><br><em>林静的儿子：……成年人的世界好复杂哦</em></p>
<p>总之，孙不堵从此就成为了我的日常调侃对象，我用过的语言攻击包括但不限于“您今天OO了吗”、“警告！前方拥堵”和“真是顺畅的一天呢”。</p>
<p>毕竟我总得找个人传递一下“我妈看到月账单激增500块，查到最后发现是我用来买小说了于是怒捶我头”的痛苦。</p>
<p>至于Bleach，我搞不过他。Bleach此人，看似正义凛然，一副邻家大哥哥的模样，其实这只是他对新人的伪装，在我愉快地融入了这个浑水摸鱼大家庭之后，他终于露出了他的真面目。锲而不舍地调戏我。</p>
<p>按照他本人的话讲“我只是想了解一下你这个年龄的小孩平时都在想什么，我家妹妹天天都不理我的，我知识想从你这找到共同的话题嘛”。那么他都干了些什么呢？</p>
<p>某年某月某日</p>
<p>Bleach：崽啊，你真的是男生吗？<br>林静的儿子：白哥你这是什么问题(*ﾟーﾟ)<br>林静的儿子：我当然是男生呀，我是儿子呀<br>Bleach：可是你说的语气词比我妹说的都多<br>Bleach：真的很像一个软萌萝莉<br>林静的儿子：(|||ﾟдﾟ)？？<br>Bleach：对对对还有很爱发颜文字，我妹都不会发这种<br>林静的儿子：……<br>林静的儿子：我妈叫我在网上要讲礼貌<br>林静的儿子：所以白哥你脑子有问题的话应该尽早去五院看一下，不过看你这样子大概率晚期了已经没救了(　^ω^)<br>Bleach：诶诶诶这个感觉！这回不像软萌萝莉了，开始像我妹妹了！<br>Bleach：你真的不是在互联网上努力尝试软妹风格的我的妹妹吗？<br>林静的儿子：？<br>林静的儿子：我宣布你没救了<br>Bleach：更像了更像了！</p>
<p>又某年某月某日</p>
<p><em>Bleach：崽！在吗在吗！帮帮我帮帮我！</em><br><em>林静的儿子：说出你的诉求我再考虑我在不在</em><br><em>Bleach：崽你不爱我了(´ﾟДﾟ`)*<br>*林静的儿子：是什么给了你我爱过的错觉( ` ・´)</em><br><em>林静的儿子：所以是啥事？</em><br><em>Bleach：balabala我把我妹惹毛了，我想给她买个礼物道歉，否则等我们爸妈知道了之后我会被逐出家门的！</em><br><em>Bleach：崽崽救救我，你有没有啥推荐啊？</em><br><em>林静的儿子：我比较想听“balabala”的部分呢</em><br><em>Bleach：讲了你就会帮我想送什么礼物吗？</em><br><em>林静的儿子：等等，为啥你这么执着让我挑送你妹的礼物啊？</em><br><em>Bleach：因为女生最懂女生啊</em><br><em>Bleach：你挑的我放心嘛</em><br><em>林静的儿子：？</em><br><em>林静的儿子：你再说一遍第一句话</em><br><em>Bleach：啥？崽在不在？</em><br><em>林静的儿子：我不在</em><br><em>林静的儿子：还有，我是你爸爸(　^ω^)</em></p>
<p>再某年某月某日</p>
<p><em>Bleach：嘤嘤嘤</em><br><em>林静的儿子：？又犯什么病</em><br><em>Bleach：你变了！你不是那个会叫我Bleach哥的有礼貌的小孩了！</em><br><em>林静的儿子：亲亲这边建议您自己翻一下聊天记录呢</em><br><em>林静的儿子：如果没有您日复一日的调戏我也不会变成这样呢</em><br><em>Bleach：我哪有( `д´)*<br>*林静的儿子：我就静静地看着你我不说话.jpg*<br>*Bleach：好了崽！让我们重归于好吧！咱们几个玩得好的都是本地的，我打算组织一次线下活动，你有没有兴趣来呀？*<br>*Bleach：来呀来呀，我们一起快活*<br>*林静的儿子：……*<br>*Bleach：哥请你吃饭，出来玩嘛*<br>*林静的儿子：(ﾟーﾟ)*<br>*林静的儿子：我去不了……*<br>*Bleach：是担心不好和家长说吗？我把我的电话号码给你，我去跟你家长说*<br>*Bleach：我不是坏人的(;´Д`)！</em><br><em>林静的儿子：我知道，我</em><br><em>林静的儿子：我没时间，不好意思这次去不了</em><br><em>Bleach：我还没说哪天啊？</em><br><em>林静的儿子：这一两个月我都没时间</em><br><em>林静的儿子：抱歉…</em><br><em>Bleach：好吧，没事没事，以后还会有机会的~</em><br><em>Bleach：那到时候我替你做个名牌带去面基好了</em><br><em>Bleach：就写上“本群最可爱的萌妹——林崽”吧！</em><br><em>林静的儿子：？？</em><br><em>林静的儿子：没完了是吧？？</em></p>
<p>当然，Bleach除了锲而不舍的不正经之外，也会周而复始的推荐各种动画给我，只不过提到“死神”的频率有那么高。这一切源于我问了孙不堵网名的由来之后，顺嘴也问了一下Bleach的，我发誓，我只问了一句。结果Bleach这人就开始滔滔不绝地向我歌颂死神剧情有多好，反派多有魅力，主角有多帅，和孙不堵相比有过之而无不及。也是从那时候起，我才明白一个道理，如果一个有病的人建了个群，那这个群大概率集合的都是像他一样的人。</p>
<p>是的，Bleach是群主。是的，按照当年的传统，群文件里，一定会有，群主女装的照片。我保存了。我发誓，我只是怕他偷偷地删掉。只要他删了，我就会在第一时间把我保存的照片发出来，给他致命一击( ﾟ∀ﾟ)。</p>
<p>只是这么久过去了，久到我从一个什么都不懂的中学生变成了能顺利在网络上找到工作并讨生活的高中肄业人士（高考的流程对我来说实在是太复杂了，我妈想了很久也没有想到特别好的办法能让我去参加高考），Bleach也没有删掉他的女装照片。</p>
<p>Bleach依然是当年的那个Bleach，如果说这么多年来，他有哪里和从前不同的话，那只能是在他上了年纪之后，突然立志成为他妹妹的红娘，对他妹妹的感情生活分外关心，偏偏他又不认识几个正常的男性青年，于是转了一圈，把算盘打在了我身上。</p>
<p>某天他神秘兮兮地来找我。</p>
<p><em>Bleach：崽崽！你今年多大了</em><br><em>林静的儿子：比你小上七八岁吧</em><br><em>林静的儿子：怎么啦？突然发现自己变老了？</em><br><em>Bleach：屁！老子正值壮年</em><br><em>Bleach：这么说你今年21，还是22？</em><br><em>林静的儿子：22</em><br><em>Bleach：好，第二个问题</em><br><em>Bleach：崽！你的性别真的是男吧？</em><br><em>林静的儿子：？我要怎么跟你证明我是男的你才会信啊</em><br><em>林静的儿子：烦了</em><br><em>Bleach：崽坚持住！最后一个问题了！</em><br><em>Bleach：你是直男吗？</em><br><em>林静的儿子：就算你不是我也绝对是</em><br><em>林静的儿子：我觉得你应该反思一下为什么你总会让和你聊天的人血压飙升</em><br><em>Bleach：还好吧</em><br><em>林静的儿子：所以你到底啥事儿，这铺垫的已经要到我把你拉黑的边缘了</em><br><em>Bleach：这个嘛。</em><br><em>Bleach：其实呢。我有个小小的愿望</em><br><em>Bleach：我想我妹妹能谈一场恋爱。</em><br><em>林静的儿子：那这不应该找你妹吗</em><br><em>林静的儿子：你找我干嘛？</em><br><em>林静的儿子：卧槽你不会是想？？</em><br><em>Bleach：是的，我想把你介绍给我妹</em><br><em>Bleach：我只认识你一个适龄单身青年</em><br><em>林静的儿子：……所以你给你妹找男朋友的要求这么低吗？男的，直的，单身？</em><br><em>Bleach：当然不是！我是觉得你挺好的</em><br><em>林静的儿子：谢谢，我也觉得单身的我挺好的。</em><br><em>Bleach：真的吗？</em><br><em>Bleach：我妹超漂亮的哦</em><br><em>Bleach：[图片]</em><br><em>林静的儿子：？</em><br><em>林静的儿子：不是，这么漂亮的妹妹，你为什么要操心她的情感状况啊？</em><br><em>Bleach：因为我妹从来都没谈过恋爱啊</em><br><em>Bleach：据我所知你也是</em><br><em>Bleach：你俩就认识一下嘛，成不成看感觉啦</em><br><em>林静的儿子：emmmm</em><br><em>林静的儿子：等等，这张照片里的人和你发过的女装照片里的人也太像了吧？</em><br><em>Bleach：这有啥，我的亲妹妹不就是性转版的我吗？我俩长得像很正常吧</em><br><em>Bleach：不过你怎么还记得我女装的样子</em><br><em>Bleach：都多少年前发的了</em><br><em>林静的儿子：不对，这肯定是同一个人</em><br><em>林静的儿子：我修了那么久的图还是有点工作经验的</em><br><em>Bleach：眼神还挺好(ﾟーﾟ)</em><br><em>Bleach：如果我牺牲一个秘密可不可以换你和我妹交换联系方式啊</em><br><em>Bleach：其实，那张女装照片，就是我妹妹的照片啦</em><br><em>林静的儿子：……</em><br><em>林静的儿子：我真傻，真的</em><br><em>Bleach：？崽犯什么蠢事了？</em><br><em>林静的儿子：不重要了</em><br><em>林静的儿子：也许我应该重新评估一下你在我这里的信用</em><br><em>Bleach：我超守信的好吗！</em><br><em>Bleach：“推荐了‘半糖奶茶不要啵啵’给您”</em><br><em>Bleach：妹妹推给你了哦</em><br><em>Bleach：好好聊天！</em></p>
<p>我有点纠结要不要加Bleach的妹妹，如果只是当做朋友，那我绝对会毫不犹豫地加半糖奶茶不要啵啵的好友，尤其是在看了她的照片之后。Bleach太了解我了，或者说他妹妹的长相真的是完美戳中了我内心对未来女朋友的向往。可是现在还带着相亲的意味。</p>
<p>就在几天前，我妈也跟我提起了这个事情，她也想让我多接触接触女孩子，找个女朋友谈恋爱。我知道这么多年来，我妈一直在努力想弄懂为什么只有她能把我拉到正常时间线里。其实更早的时候她还想弄懂为什么我身上的时间总是滞后的，不过后来她放弃了，因为她开始变老了，她开始意识到如果她不在这个世界上了，我将成为一个无人能察觉到的幽灵。</p>
<p>别的人和这个世界总有千丝万缕的联系，而我只有一丝，就是我妈，我妈在发现这一点后，想了各种方法，做了各种努力，成功又失败地把这一丝变成了一缕，因为我它还是我妈。我和这个世界的联系增强了，但前提是我妈一直在。我和我妈都知道这是不可能的。这也不是那种“只要不说，就能当作不会发生”的事情。</p>
<p>所以在我妈说“我们小肥要不要找个女朋友呀？也许世界上多一个人爱你，你和世界的联系就会多一缕呢”的时候，我知道她在期待着什么。她期待这个世界上存在另一个可以把我绑在正常时间线的坐标。</p>
<p>但我没有回答我妈，就像现在我没有点添加好友。因为我从不认为世界上还会有另一个像我妈一样无条件爱我的人，首先她不会被我这种奇幻的存在吓到，其次她要经受和“虚拟”男友恋爱的感觉，最重要的一点是我不仅没法帮她做任何事，反而要她给我很多的爱。和我谈恋爱绝对不该是任何一个女孩的选项。“只要我不点添加，Bleach的妹妹过几天就该忘了她哥哥给她物色过的对象了吧。”我这样想着，关闭了和Bleach的聊天框。却没想到傍晚的时候我的手机“叮咚”一声响。“半糖奶茶不要啵啵”请求添加你的好友，是否同意？</p>
<p>我的大脑还没来得及反应，我的手已经点了同意。我盯着“你已同意半糖奶茶不要啵啵的好友请求，现在可以开始聊天了~”沉默许久，最终还是发了个你好的表情包过去。</p>
<p>人果然还是战胜不了自己的xp系统。思考的时候有多深远，下意识的反应就有多迅速。对面很快也给我回了个你好表情包。</p>
<p><em>半糖奶茶不要啵啵：你好呀，虽然我哥说他已经把我推给你了，但是我一直都没收到好友请求，所以就叫我哥把你推给我了</em><br><em>半糖奶茶不要啵啵：你不会介意吧？</em><br><em>林静的儿子：啊……</em><br><em>林静的儿子：不介意不介意</em><br><em>林静的儿子：我下午有点忙来着，所以才没加你…</em><br><em>半糖奶茶不要啵啵：嗯嗯</em><br><em>半糖奶茶不要啵啵：我理解啦，听我哥说你已经上班了？</em><br><em>半糖奶茶不要啵啵：工作确实会让人很忙</em><br><em>林静的儿子：我的工作也还好，时间比较自由</em><br><em>半糖奶茶不要啵啵：哦？</em><br><em>半糖奶茶不要啵啵：所以现在刚好不忙了吗</em><br><em>林静的儿子：对……</em><br><em>半糖奶茶不要啵啵：那太好啦，我也刚好下课</em><br><em>半糖奶茶不要啵啵：那我们就可以好好聊天啦</em><br><em>林静的儿子：好的</em><br><em>半糖奶茶不要啵啵：我哥说我的长相是你喜欢的类型</em><br><em>半糖奶茶不要啵啵：这是真的吗？</em><br><em>救命！半糖妹妹和Bleach的类型完全不一样啊！我招架不住了！…</em><br><em>林静的儿子：a……</em><br><em>林静的儿子：这个我一阵手忙脚乱。</em><br><em>半糖奶茶不要啵啵：哈哈哈你好可爱</em><br><em>林静的儿子：没人会不喜欢你的长相吧</em></p>
<p>我俩的信息同时出现在屏幕上。淦！我为什么这么手快！</p>
<p><em>半糖奶茶不要啵啵：哦？这么说你确实喜欢我</em></p>
<p>我心脏骤停，深深发觉自己低估了Bleach的家族遗传。</p>
<p><em>半糖奶茶不要啵啵：的长相？</em></p>
<p>对不起，我败了。</p>
<p><em>林静的儿子：对！</em><br><em>林静的儿子：我超级喜欢！</em><br><em>半糖奶茶不要啵啵：hhh</em><br><em>半糖奶茶不要啵啵：林同学，有没有人告诉你表白之前要先问问表白对象的名字的？</em><br><em>半糖奶茶不要啵啵：难道你要说“我超喜欢半糖奶茶不要啵啵”吗？</em></p>
<p>世界毁灭吧。我努力发出我最后的怒吼。“妈！把家里WiFi关掉！！”… 在我妈不明所以地询问中，我的CPU热度渐退。我退出了和半糖奶茶不要啵啵的对话框，回了我妈一句“我开玩笑的”，然后装作无事发生地点开了Bleach。</p>
<p>我努力寻找措辞。</p>
<p><em>林静的儿子：你妹妹……</em><br><em>Bleach：聊上了？</em><br><em>Bleach：你觉得我妹咋样</em><br><em>Bleach：不是我夸，我觉得我妹真的很不错</em><br><em>林静的儿子：等等！</em><br><em>林静的儿子：你不要说话</em><br><em>Bleach：好的乖崽</em><br><em>林静的儿子：你妹妹叫什么名字？</em><br><em>Bleach：崽！</em><br><em>Bleach：你都没问过我的名字！</em><br><em>林静的儿子：没爱过</em><br><em>Bleach：好吧(;´Д`)</em><br><em>Bleach：我妹妹叫倾倾啦</em><br><em>Bleach：夏倾倾淦！</em></p>
<p>名字也戳中了我的XP( ﾟ∀。)</p>
<p><em>林静的儿子：行了你退下吧</em><br><em>Bleach：所以爱会消失对吗.jpg</em><br><em>林静的儿子：我是一个毫无感情的杀手.jpg…</em></p>
<p> 我想象自己沉着冷静，缓缓点开了和半糖妹妹的对话框。</p>
<p><em>半糖奶茶不要啵啵：真要这样说的话我可能会介意哦</em><br><em>半糖奶茶不要啵啵：我还是更喜欢被叫真名呢</em><br><em>半糖奶茶不要啵啵：不过说起来我也不知道林同学的名字诶</em><br><em>半糖奶茶不要啵啵：我们交换一下真名好不好？</em><br><em>半糖奶茶不要啵啵：林同学？</em><br><em>半糖奶茶不要啵啵：林上班同学？</em><br><em>半糖奶茶不要啵啵：不会被我吓跑了吧( ﾟдﾟ)</em></p>
<p>半糖妹妹的消息停留在十分钟前，而且被她猜对了，我确实被吓跑了，但是……</p>
<p><em>林静的儿子：没有被吓跑</em><br><em>林静的儿子：刚被我妈叫走了</em></p>
<p>抱歉！恳请母亲大人替胆小的儿子我背个锅吧！</p>
<p><em>半糖奶茶不要啵啵：(〃∀〃)</em><br><em>半糖奶茶不要啵啵：太好了</em><br><em>半糖奶茶不要啵啵：我还以为又把人给吓跑了</em><br><em>林静的儿子：又？</em><br><em>半糖奶茶不要啵啵：啊啊不重要啦</em><br><em>林静的儿子：那我自我介绍一下？</em><br><em>林静的儿子：我叫林萧斐，虽然是你哥哥的好朋友，但是还算年轻…今年22岁，目前是自由职业，大概率以后也会是。</em><br><em>林静的儿子：对了，我已经不上学啦，就不要叫我同学了，感觉很怪的。</em><br><em>林静的儿子：爱好是推理相关吧，小说电影之类的都很喜欢</em><br><em>半糖奶茶不要啵啵：诶？这么正式的吗？</em><br><em>林静的儿子：到你啦，夏倾倾同学~</em><br><em>半糖奶茶不要啵啵：？</em><br><em>半糖奶茶不要啵啵：你怎么提前知道我的名字啦！</em><br><em>半糖奶茶不要啵啵：( ` ・´)你竟然找了我哥作弊！</em><br><em>林静的儿子：嗯嗯，因为夏倾倾同学也很可爱，忍不住问了你哥哥(ゝ∀･)</em><br><em>半糖奶茶不要啵啵：哼！</em></p>
<p>我这算，扳回一局了吗？</p>
<p><em>林静的儿子：但是别的事情我都没问了，别生气呀</em><br><em>半糖奶茶不要啵啵：那好吧，轮到我了</em><br><em>半糖奶茶不要啵啵：我名字你知道啦，然后年龄是21，今年在读大三，爱好半糖奶茶不要啵啵；爱好有很多，最近的是调戏我哥给我介绍的相亲对象</em></p>
<p>我正打算给名副其实的半糖妹妹改个备注，看见这句不由地手一抖。</p>
<p><em>林静的儿子：(ﾟДﾟ≡ﾟДﾟ)？</em><br><em>半糖奶茶不要啵啵：嘿嘿( ﾟ∀ﾟ)</em></p>
<p>我想不出她说这话的含义，是在开玩笑，还是在隐晦的表示她对这次“相亲”的抗拒？我绞尽脑汁，只干巴巴地问出一句</p>
<p><em>林静的儿子：你哥给你介绍了很多相亲对象吗？</em></p>
<p>全然忘记是她先加了我的好友。</p>
<p><em>半糖奶茶不要啵啵：当然没有！</em><br><em>半糖奶茶不要啵啵：他只介绍了你一个人！</em></p>
<p>我的心脏忽然开始重重地跳动，虽然我还不知道来自夏倾倾“调戏”的具体含义，但我很了解Bleach，他同样也喜欢调戏我，并且最终成了我最好的朋友。如果夏倾倾真的像他所说是性转版的他，那这种“调戏”是不是就意味着她对我感兴趣？我不敢继续想了。因为我真的很喜欢这种可爱的，活泼的，开朗的像小太阳一样性格的女孩。更要命的是她还很漂亮。如果皮囊让我对她产生了兴趣，那我不得不承认，就在这短短地交流后，我可耻地心动了。她会喜欢普通的我吗？她会接受错乱的时间吗？她会愿意尝试异常的生活吗？我不该想了。能做朋友就很好了。</p>
<p><em>林静的儿子：那这个爱好可以继续保持(ゝ∀･)</em></p>
<p>夏倾倾，我默念着她的名字，却把她的备注改成了半糖妹妹，我也不会和她见面的，还是叫网名吧。</p>
<p><em>半糖妹妹：小伙子蛮上道的嘛</em><br><em>林静的儿子：我向来很识趣的</em><br><em>半糖妹妹：真的？这和我哥说的不一样哦？</em><br><em>林静的儿子：Bleach老…哥说我什么了？</em></p>
<p>我暗暗思考Bleach说我好话的可能性，他如果想让我和倾倾妹妹顺利相亲的话，应该会在他妹妹面前夸我的吧？</p>
<p><em>半糖妹妹：我哥说你是网上怼人的常胜将军，经常让他又爱又恨？？</em></p>
<p>我宣布Bleach不再是我的好友了！</p>
<p><em>半糖妹妹：可是你跟我聊的感觉完全不是这样呀</em><br><em>林静的儿子：其实我不是他说的那样的……</em><br><em>林静的儿子：我平时还是很温和的，就是你哥吧，他总招惹我</em><br><em>半糖妹妹：嗯嗯我懂！</em><br><em>半糖妹妹：我哥确实有点讨人嫌</em><br><em>半糖妹妹：但是我觉得我哥还是说对了一句话的</em><br><em>林静的儿子：什么？</em><br><em>半糖妹妹：你看起来，真的很好欺负|∀ﾟ</em></p>
<p>……受死吧！Bleach老贼！… 我不知道该怎样才能结束这个越来越奇怪的话题，好在半糖妹妹似乎也知道羊毛不能可着一只羊薅，人也不能可着一天调戏，她主动地换了个话题。</p>
<p><em>半糖妹妹：你有在玩什么游戏吗，小肥？</em><br><em>半糖妹妹：啊！抱歉打错字了，输入法默认的(´ﾟДﾟ`)</em><br><em>林静的儿子：……其实我妈也这么叫我，你怎么叫都好的</em><br><em>半糖妹妹：你怎么这么好说话呀</em><br><em>林静的儿子：我偶尔会玩一会儿，不过都不是主流的那些</em><br><em>半糖妹妹：好想欺负你哦</em><br><em>林静的儿子：？</em><br><em>半糖妹妹：哈哈你都玩过什么？说不定我也玩呢</em><br><em>林静的儿子：都是单机游戏，星露谷物语之类的……</em><br><em>半糖妹妹：星露谷物语！</em><br><em>半糖妹妹：我超喜欢的！</em><br><em>半糖妹妹：而且它最近出联机模式啦！你不知道吗？</em><br><em>林静的儿子：诶？</em></p>
<p>所以说有时候半年的时间差真的很要命，一个好端端的单机游戏干嘛要做联机模式啊！</p>
<p><em>半糖妹妹：要一起玩吗？</em></p>
<p>完蛋了！我竟然要因为一个联机模式翻车了吗？？</p>
<p>其实从多年前第一次用电脑玩祖玛开始，我的游戏之魂就缓缓燃烧了。但是烧了这么多年，我也只涉猎过单机游戏，不是我不想玩大型网游，是我玩不了任何联机游戏。上网可以，联机不能，我身上的时间差规则就是这么摸不着头脑。</p>
<p>我妈知道这件事的时候还想过要努努力再找个什么方法对策，是我制止了我妈。我妈不知道我怎么了，只当我是玩不到游戏有些消沉，她劝过我：“不要紧的，小肥。妈妈总会找到办法的，没道理你可以上网但不能玩联机游戏的呀？我再想想，也许是需要我点击下载？”我抓住我妈想要拿鼠标的手，“没事的妈，我不玩这种游戏就好了。我身上的时间差，从来都没有讲过道理的。”</p>
<p>自那以后，我再没下载过联机游戏。所以我也万万没想到，真的会有游戏先出单机本体再出联机模式。我看着倾倾妹妹向我发出的邀请，又看看躺在库里的游戏，也许这种“联机模式”就是我的办法呢？我点开游戏界面，刷新，再刷新。无事发生。我的星露谷物语没有任何更新下载。我苦笑，单机才是我的常态。我不想扫了倾倾妹妹的兴，只好拼命给自己找补。</p>
<p><em>林静的儿子：不好意思……我的电脑前一阵坏掉了</em><br><em>林静的儿子：现在还没买新的，没法玩游戏</em></p>
<p>太蹩脚了，我心想，只要Bleach跟她提过我的工作需要高强度对着电脑，她就会立刻发现这是个谎言。</p>
<p><em>半糖妹妹：这样哦</em><br><em>半糖妹妹：好可惜呀</em></p>
<p>她相信了？难道Bleach没把我卖到这个地步？</p>
<p><em>林静的儿子：半年后有个我喜欢的电脑型号会发售，到时候我应该会买新电脑，如果那时候你还想玩的话，可以再找我</em></p>
<p>我极力挽救。</p>
<p><em>半糖妹妹：哎呀呀，一下就把我支到了半年之后吗？</em><br><em>半糖妹妹：你到底懂不懂女生约你玩游戏是什么意思呀？</em><br><em>林静的儿子：呃，什么意思？</em><br><em>半糖妹妹：想听你声音的意思( ´∀`)</em></p>
<p>我确实没经历过如此波涛汹涌的风浪，现在的女孩子都这么乘胜追击的吗？我觉得我对倾倾妹妹的好感来源还算是有迹可循，可是为什么倾倾妹妹对我也？这绝对不是我的错觉了吧？第一次相亲就大获成功？我的女人缘已经好到可以隔着网线捕获美女的芳心了？</p>
<p>我的脑海中一边不断循环“警惕新型网络陷阱”，一边复盘了一下今晚和倾倾妹妹的对话。Bleach却有此妹，联系方式也对得上，那么就可以排出网络诈骗的可能性；我的主页一张我的照片都没有，所以也能排除倾倾妹妹见色起意的可能性；那么还剩下什么？淦！不会吧？？</p>
<p><em>林静的儿子：你说实话，你是不是Bleach假扮的？</em><br><em>半糖妹妹：疑问三连.jpg</em><br><em>半糖妹妹：你的脑袋里想的都是什么呀？</em><br><em>林静的儿子：真不是Bleach？</em><br><em>半糖妹妹：……真不是</em></p>
<p>半糖妹妹向你发起语音通话我茫然地点击了接通。</p>
<p>“喂？能听到吗？”一个清澈的女声从电话那头传来。</p>
<p>“……能。”我听见自己说。</p>
<p>“能听到就好，这样能相信我不是我哥了吧？”她听起来有些无奈，“林小肥你脑子里想得都是什么呀，被我哥迫害的这么严重吗？”</p>
<p>我一下子清醒了，这么丢脸的锅必须推给Bleach！“我就是怕了……你哥时不时的就会这么戏弄我……”</p>
<p>我想了想，还是道歉吧，“对不起啊，我突然问你这么奇怪的问题。”</p>
<p>电话对面的倾倾笑了一声，“你就这么干巴巴的道歉吗？”</p>
<p>“啊，”我盯着通话界面，“我给你买杯奶茶赔罪？”</p>
<p>“哈哈哈好呀，你知道点什么吗？”倾倾的声音听起来很开心。</p>
<p>“嗯……半糖奶茶不要啵啵？”</p>
<p>“答对啦，那要奖励你什么好呢？”</p>
<p>“那可以奖励今晚不调戏我了吗？”我下意识说出了这个回答。</p>
<p>倾倾的声音听起来有些惊讶，“你很在意这个吗？”</p>
<p>“一点点……”明明都是调戏，哥哥和妹妹给我的感觉相差好多。</p>
<p>“那好吧，不过明天我要双倍调戏哦~”倾倾还在笑。</p>
<p>“啊？”我尬住。</p>
<p>“你实在太可爱了，我会忍不住的。”倾倾答道。</p>
<p>我是在想不通为什么可爱这个词频频被倾倾用在我身上（是的我已经单方面在心里直呼妹妹的名字了），明明我们两个相比，她是更可爱的那个。更让我不能理解的是，可爱难道不应该是形容外表的吗？为什么她会用来形容我的，我的说话方式？总不会是通过对话就看到我的内在了吧？</p>
<p>总之，在倾倾锲而不舍地夸赞我可爱之后，我甚至对自己产生了一种错觉，也许我真的很可爱？可爱到已经能通过文字散发出来了？我不由自主地走到正在沙发上敷面膜的我妈面前，忽忽悠悠地问了句：“妈，你觉得我可爱吗？”吓得我妈面膜掉到了腿上。</p>
<p>我妈有点心疼，捞起来又往脸上贴，口齿不清地回答我：“崽，你要是十二岁问我这个问题，我一定会说你是天底下最可爱的宝贝；可你二十二岁才问我这个问题，是不是有点幼年期滞后了？是，咱们确实有时间滞后这个毛病，可是咱们差的是183天，可不是183个月啊。”我叹气，果然是我想多了。手里拿着的手机突然传来一声咳嗽。我吓了一跳，点开屏幕一看，心脏瞬间骤停。我忘记挂电话了！我连忙回了卧室，回想了一下我妈刚才都说了啥，血压直线上升。</p>
<p>我下了极大的决心，对着电话那边虚弱地“喂”了一声。</p>
<p>倾倾听到了，“我不是有意听你和阿姨聊天的。”</p>
<p>我痛定思痛：“是我忘挂电话了……既然你听到了，那你有什么想说的吗？”我静静等待即将到来的询问。</p>
<p>“咳咳，”倾倾顿了下，“奶茶很好喝，谢谢天底下最可爱的宝贝。”</p>
<p>“什么……？”我接不上话。</p>
<p>“这句不是调戏！”倾倾又接着解释道，“我是在陈述事实。”</p>
<p>真是太怪了，这种感觉，这样亲密的对话，就像是我和倾倾已经是正在热恋的情侣一样，“为什么你完全没有初识一个陌生人的感觉呢？”</p>
<p>“嗯……虽然很不愿意说，但是不说的话好像会让你很困惑，因为我哥从很久以前就总是跟我讲你的事情，在我哥这么多年的念叨下，我早就从对你感到好奇转变到了非常想认识你的阶段了。也可以称得上我单方面和你神交已久了？所以现在终于和你有了联系，就不自觉的把你当作了认识很久的朋友，”倾倾好像喝了口奶茶，“而且你和我聊天的种种表现又和我哥描述中的不太一样，这种反差真的让我觉得很可爱，就忍不住多说了几句。”</p>
<p>倾倾妹妹，不用给我留面子了，如果Bleach经常和你聊起我的话，那我今天的表现已经可以称作判若两人了，尤其是我已经预料到Bleach一定会夸大描述的(*ﾟーﾟ)</p>
<p>“那么，解释完毕，你可以接受这个说法吗？”倾倾问道。</p>
<p>“那你真的是要和我相亲的？”我也不知道我的重点怎么就到了这里。“这个嘛，你觉得呢？”</p>
<p>“我觉得应该只是个借口吧。”我老老实实地回答，“你还在上大学呢，而且看起来不像是缺少追求对象的样子。”</p>
<p>“这些和相亲有什么关系？”倾倾叹气，“林小肥你好直啊，我让我哥找什么借口不行非要找相亲的借口吗？鉴于你并不知道女生找一个男生打游戏是想要听这个男生的声音，我想你也一定不知道，如果女生一直夸一个男生可爱的话，那一定是对他心动了。”</p>
<p>倾倾说什么？我怎么听不懂呢？？我宕机了，完全处理不了信息量如此多的一句话，只能再次抓住了奇怪的点：“直是什么意思？”</p>
<p>“……”倾倾又叹气，好像已经对我抓错重点的行为失去了疑惑的力气，“夸你呢。”</p>
<p>十分三十七秒后，我的意识回笼，我终于发现，倾倾好像对我表白了。我：(|||ﾟДﾟ)我刚才在问什么这么久了我都没有说话倾倾是不是觉得我在拒绝她我竟然被漂亮妹妹表白了天呐真的是对我说的吗手机上显示通话还在继续。</p>
<p>“倾倾！我刚才没有脑子！”情急之下，我直接喊出了半糖妹妹的名字。</p>
<p>“回神了？”倾倾听起来很幽怨，“我还以为我人生中第一次表白就这么没有结果的结束了呢。”</p>
<p>“倾倾对不起对不起！”我惊恐。</p>
<p>“如果林小肥同志再不给我回答的话我可就后悔了哦。”</p>
<p>我可以我可以我可以！我内心疯狂呐喊，说出口的却是：“我不知道……你会接受只能网恋吗？”</p>
<p>“你是怕见光死吗？”倾倾不幽怨了，“我觉得可以先试试看哦？没准我就会喜欢你到不在意外表了呢？”</p>
<p>没道理让女生一直A我啊！我也应该站出来直面自己的问题了！“好！我对半糖奶茶不要啵啵超有好感！让我们在一起试试吧！”我既没控制住音量，也没控制好脑子。一阵敲门声响起，我妈模糊的声音从门外传来：“小肥是要订奶茶吗？给妈妈也带一杯呗？”倾倾的笑声混着我羞愧的回答：“不是啊妈！我没要订奶茶！”</p>
<p>“从现在开始你就是我男朋友了哦。”“在山的那边海的那边有一只林小肥，他腼腆又可爱，他活泼又毒舌，哦可爱的林小肥，他竟有两副面孔，哦可爱的林小肥，他是我的男朋友~”倾倾在唱歌。</p>
<p>“别蛤我了……”我有气无力。</p>
<p>“我这是在歌颂你(〃∀〃)！”倾倾欢快地回答。“行吧，都依你都依你。”</p>
<p>我放弃抵抗。倾倾又愉快地唱了起来，好吧，听久了其实还挺好听的。我的手机突然疯狂震动，我点开一看，好家伙，全是Bleach。“对了，我把咱俩的关系告诉我哥啦。”倾倾正巧开口。天啊！我忘了和倾倾在一起之后还要面对Bleach这茬了！遇事不决先装死，我决定暂时当作无事发生，继续和倾倾贴贴，直到十点多钟倾倾说第二天要上早课所以要早睡，我们的通话才结束。我看着手机上显示的五个多小时通话时长，突然对相对论产生了深深的感触，爱因斯坦诚不欺我。</p>
<p>“是时候面对疾风了。”我心想着，于是怀着一种仇人（？）变亲戚的微妙心情点开了和Bleach的对话框。</p>
<p><em>Bleach：你和我妹成了？？？</em><br><em>Bleach：虽然我有撮合你们的意思，但不代表我能接受你俩认识的第一天就在一起了啊？？</em><br><em>Bleach：可恶的林崽，你究竟给我妹画什么大饼了，她怎么可能这么轻易的就答应和你站在一起( ` ・´)！</em><br><em>Bleach：人呢！给爸爸出来！</em><br><em>Bleach：不对，你现在是我妹夫了</em><br><em>Bleach：啊啊啊臭崽子给哥出来！</em><br><em>Bleach：今晚你必给我解释解释究竟是怎么搞定我妹的！</em><br><em>Bleach：为啥你的语音打不通？</em><br><em>Bleach：我妹的也打不通</em><br><em>Bleach：啊啊啊气死了不许耽误我妹睡觉！</em></p>
<p>我看着满屏的怒火心情复杂，从今往后我真的要喊Bleach哥了，再见了我放纵的青春。但名叫小肥的男人仍旧可以给Bleach最后一击！</p>
<p><em>林静的儿子：我没有搞定倾倾，是倾倾搞定了我哦</em><br><em>Bleach：？？我不信！</em></p>
<p>Bleach回复的速度快得惊人，我怀疑他一直蹲守在手机面前。</p>
<p><em>林静的儿子：倾倾妹妹向我表白的时候我也不信呢ᕕ( ᐛ )ᕗ</em><br><em>Bleach：不可能！！！</em><br><em>Bleach：妹妹</em><br><em>Bleach：我的妹妹！</em><br><em>林静的儿子：倾倾说多亏了你经年累月的和她讲我的事，她一直对我心驰神往充满好奇，今日得以一见，激动之情溢于言表，遂表白之。</em><br><em>Bleach：你们还见面了？？？</em><br><em>林静的儿子：冷静冷静，为了押韵才这么写的(ﾟーﾟ)，不过我见到了倾倾的照片，四舍五入也算见面了吧？</em><br><em>Bleach：妹妹，我的妹妹</em><br><em>林静的儿子：( ´_ゝ`)怎么安排相亲的是你，接受不了的也是你啊Bleach：我真傻，真的，我单知道你俩可能会在一起，却不知道是今天</em><br><em>林静的儿子：好了大舅哥，别祥林嫂了，快跟我讲讲倾倾妹妹都喜欢啥？</em><br><em>Bleach：我不！</em><br><em>Bleach：自己摸索去吧臭林崽！休想抄答案！</em>*<br>*<br>深夜是属于思考、回忆与哲学的，我喜欢每个寂静的深夜。我可能会坐在桌前复盘今日的工作，也可能打开电脑浏览电子相册，但更多的时候，我会窝在被窝里，开一盏夜灯，思考我错乱的人生。我一直知道我妈为了我放弃了很多，她本可以拥有的爱情，本可以大展身手的工作，本可以清闲自由的晚年，统统因为一个无法别人看见的儿子失去了。真的值得吗？我值得被爱吗？如果在发现我有问题的时候就放弃我，我妈会不会获得更幸福的人生？</p>
<p>曾经的某个深夜，我就这样问着我妈。我妈用她的温柔回答了我，“人生就是无数个选择糅合在一起，我选择了你，是因为我认为你是更重要的那一边，每一次选择，你都是更重要的那一边。我的崽崽，你永远值得被爱，爱你就是我的幸福。”</p>
<p>当时的我并没能理解我妈的话。从小我妈就教育我要爱自己，可是妈妈，你的每一次选择都是我，又要怎么爱自己呢？我不认为我妈是个传统的女人，倘若她传统，那我决绝是不该存在于世，可说她不传统，她却在用尽她的一切来爱我，时间都抛弃了我，我妈却还拽着。后来我依旧觉得自己不值得被爱，但我没再跟我妈说过。</p>
<p>但今天是特殊的一天，今天我认识了倾倾，一个漂亮的，古灵精怪的，处处吸引着我的女孩儿，而在认识倾倾的四个小时后，她就成为了我的女朋友。一切像做梦一样，我被除了我妈之外的人选择了。不是来自血缘，不是来自亲情，只是因为我自己。我想，我终于可以相信我是值得被爱的。我想，深夜大概也可以是属于爱的。真是完满的一天。</p>
<p><em>倾倾妹妹：嗯哼</em><br><em>倾倾妹妹：小肥起床了吗？</em><br><em>倾倾妹妹：今天天好冷我不想起床(;´Д`)</em><br><em>倾倾妹妹：我去吃早饭了</em><br><em>倾倾妹妹：小肥还没起吗？</em><br><em>倾倾妹妹：不会吧不会吧，小肥不会是赖床大臭猪吧</em></p>
<p>我从床上爬起来之后就看到了倾倾的信息轰炸。</p>
<p><em>林静的儿子：晚睡晚起是好文明！</em><br><em>林静的儿子：打工人的生活你不懂，我才不是大臭猪</em></p>
<p>倾倾没回我，大概是在上课。我抻了个懒腰走出房门，看见我妈正准备出门。“妈，今天天冷，你出门多穿点。”我随口说道。“你咋知道？”我妈惊讶。我看着窗外绿意盎然的杨树，“有人告诉我的。”</p>
<p><em>倾倾妹妹：大臭猪才会晚起</em><br><em>倾倾妹妹：都这个点了，大臭猪有好好吃饭吗？</em><br><em>林静的儿子：正在做</em><br><em>林静的儿子：你确定要叫自己的男朋友大臭猪吗？</em><br><em>林静的儿子：那你可就要和大臭猪贴贴了哦(｡◕∀◕｡)</em><br><em>倾倾妹妹：！你变了</em><br><em>倾倾妹妹：你果然变了！</em><br><em>林静的儿子：啥？</em><br><em>倾倾妹妹：我哥说的毒舌版林小肥出现了！</em><br><em>倾倾妹妹：一到手就变了(;´Д`)*<br>*倾倾妹妹：这就是大臭猪吗(;´Д`)</em><br><em>林静的儿子：喂喂……</em><br><em>倾倾妹妹：不过这样也很可爱！</em><br><em>林静的儿子：哈？</em><br><em>倾倾妹妹：夸你呢夸你呢</em><br><em>倾倾妹妹：我要去参加食堂打饭大赛了！一会儿聊哦！</em><br><em>我可能这辈子都搞不懂倾倾觉得我可爱的点究竟在哪里了( ﾟ∀。)</em><br><em>林静的儿子：我的早午餐.jpg</em><br><em>倾倾妹妹：哇(ﾟ∀ﾟ)看起来好有食欲！</em><br><em>倾倾妹妹：我的午饭不香了</em><br><em>倾倾妹妹：林小肥同志竟然还有人妻属性！</em><br><em>倾倾妹妹：赚到了赚到了</em><br><em>林静的儿子：……这只是成年人必备的技能吧</em><br><em>林静的儿子：你是怎么对着一张泡面图说出这些话的</em><br><em>倾倾妹妹：因为这是个豪华plus版的泡面呀</em><br><em>林静的儿子：我有理由怀疑你不会煮泡面</em><br><em>倾倾妹妹：糟糕，被发现了.jpg</em><br><em>倾倾妹妹：嘿嘿</em><br><em>倾倾妹妹：你上了贼船可就不能下去了</em><br><em>倾倾妹妹：暗中观察.jpg</em><br><em>林静的儿子：彳亍口巴</em><br><em>倾倾妹妹：那么可爱的人妻男朋友，你愿意给你弱小可怜吃不好的女朋友一些安慰吗(ﾟ∀ﾟ)</em><br><em>我脸上的傻笑突然刹了车，斟酌几番，我决定误解倾倾的意思。</em><br><em>林静的儿子：我给你点个下午茶？前提是不许再叫我人妻了</em><br><em>倾倾妹妹：拿出你的诚意.jpg</em><br><em>林静的儿子：奶茶？</em><br><em>倾倾妹妹：哼</em><br><em>林静的儿子：小蛋糕？</em><br><em>倾倾妹妹：想要步行街那家的拿破仑蛋糕！</em><br><em>倾倾妹妹：可以吗可以吗(〃∀〃)</em><br><em>林静的儿子：好</em><br><em>林静的儿子：骗吃骗喝的女朋友</em><br><em>倾倾妹妹：ᕕ( ᐛ )ᕗ</em></p>
<p>诸如此类的对话发生了一次又一次，大概一个月之后，我看着通过这种方法记了满满三页的“倾倾妹妹喜好表”，才突然后知后觉，原来收买倾倾的胃就可以轻松收获巨量的好感度？于是我把“倾倾妹妹喜好表”更名为“倾倾妹妹喂养指南”，还增加了投喂倾倾的频率。</p>
<p>又过了大概一个月后，我听着倾倾抱怨自己换季的衣服变紧了的语音陷入沉思：倾倾应该还没发现罪魁祸首是我吧？好在倾倾只是随意的提了一嘴，没有深入这个话题，我松了一口气之余，默默降低了投喂频率。在我放松警惕又给倾倾点了杯奶茶之后，倾倾突然给我打了语音电话。</p>
<p>“林小肥同志，你又给我点奶茶了？”</p>
<p>“对啊，怎么了，送过去的奶茶出问题了吗？”我忙着给新接的一家摄影工作室修图，没怎么在意倾倾的语气。</p>
<p>“这个月我胖了五斤，林小肥有什么头绪吗？”</p>
<p>“啊？”我手一抖，删错了一个图层。</p>
<p>“嗯哼，据不完全统计，这个月你给我点了五次蛋糕三次奶茶还有两次炸鸡，有我肚子上新长出来的肉做物证，本庭宣判，林小肥犯罪事实成立( `ー´)”倾倾停下来，听起来像是喝了口奶茶，“林小肥你认罪不？”</p>
<p>我连忙停下手里的工作，“倾倾大 法官，我请求戴罪立功！”</p>
<p>“很好，本法官也正有此意，”她又发出了嘬奶茶的声音，“就罚你帮本法官消耗卡路里好了。”</p>
<p>我傻眼了，“这怎么帮？”</p>
<p>“本法官听说有效的亲亲可以消耗大量的卡路里，你来帮我试试？”我吓得差点丢了手机。“我说，咱俩也该见面了吧？”倾倾在电话那头催促，“你放心林小肥同志，组织既然已经选择了你，就不会因为你的外形条件放弃你哦。”</p>
<p>我在挣扎，我在思考。现在就要在“全盘托出”和“带着我妈去约会”这两个死亡选项里进行选择了吗？</p>
<p>“你是不是又害羞啦？”倾倾见我久久没有回应，开始胡乱猜想，“是觉得一见面就和我亲亲会不好意思吗？还是在想见我要穿什么衣服？怎么不说话了？”</p>
<p>我还想挣扎，“倾倾……现在见面，是不是有点早？”</p>
<p>“还早吗？这都下午三点啦，等你过来正好到晚饭时间，我学校附近有家超好吃的饭馆，正好带你过去尝尝。”</p>
<p>“我说的不是这个时间……”我还想努力。</p>
<p>“那是什么？”倾倾疑惑，“你不会不想见我吧？”</p>
<p>“我当然想！”我急于辩驳，下意识的提出了那个非常离谱的要求，“那你愿意连带着也见我妈一面吗？”</p>
<p>“哈？”这回轮到倾倾震惊了。</p>
<p>啊啊啊来个人杀了我吧，为什么我不会时间回溯啊！倾倾很快就调整好了她的失态，“原来林小肥这么快就想让我见家长了吗？”她极力挽救着这段失败的对话，但语气中的僵硬还是出卖了她。</p>
<p>“你别紧张，我不是要你见家长的意思……”我不知道该怎么正确表达自己提出这个建议时脑子里想的是什么，毕竟以正常人的角度来看这实在是太跃进了，“我就是，有一个必须带上我妈的理由。”我苍白的解释。</p>
<p>“什么理由？”倾倾问道，“你的家教很严吗？啊，”她像是突然想起了什么事情，“好像是听我哥说过，他们同城线下面基好几次，你都没去参加，到现在我哥也没见过你，那就是因为家教严吧？”</p>
<p>“嗯……我也可以接受阿姨一起来吃饭的，”倾倾好像做出了什么决定在努力说服自己，“那我得好好打扮一下才行，阿姨喜欢什么样的女孩子？温柔的？端庄的？”</p>
<p>“是我的原因。”我打断了倾倾，我不该再瞒着她了，“我不知道你会不会相信，但我接下来要说的都是真的。我和你，不，和除我之外的所有人，并没有生活在同一个世界里，我生活的世界时间滞后于你生活的世界，它们相差了183天。”</p>
<p>我还是说出来了，事到如今，我竟感觉不到丝毫的紧张。</p>
<p>“什…么？你在说什么？”</p>
<p>“我说，我一个人没办法去你学校找你，没办法和你一起吃饭，也没办法亲吻到你，因为我们之间隔着的不是空间，是时间。”</p>
<p>“林萧斐…你是在开玩笑吗？”</p>
<p>“没有开玩笑，抱歉倾倾，我应该第一天就告诉你的，是我太卑鄙，是我太胆小，是我太想接近温暖了。”我闭上眼睛，“你就是证明了我值得的太阳。”</p>
<p>“你让我想想，让我……我可以先挂了电话吗？”</p>
<p>“好。”</p>
<p>那天约的见面就这么不了了之了。我和倾倾还是会在网上聊天，但仅限于“早安”和“晚安”。</p>
<p>我在折磨中的等待中惶惶度日，时间被拉得无限长，我无时无刻不在后悔告诉了倾倾我的怪异，却也无时无刻不在庆幸自己早早的让倾倾脱身于虚构的美梦。我就是不正常的，我无法改变我的不正常。我想逃避最后的宣判，可我更想和倾倾再多接触一会儿，哪怕只是早安晚安。还是Bleach最先找到我。</p>
<p><em>Bleach：你把我妹怎么了？</em><br><em>林静的儿子：倾倾出什么事了？？</em><br><em>Bleach：我从没见她这么消沉过，问她她也不说，再问就只说在考虑一件很重要的事。</em><br><em>Bleach：跟你有关系吗？</em><br><em>林静的儿子：我</em><br><em>林静的儿子：她大概在考虑如何开口说和我分手的事情吧</em><br><em>Bleach：怎么回事？</em><br><em>Bleach：你俩之前不是很好吗？还一起气我来着</em><br><em>Bleach：你干啥对不起我妹妹的事情了？？</em><br><em>林静的儿子：算是吧</em><br><em>林静的儿子：我瞒了她一些事……前几天才告诉她</em><br><em>Bleach：你怎么回事！</em><br><em>Bleach：到底是什么大事啊？？</em><br><em>Bleach：我能看出来我妹很喜欢你，所以你到底瞒了她什么才能让她现在这么消沉啊？</em><br><em>林静的儿子：对不起我</em><br><em>Bleach：和我妹道歉去！</em><br><em>Bleach：我不管你俩分不分手，你都给我把她哄好了( `д´)！</em></p>
<p>我点开了倾倾的对话框，我知道我现在不该干扰倾倾做判断，但是Bleach给了我一个理由，不是吗？</p>
<p><em>林静的儿子：倾倾？</em><br><em>林静的儿子：如果你想和我分手但不知道怎么说的话</em><br><em>林静的儿子：发一个碎掉的心给我</em><br><em>林静的儿子：我就知道了。</em><br><em>倾倾妹妹：❤</em><br><em>林静的儿子：倾倾？？</em></p>
<p>我像疯了一样点击着语音通话，偏偏网卡得要死。也许只过了五分钟，我却感觉像过了一个世纪，语音电话终于打通了。</p>
<p>“倾倾，你……？”我紧张的要命，“你有没有发错表情？”却只敢问出这样的问题。</p>
<p>“没有。”倾倾的声音听起来有点模糊，“还有件事你没告诉我。”</p>
<p>“什么？”</p>
<p>“如果我不能见到你，为什么你还说了要带着阿姨和我一起见面？”</p>
<p>我连忙把我身上所有怪异的现象都告诉了倾倾。</p>
<p>倾倾听完我的话，想了想，“阿姨是可以见到你的，但是我不行，是吗？”</p>
<p>“是这样的。倾倾，我知道你一定很为难，这件事全都是我的错，我应该在第一时间就告诉你，但是倾倾，我绝对绝对没有玩弄你感情的意思，我当时没能开口，只是因为…”我为自己的无耻感到羞愧，“只是因为我盼望自己也能和喜欢的人谈一场恋爱。”</p>
<p>“你想要什么补偿我都接受，只要你不把我删掉。”我怎么敢谈条件，我竟然敢找理由。</p>
<p>“我还是不太相信你说的话，我要和你见一面。”倾倾补充道，“在我学校门口，现在。”</p>
<p>“可是我们看不到彼此……？”</p>
<p>“那就麻烦阿姨一起来了。”</p>
<p>“妈！！”我急急忙忙穿好衣服，去敲我妈卧室的门。</p>
<p>“你要是没有正经事跟我说我就让你回忆回忆妈妈锤头的厉害( `д´)！”</p>
<p>糟糕，是我妈的下午觉时间，不过倾倾更重要！</p>
<p>“妈快帮帮我，我要去见你未来儿媳妇！”</p>
<p>“哈？？”我妈被我的话弄得头晕目眩，恍恍惚惚地跟我出了家门，直到坐上了出租车，我妈才恍然大悟般的让我从实招来。</p>
<p>我长话短说，跟我妈介绍了一下倾倾。</p>
<p>我妈陷入沉思，我看着前方空无一人的主驾座位陷入沉思，“妈，你上车之后是不是还没说我是你儿子？”</p>
<p>我妈被点醒，“啊司机师傅你别紧张，我在和我儿子说话呢。”</p>
<p>我妈话毕，我看着突然出现的出租车司机，见怪不怪的冲他笑了笑，没想到出租车司机瞬间留下了两行冷汗。</p>
<p>“大姐，你不是一个人上的车吗？”司机的声音在颤抖。</p>
<p>“两个，两个，”我妈镇定自若，“你可能没注意。”</p>
<p>这车我一秒也坐不下去了。倾倾！我要见倾倾！我勉强同意了我妈制定的方案，由她先出面去找倾倾，获得倾倾的同意之后，我俩再见面。我本来想争取一下，但我妈一句“就你现在这样子，能跟她解释清楚吗？最该告诉你女朋友的事情你偏偏瞒着，翻车了人家也只是想验证一下你是不是说谎的渣男。这么好的女孩要是再被你这张笨嘴气走，那我去哪再找个儿媳妇”说得我哑口无言。</p>
<p>我妈看我委屈，又安慰我，“你呢一会儿好好想想等见了女朋友到底该说点啥，多过几遍脑子，别把小姑娘吓跑了。”</p>
<p>“倾倾才不会被吓跑！”我下意识想拿自己犯过的蠢举例子，仔细想想又未免太丢人，于是改口：“好吧。”</p>
<p>我和我妈终于坐车到了倾倾念的大学门口，等我俩下车后，出租车司机的起步速度快得惊人，三秒之内就消失在了我的视野之外。学校门口熙熙攘攘好不热闹，但我知道我要见的人并不在其中。</p>
<p>“妈，你有看到倾倾吗？你认得出来吗？”我紧张地询问。</p>
<p>“我觉得我还老眼昏花到找不出你照片上那么漂亮的小姑娘，不过这门口还真没有，是不是在里面？我进去看看，你就在这等我吧。”我妈跃跃欲试。</p>
<p>我的脸拧巴在一起，既想跟我妈一起去，又觉得要是一会直接出现在倾倾面前会吓到她(*ﾟーﾟ)。</p>
<p>“好了小肥，妈妈出马你放心！”我妈拍了拍我，“诶我好像看见一个和照片上很像的女孩儿，我过去看看！”</p>
<p>我妈健步如飞地奔向了一个我看起来没人的方向，留我一个人在学校门口继续拧巴。</p>
<p>我望眼欲穿地盯着我妈的背影，她停在了一颗树下，似乎在和什么人交谈。她的对面是倾倾吗？我什么都看不到，只能想象倾倾现在的模样。</p>
<p>她看到我妈会紧张吗？</p>
<p>她还在生我的气吗？</p>
<p>她能接受这种超现实的展开吗？</p>
<p>不对不对，我应该想一会儿该和倾倾说什么才能把她哄好。可是我又不想错过我妈和倾倾的交谈，哪怕我只能看到我妈。</p>
<p>凌厉的秋风扬起了一片灰尘，我不幸中招，激出了生理泪水，视线模糊间，我似乎看见我妈对面出现了一个身影。</p>
<p>倾倾？？我不自觉地冲着那个身影招了招手。</p>
<p>她好像笑了，我看不太清。我很想立即冲到倾倾面前，但想着我妈的话又有些犹豫。</p>
<p>就在我纠结的时候，我妈给我打了通电话。“快过来吧，别站那傻笑了，小肥怎么越长大越蠢了？”</p>
<p>我直接一个猛冲！不过在离倾倾和我妈不到五米的时候，我意识到这个形象冲到倾倾面前确实是有点蠢，于是一个急刹改成快速竞走。</p>
<p>三米，两米，一米，我听到倾倾憋不住的笑声了(*ﾟーﾟ)。</p>
<p>倾倾发现了她的失态，扭过头不再看我，转而看着我妈。</p>
<p>我的眼里只有倾倾，她比照片上好看一万倍！我站到了我妈旁边，开始看着倾倾傻笑。</p>
<p>我妈捅捅我。</p>
<p>我：“倾倾对不起！都是我的错！你想怎么罚我都好，就是可以不分手吗？”可能碍于我妈在这，倾倾只是微笑没有说话。</p>
<p>我妈顶着一副“难道我生的真是个傻儿子？”的表情看着我，她欲言又止，最后还是没忍住，“小肥，既然你和倾倾能见到对方了，那我就先回家了。”</p>
<p>她低声补充道，“你好好把握好好把握呀，倾倾真的是个很好的女孩儿。”接着又恢复了正常的音量，“不用送我了，晚上你自己解决晚饭吧，正好我出来了，这就找你曹阿姨聚聚去。”</p>
<p>我妈眨眨眼睛，我回以一个眼神，表示收到，于是我妈头也不回地走了。</p>
<p>“倾倾……”我打算使用死缠烂打装可怜的招数。</p>
<p>“林小肥，你这么胆小吗，派阿姨先来说好话？”倾倾板起了脸打断我。</p>
<p>“倾倾，我怕我一见到你就没法冷静的解释清楚，一开始我真不是故意要瞒着你的，因为这个事情，你也知道一般人听到肯定会很难接受和相信的，我想着要是我妈来跟你说，你可能会觉得可信度更高一点。”我看着倾倾，</p>
<p>“不过你说的也没错，我是很胆小，因为我怕失去你。”</p>
<p>“胆小你还总提分手这个词？我看你明明胆子大得很哦？”</p>
<p>“因为我不想听你说分手，我怕我不能接受。”“可我也没这个意思呀，”倾倾不板着脸了，她好像有些忧愁，“我只是说需要时间想清楚，今天叫你出来也是想要确认你的话究竟是不是真的，结果你这个跑题大师就默认我想分手了？”她走到了我的身边，抓住了我的手，“每次都会错意的林先生，我觉得我真的有必要对你进行一些处罚。”</p>
<p>倾倾的手指很细，但不是那种柔若无骨的纤细，她的手掌也不是网上传闻的那种微凉，而是富有生命力的温热，源源不绝地给我传递温暖，她的肌肤细腻柔软，和我摸自己的感觉不太一样，但又好像没什么不同。</p>
<p>我沉浸其中，完全没听到倾倾在说什么。</p>
<p>倾倾见我没反应，努力踮脚凑近我的耳边，“大臭猪想什么呢！”她的呼吸，她的香气，她的声音，她的话语。等等，倾倾说了什么？我紧急读取了倾倾刚刚的语气和说话内容，感觉我非常有救？？</p>
<p>“倾倾想要怎么处罚我都可以！我一定无条件接受！”</p>
<p>“哈哈哈怎么突然喊这么大声，你不怕别人听到……”倾倾顿住。</p>
<p>我眨眨眼睛。</p>
<p>“我突然想到现在的你只能被我看见，所以刚刚在别人看来我一直在自言自语……？”</p>
<p>“还笑得花枝乱颤。”我补充到。</p>
<p>“林小肥！”倾倾作势捶我，又生生憋回去了，她压死了声音咬牙切齿地对我说：“林小肥你死定了。”</p>
<p>这，这算是相爱相杀吗(*ﾟーﾟ)？</p>
<p>“所以一天之后我就会忘了今天见过你了吗？”倾倾拉着我的手，踢踢嗒嗒地踩着校园里的落叶。</p>
<p>“是的。”我回答道。</p>
<p>倾倾的手握地很紧，“嗯……准确一些呢？是见到你的24小时之后我会忘了你，还是今天结束后我会忘了你？”</p>
<p>“今天结束后。”倾倾停下了脚步，“这么说来，今天咱们两个相处的时间不多了？”</p>
<p>我也停下来，“虽然并不想承认，但确实是这样的。”</p>
<p>倾倾看起来像是在做一道难题，“你有什么想做的事情吗？”</p>
<p>“诶？”我不懂她的意思。</p>
<p>“难道你没有幻想过，如果有了女朋友之后会和女朋友一起做的事情吗？”</p>
<p>“呃，其实真的没怎么想过。”我明白了。</p>
<p>“诶？”这回是倾倾疑惑了，“还以为凭借你的想象力会想很多出格的事情呢。”</p>
<p>“我想过的最出格的事情就是，倾倾也喜欢我。”其实是很想现在抱抱倾倾。</p>
<p>“哦？突然这么纯情…？”倾倾表示不信。</p>
<p>我拒绝接收倾倾的质疑，话锋一转，“那你呢？你有想象过吗？”</p>
<p>倾倾撇了我一眼，叹了口气，“当然了！我甚至为此专门建了一个备忘录，就随时随地记录一些，如果我以后谈恋爱了想和男朋友一起做的事情。”</p>
<p>如果不是因为我的话，倾倾可以很简单的完成这些事情吧。</p>
<p>“有什么现在能做的吗？”可是她选择了我，我不能自欺自艾了，“虽然很仓促，但是我也想和倾倾约会一次。”</p>
<p>我拿出手机看了看时间，“虽说现在已经五点十七了但是仔细算算，距离半夜十二点也还有将近7个小时……怎么样，要来约会吗？我们可以做一些你一直想做的事情。”</p>
<p>“怎么突然觉得这个设定很像辛德瑞拉。”倾倾笑了笑，“也挺好，你是灰姑娘，我是王子，就让我们在午夜前进行狂欢吧！”“那么王子第一个想去的地方是？”“学校门口那家一直一直一直很想和你去的饭馆！”</p>
<p>好吧，真不愧是倾倾王子。</p>
<p>倾倾带我去的是一家传统东北菜馆。传统到什么地步呢？这么说吧，这家饭馆的名字是“大盘菜18元”，仅凭这一点就能说明它足够传统了。而且看倾倾轻车熟路的样子，必是这家店的常客，真想不到倾倾竟然如此喜欢吃东北菜，我还以为她会带我去什么网红打卡氛围感拉满的店。</p>
<p>“老板！这桌来盘锅包肉！还有东北一锅炖！嗯……再来个拔丝地瓜！”倾倾很兴奋地招呼老板。</p>
<p>看她这架势，想必对这几道菜垂涎已久，我算是知道倾倾为啥一直想带我来这了，她一个人来根本吃不完这些菜(*ﾟーﾟ)。</p>
<p>“啊对了，公主殿下还想点点儿什么吗？”倾倾终于想起来问我。</p>
<p>“王子才想起来问我吗？”我暗自腹诽，却说道：“你点的我都很喜欢。”</p>
<p>“那就好，”倾倾高兴了，“不骗你哦，我点的都是这家店的特色菜，这家做的菜都超好吃！”</p>
<p>出餐速度也可以看出这家店正不正宗，不到二十分钟，我们的锅包肉和一锅炖都上来了，拔丝地瓜略逊一筹，不过可以理解，我默默地给这家店的出餐速度打了7分。倾倾夹了块锅包肉塞进嘴里，我盯着她随着咀嚼起伏的脸颊出神，女朋友真是怎么看都很可爱。</p>
<p>她似乎感觉到了我的目光，她偏头看看我的碗，发现里面什么都没有，于是夹起了一块锅包肉放进了我碗里，“你快尝尝嘛，超好吃的！锅包肉要趁热吃才脆。”</p>
<p>“好。”我也用筷子把它夹起来咬了一口。</p>
<p>酸甜的汁微微挂在锅包肉的外衣上，一口下去面糊的酥脆，里脊的滑嫩，混合着白醋的酸和白糖的甜在我的口腔里混合跳跃。嗯！好吃！我迫不及待的尝了尝一锅炖的味道。</p>
<p>在我看来，东北一锅炖才是东北菜的巅峰代表作。如果不熟悉东北菜的人看到这盘分不清食材，汤汁粘稠的菜被端上来，定会嘴上说着“很有特色”心里想着“什么玩意”，相比于酸甜酥脆的锅包肉，乱炖的口感会更加丰富，有炖的软烂的土豆的绵密，有回味甘甜的南瓜的参与，有清脆独特的豆角的味道，有汁水四溢的排骨的厚重，当然画龙点睛的永远是拍扁的大蒜辛而不辣的香气。而面前的这道东北一锅炖，完完全全的把我想象中的味道给复制了出来。</p>
<p>啊，吃得好爽。</p>
<p>虽然最后的拔丝地瓜还没上，但是我觉得这家店的味道已经可以给10分了。</p>
<p>我看着倾倾大块朵颐的幸福模样，又摸了摸我心满意足的胃。啊，女朋友和我的口味如此接近，真是一件美妙的事情。我要为我之前的腹诽道歉，我和倾倾的灵魂原来如此相近，倾倾就是最懂我的女孩！我和倾倾都挂着幸福的微笑走出了饭馆。</p>
<p>虽然刚才饭馆里的人都很诧异一个女孩儿竟然独自吃掉了三盘菜，但卿卿却轻易地饶过了罪魁祸首的我。按她的话来说，难得能一次吃得这么尽兴，就放过我好了。</p>
<p>“接下来干点什么呢？”倾倾滑动着手机，想寻找一个合她心意的选项。</p>
<p>“看电影？逛街？”唉，我绞尽脑汁也只能想出这两个提议。</p>
<p>“啊，对了，我突然想到，既然我明天就会忘了今天见过你，那我明天会继续生你的气吗？”倾倾意识到了一个严重的问题。</p>
<p>天哪，我怎么完全没有想到这个事情！或许是我惊慌失措的表情太过夸张，倾倾看着我的脸，忍不住哈哈大笑。</p>
<p>“那我们就留下一点证据好了。”她把手机拿给我看，备忘录里映入眼帘的第一条就是和未来男朋友一起录一支搞笑视频。</p>
<p>“我们就来完成这个吧，虽然现在的条件可能搞笑不起来，但是也可以录一个视频的呀。嗯，就录成道歉视频好了，你一定一定一定要在视频里向我诚恳的道歉哦，这样我才能在把今天的事情忘了之后，再看到这个视频的时候，再一次原谅你。”倾倾越想越觉得这个提议很棒。</p>
<p>“等等，你不会有那种不无法被录像设备或者是照相机拍下来的设定吧？”倾倾开始脑补。</p>
<p>我顺着倾倾的脑补回忆，“应该没有吧，虽然从前我只和我妈拍过照片，不知道能不能当个例子举出来……但是，啊，”</p>
<p>我想起来了，“我妈单独给我拍的照片也都留在我们家的相册里，所以应该是可以的，要不先拍一张照试试？”</p>
<p>“好呀。”倾倾举起了手机，把镜头转向了我俩，拍下了我们两个的第一张合影。</p>
<p>拍完后她翻到相册，“可以的我存到了！咦，你笑的怎么这么傻呀？哎呀，我头发好乱，重拍重拍！”后来不知道拍了多少张，才终于拍出了让倾倾满意的照片。</p>
<p>照片的背景里，太阳正在缓缓下沉，给天空染上了瑰丽的粉红色，像一杯尚未搅拌的龙舌兰日出，仅管它是我们的日落。</p>
<p>“说起来为什么只有阿姨能接触到，身处另外一个时间线里的你呢？”倾倾边看她刚刚录下的我道歉的视频，边问道。</p>
<p>我早就被倾倾大导演的严苛折磨得精神恍惚。“这个事情我也不知道，也许只是因为她是我妈。”</p>
<p>“不会吧，那这样的话我们以后每一次见面岂不是都要都要拜托阿姨了？而且我都会记不住我们见面后都做了什么的……难道每一次见面都要全程录视频吗？”倾倾有点儿沮丧。</p>
<p>“嗯……”我试图安慰倾倾，“那也许不只是这个原因？我会努力找出能让你一直看到我的方法的。”</p>
<p>“嗯嗯！如果我也能帮得上忙的话一定要告诉我呀，我真的很想很想每天都和你见面。”倾倾晃着我的手臂。我把倾倾被风吹散的头发别到她的耳后，“接下来去哪里呢？”</p>
<p>“其实我还很想看烟花。”倾倾乖乖等着我整理她的头发。</p>
<p>“烟花，”我记得小时候我妈总带我去看烟花，“倾倾，你很喜欢烟花吗？”</p>
<p>“嗯，我真的很喜欢那种璀璨的，转眼即逝的却能照亮黑夜的烟花！”</p>
<p>“那我们就去放烟花吧，我知道有一个地方不禁燃烟花哦。”我和倾倾好不容易找到了一家卖烟花的店。</p>
<p>也许是因为淡季，他们家的存货并不是很多，种类也不是很全，于是我把他们家大部分的烟花都买了下来。呃，当然这步是由倾倾代劳的。</p>
<p>我们走出了店门，倾倾一边说：“如果现在把烟花给你，别人会看到烟花漂浮在半空中吗？”一边想要把装烟花的箱子塞到我的怀里。</p>
<p>“应该不会吧，”我有些不确定，想了想又解释道：“毕竟如果这么严格的话，那我身上穿的衣服其实是属于现在这个时间线的。但是看起来别的人并没有察觉到你身边有一堆衣服漂浮在空中。”</p>
<p>“说的也是。”倾倾点头，“那烟花就由你拿着啦，如果不会被别人看到奇怪的景象，我就放心多了。”</p>
<p>我带着倾倾来到了江边。天已黑了，江边的堤坝上没什么人，树影在江水中摇曳，路灯给地面照出一圈圈黄色的光晕。</p>
<p>我一手捧着烟花箱子，一手拉着倾倾的手漫步在虫鸣之中。</p>
<p>“你在这里会被蚊子叮吗？”倾倾突然问道。“不会，我妈又没有像蚊子介绍我和她的关系。”我打趣。</p>
<p>“哈，真不错。”倾倾的声音听起来有些幽怨。</p>
<p>我带着倾倾走到了以前我妈带我放烟花的地方，那是一片干枯的河床。我把箱子里的烟花筒一个个拿出来，蹲下身并排插进了泥土里。等我都排好了烟花，起身回头找倾倾的时候，发现她正在用手机对着我。</p>
<p>“这个也要拍吗？”我走到她旁边。</p>
<p>“是录像啦，多拍点视频有助于消气哦。”倾倾也转身，镜头对着我。</p>
<p>“好吧，”这个理由无懈可击，“也把你录下来吧，不然之后你一定会盯着视频里的陌生男人纳闷：这谁，他在干嘛，我为什么有这个视频？”我想了想倾倾摇头晃脑疑惑的样子，不留意笑出了声。</p>
<p>“你笑我( `ー´)！不过你说的也有道理……那我就勉强把摄影权交给你吧，记得不许把我拍丑！”倾倾把手机交给我嘱咐道。</p>
<p>“放心吧，我拍的还是不错的。”我想了想我妈几次对我拍照技术的肯定，“倾倾这么漂亮，我怎么会把你拍丑呢？”</p>
<p>“希望你不是我哥那种盲目自信的摄影师。”倾倾嘀咕。</p>
<p>她点燃第一个烟花筒，红色的烟花盛开在夜空。火花照亮了她的侧脸，镜头里的她笑着，镜头外的我也笑着，</p>
<p>“倾倾！再来！把它们全都点燃！”</p>
<p>“好啊！”倾倾点燃了所有的烟花。</p>
<p>夜里吹过的秋风的呼呼声，烟花升空时划破空气的咻咻声，倾倾看着烟花在夜幕中炸开时兴奋的哈哈声，草丛中蝈蝈和蛐蛐此起彼伏的虫鸣声，混合着火药和倾倾身上的味道，构成了凭我贫瘠的幻想功底绝想象不到的景色，所以这绝不是梦吧？</p>
<p>我举着倾倾的手机，录下了我认为的，属于这个夜晚的，最美好的记忆。</p>
<p>“今天！我好开心啊！”倾倾大声地对我喊道。</p>
<p>“我也是！”我也向她喊道。</p>
<p>她向我跑来，扑进我的怀里。我一只手举高，另一只手下意识环住倾倾的腰。</p>
<p>“还在录像呢。”我说。</p>
<p>“关掉就好了。”倾倾扒住我的脖子。</p>
<p>我关掉手机，另一只手也环住了倾倾。</p>
<p>“你心跳声好大。”倾倾埋在我的胸口，“是有什么想说的话吗？”</p>
<p>“被你发现了。”我抱紧了倾倾，深吸了一口气，“我，非常非常非常喜欢你。”</p>
<p>“我也是。”…</p>
<p>“真想永远停在这一刻啊。”</p>
<p>“我也是。”</p>
<p>“感觉有点冷了。”</p>
<p>“……我也是。”</p>
<p>“咦？倾倾变成复读机了吗？那我试试看，我是大臭猪？”</p>
<p>“哼！你就是大臭猪！”</p>
<p>我们的约会并没有持续到午夜12点，那是因为倾倾突然想起来她的宿舍有门禁，所以所有的幻想和理想最后都会妥协于现实吗(;´Д`)</p>
<p>倾倾用软件叫了一辆出租车来接，为了避免我一天吓到两个出租车司机，倾倾决定用手机和我交流。</p>
<p>“我觉得为了有效防止明天你还生我的气，应该做一些指引。”我坐在倾倾旁边，胳膊悄悄地搂住倾倾。</p>
<p>倾倾妹妹：比如呢？“比如定一个闹钟，闹钟的名字就叫快看备忘录？然后在备忘录里置顶一个今天发生的事情的前因后果的记录，记录的最下面再写一句，快看相册里的视频？”</p>
<p>我认真想对策，“这样大概就能万无一失了吧。”倾倾抬头看了我一眼。</p>
<p>倾倾妹妹：你在教我做事?.jpg</p>
<p>“不敢不敢，我只是为了可以减少一些不必要的误会，提一些小小的建议。”我伏低做小。</p>
<p>倾倾妹妹：嗯，不过你的提议也还算不错。</p>
<p>前座的司机终于受不了深夜的沉默了，大概每一个出租车司机都自带一些话唠属性，我和倾倾已经在车上坐了五分钟，车里始终一片沉寂，司机看不见我，倾倾全程低头，大概是司机终于顶不住了，开始试图和倾倾聊天。</p>
<p>“小姑娘这么晚一个人去的江边吗？”</p>
<p>倾倾好像很讨厌这种无意义的搭话，她想了想，冲我笑了一下，好像想到了什么奇妙的点子，</p>
<p>于是对司机说道：“不是呀，我和我男朋友一起去的。”</p>
<p>司机纳闷儿，“啊？刚才接你的时候没看见旁边有人……啊，男朋友先走了？唉，这男朋友可不太靠谱啊，怎么还能让小女孩儿自己走呢？”</p>
<p>倾倾憋笑。</p>
<p>倾倾妹妹：唉，我这个男朋友可不太靠谱呀，怎么能让我这个小女孩自己一个人回去呢？</p>
<p>“我不是，我没有，我陪着你呢，倾倾！”</p>
<p>“我男朋友说他陪着我呢。”倾倾回答司机的问话。</p>
<p>“哦，我知道了，在手机里陪着你呢。”司机笃定。</p>
<p>“对了，小姑娘前面那段路晚上不好走，我就不按导航开了，我从另一条路带你过去。”司机又补充道。</p>
<p>“不应该呀，我来的时候就是走前面那条路的呀，是不是男朋友？”倾倾看着我问道。</p>
<p>我点头，“感觉这司机想绕路。”</p>
<p>“师傅，我男朋友说我没记错，前面的路黑天了也可以走的。”</p>
<p>倾倾不盯着手机了，手机屏幕的光从她的下巴打上去，莫名的有几分恐怖，不过在我看来是一种可爱的恐怖。</p>
<p>司机懵了，“你男朋友咋知道我说的是哪条路？”</p>
<p>“我男朋友就坐在我旁边呀，他当然看得到啦。”</p>
<p>“哈哈哈，小姑娘你可真会开玩笑。”司机好像被吓住了，频频通过后视镜看倾倾。</p>
<p>倾倾笑得很灿烂，但经过了手机屏幕白光的加持，我只能说会让看见这一幕的人感觉到一丝惊悚，“我从来都不开玩笑的哦，男朋友，跟师傅打个招呼？”</p>
<p>我想了想，从衣服口袋里掏出了一包纸巾，递给倾倾，倾倾接过递给司机。</p>
<p>“师傅擦擦汗吧，我男朋友给你的纸。”从司机的角度来看，大概是后座无人的地方凭空出现了一包纸巾，倾倾拿起来递给了他。</p>
<p>“师傅，我觉得呢，你应该听我男朋友说的，还是按导航开回去吧？”</p>
<p>后半的路程开得飞快，出租车司机路也不绕了，话也不说了，他把车载广播调到最大，全神贯注地开车。我在心里为出租车司机默哀，感觉这位师傅未来一年都不敢绕路了吧？</p>
<p>倾倾妹妹：好吵哦，早知道就不吓他了。</p>
<p>我用手捂住了倾倾的耳朵，“这样会缓解一点吗？”倾倾一脸幸福。</p>
<p>倾倾妹妹：不错不错，灰姑娘很能干！</p>
<p>我们终于赶在倾倾门禁前到了她的宿舍门口。尽管已经临近封寝，但宿舍楼门前的人却不少，远远看去十分热闹。</p>
<p>我有些纳闷，“你记错关门时间了吗？这怎么这么多人在门口待着呢？”</p>
<p>倾倾停下脚步，她眉头微皱，认真观察我的表情，发现我是真心实意的在困惑，无奈地说：“林小肥同志，如果你能仔细再看一会儿，你会发现他们都是两两一对，纠缠在一起的热恋情侣，”</p>
<p>她的耳朵突然变红，“就像我们刚在在江边一样。这也算是女生宿舍楼下的默认规律啦。”</p>
<p>呃，看来不读大学少学到的不只是专业知识，还有可能有用的生活常识。</p>
<p>“他们会抱到什么时候？”我虚心求教。</p>
<p>“应该是阿姨来催？”倾倾猜测，“其实我也不太清楚，还没这么晚回过宿舍。”</p>
<p>“那，你还想抱抱吗？”其实是我还想抱。</p>
<p>“是你想抱我吧，”倾倾看穿了我，“大臭猪。”</p>
<p>“灰姑娘想在王子离开前再抱抱王子有什么不对吗？”我反驳。</p>
<p>倾倾想了想，拖我走入黑夜，“我是一个通情达理的王子，既然我的灰姑娘有需求，那我一定会满足的～就是，咱俩得悄悄地，我还不想被同学当作怪人哦。”</p>
<p>我们拥抱在无人的角落。我不知道过了多久，也许是五分钟，也许只有三十秒。我低头就能看见倾倾越来越红的耳朵，很诱人，很可爱，就像她一样。</p>
<p>“啊！阿姨好像出来催人了！”倾倾惊呼。</p>
<p>“好吧。”我终于忍不住吻了她的耳朵，“祝你今晚做个好梦，我的王子殿下。”</p>
<p>我走在安静的夜里。告别了倾倾，我的世界又恢复了静止。</p>
<p>马路上仍旧有汽车驶过的轰鸣声，行道上仍旧有步履匆匆的路人，但路边的柳树才刚抽了枝，丁香才刚绿了叶，候鸟才刚庆祝回归的喜悦，它们都不过是另一个世界的投影。风不再严厉，温度不再降低，尽管是深夜，但世界是暖的。这个世界的春日将至。这个时间很难蹭到同向的车，我把外套脱下来挂在手臂上，慢悠悠的向家里走。我已经在静止的温暖中生活了二十二年，现在的我格外想和倾倾在热闹的寒冷中共度冬天。到家时门口的灯亮着，我知道这是我妈睡前特意为我留的。等我收拾完毕躺到床上时，时钟的指针刚好走到十二点整。</p>
<p>辛德瑞拉的魔法失效了。但王子总会再找到她的。</p>
<p>“明天倾倾会怎样确认今天发生过的事情呢？大概会震惊的来询问我吧。”我这样想着，渐渐睡着了。</p>
<p>​我被手机叮咚叮咚的声音吵醒了，头有些痛，隐隐告诉我现在并不是我日常的起床时间，我摸到手机一看，才八点三十七分。倾倾的头像在手机屏幕上疯狂跳动，瞬间赶走了我的瞌睡。倾倾这么急着找我，是已经看到录像了？</p>
<p><em>倾倾妹妹：啊啊啊</em><br><em>倾倾妹妹：这视频里都是昨天发生的事吗？</em><br><em>倾倾妹妹：我毫无印象！天呐</em><br><em>倾倾妹妹：大臭猪还没起床？？</em><br><em>倾倾妹妹：昨天的我给自己定了六点半的闹钟，而你还在睡的吗？</em><br><em>倾倾妹妹：还是很难以置信……</em><br><em>倾倾妹妹：我再看一遍消化一下……</em><br><em>倾倾妹妹：烟花真好看啊，我怎么就不记得呢</em><br><em>倾倾妹妹：我们昨天还干什么了？有没有去学校门口的饭馆？</em><br><em>倾倾妹妹：我把你拍得好帅哦</em><br><em>倾倾妹妹：原来林小肥长这个样子</em><br><em>倾倾妹妹：昨天是不是见到阿姨了！</em><br><em>倾倾妹妹：我表现还好吧？没有当着阿姨的面调戏你吧？？……</em><br><em>倾倾妹妹：还是很想见你</em><br><em>倾倾妹妹：为什么手机记得我却不记得</em><br><em>倾倾妹妹：(;´Д`)</em><br><em>倾倾妹妹：林小肥你再不醒就要变成睡美人了！我恰巧在此时醒来。</em><br><em>倾倾妹妹：原来林小肥同志这么喜欢当公主的吗？</em><br><em>林静的儿子：我醒了！</em><br><em>林静的儿子：现在有课吗？要不要语音？</em><br><em>倾倾妹妹：要！</em>*<br>*<br>“倾倾现在不气了吧？”弄清这个问题还是至关重要的。</p>
<p>“看在烟花的份上就不气了，快跟我讲昨天咱俩都干嘛了呀？我不信只去看了烟花，室友说我昨晚红着耳朵踩着封寝的时间回来的，说！你是不是干什么迫害我的事情了？”倾倾得意洋洋，那语气听起来更像是想让我说一些我被她迫害的事情。</p>
<p>我诚心想逗倾倾，于是说道：“对，昨天我调戏你了，你的反应可爱到爆炸。”</p>
<p>“怎么可能！”倾倾的声音听起来十分震惊，“从来只有我夏倾倾调戏别人的份！”</p>
<p>“真的，”我认真说道：“你左耳耳垂上有一颗颜色很浅的痣，不凑近看都发现不了；眼角那颗棕色的痣看起来很可爱，摸起来却和周围的皮肤没什么区别……”</p>
<p>“好了！不要说啦！”倾倾恼羞成怒，“那你的调戏也一定是，一定是经过了我的许可的！”</p>
<p>“当然了，我不会做倾倾不愿意做的事情的。”我向她保证。</p>
<p>“行吧，看你态度这么诚恳……快和我讲讲其他的事情！昨天一定和阿姨见面了，那阿姨喜欢我吗？”</p>
<p>我想了想我妈昨天对我的嘱咐，“她很喜欢你。”</p>
<p>“我也很喜欢你。”我补充。</p>
<p>“你的告白这么随便的吗？”话虽如此，倾倾的语气却充满了惊喜。</p>
<p>我这才想起昨天向她告白时手机已经关掉的事情，原来倾倾不知道昨晚的告白。那就不要让她知道好了，她一定会痛惜为什么没录下来，反正我会每天都对她说的。</p>
<p>“只是在向你表达爱意，以后每天都对你说一次好不好？”</p>
<p>“林小肥同志，这种时候不要说疑问句，要说肯定句的！”倾倾气。</p>
<p>我学会了，“以后每天都会说喜欢你，每天都会和你告白的。”</p>
<p>“我们还干嘛了？”</p>
<p>“去学校门口的饭馆吃饭了。”</p>
<p>“真的？那我点了什么菜？”倾倾狐疑。</p>
<p>“锅包肉、一锅炖还有……”</p>
<p>“够了够了，我相信了！”倾倾有些愤愤不平，“可恶，我完全不记得了，本来想今天去吃一顿的。”</p>
<p>“今天也可以去呀，我报销。”</p>
<p>“这是报销的问题吗，我身上长的肉你也能报销吗( `д´)”</p>
<p>“说起来，你的腰好软哦。”</p>
<p>“什么？我昨天到底跟你做了多少荒唐的事！！”</p>
<p>“没什么的，都是拍电视剧也能播出来的。”我想了个绝妙的比喻。“那能做的也很多了吧？？”</p>
<p>倾倾不甘心，“一定是被你蛊惑了。”</p>
<p>“是是，都是我魅惑大王的，都是妲己的错。”我笑道。“我们昨天有没有亲亲？”倾倾小声问我。</p>
<p>“什么？”我有点没听清。</p>
<p>“亲嘴！我们有没有亲嘴！”倾倾再气。</p>
<p>“没有没有。”我急忙说。“那就好……如果连自己的初吻都忘记了，那也太逊了……”倾倾松了口气，“可以和我做个约定吗？”</p>
<p>“当然可以。”“等找到可以让我不会忘记见过你的方法的时候，我们再接吻好不好？“倾倾害羞地解释，“倒没什么别的意思，就是这么美好的事情，我应该记一辈子的。”</p>
<p>“好。”我答应倾倾。我会努力找到这个方法的。</p>
<p>我和倾倾每天都沉浸在热恋的气氛里，除了见面困难些，其他和普通情侣没什么不同。</p>
<p>我接连想了几个方法想让倾倾能像我妈一样感知到我，结果试过后都没成功，那段时间我一直都有点沮丧，倾倾安慰我说“我们两个现在就像是异地恋情侣嘛，不要急，只要我们一起努力有一天一定可以突破距离的封锁一直在一起的。”</p>
<p>倾倾也开始研究如何突破距离。她先是研究科学。“这个平行世界理论好像适用在你身上？”“我的行为并不会改变我身处的世界的进程。”</p>
<p>“我最近又发现一个科学理论可以解释你的现象，玻姆的宇宙全息论！”</p>
<p>“……这个理论对我们来说唯一能说明的就是我注定喜欢你。不仅是我处于的世界是投影，我也是，你也是，正常世界也是，我们全部都是高维宇宙的投影。过去未来早已注定，所有一切早已发生，瞬间即是永恒。”</p>
<p>“如此惊心动魄的表白吗……这样的话，你我就没什么不同了？”</p>
<p>“别用你文科生的脑袋思考还没研究透彻的物理问题了，就算这真的可以解释我与众不同的经历，那也无法解决横在你我之间的问题……它能说明一点，即我们现在做的一切都是无法更改的过去。”</p>
<p>“情感呢？”</p>
<p>“情感也是来自体内的激素和大脑的记忆，而任何物质都是投影。”</p>
<p>“那我们还是不要相信这个理论了！我喜欢你，明明是我的感受，我不要什么高维宇宙来帮我决定…我不是投影，你也不是投影，我们都是真实存在的。”</p>
<p>“好好好，不信这个。不过就算是投影，也可以说明高维宇宙里的我们彼此爱慕吧？”</p>
<p>“这倒是不错……不行，我不要高维宇宙，我只要现在。”</p>
<p>经历了宇宙全息论之后，倾倾开始走大众路线了。具体表现于她每天都会发一些获得中老年人高度评价的朋友圈文章给我，什么“宇宙的奥秘老子已参透”、“神秘修真者揭露时间惊天大秘密”、“来自四维空间的提示：时间的起源与终点”……</p>
<p>我表示倾倾应该多看点年轻人看的。于是倾倾掏出了命运石之门。我：……这玩意儿我倒背如流你信不信。在我精准地给倾倾剧透了命运石之门前十集每一个关键节点之后，倾倾终于愤怒地表示她信了，并且再剧透下去我就会失去可爱的女朋友。于是我收手了。</p>
<p>结果没两天倾倾就哭着给我打电话：“为什么青梅竹马和女主不能一起活下来呢？我不想青梅竹马死掉，我也不想女主死掉(;´Д`)”</p>
<p>我想了想，谨慎地问倾倾：“你是想让我安慰你，还是想听剧透？”倾倾抽泣：“就不能都要吗？还有，我不要听详细的剧透！”</p>
<p>好吧，好吧，女朋友的小小要求我怎么会不满足呢？于是我斟酌字句：“放心吧，他们会有一个非常美好的结局，和我们一样哦。”</p>
<p>“真的？”倾倾的语气和之前问我“她一天喝两杯奶茶会不会胖”的时候如出一辙。</p>
<p>“真的。”我的语气也如当时回复她一般坚定。</p>
<p>“那我去继续看了！”倾倾挂断了电话。</p>
<p>所以说，为了避免倾倾再哭下去，还是不要让她知道这动画后来又出了 be 续作了吧？</p>
<p>最近我发现我妈出门的频率有些高。其实以前我也没太注意我妈的日常生活，自我工作后，我妈就像是“辛苦上班十二载，终于退休大收工”的状态，每天都约她的好朋友们出去放松，要不是她和她的朋友们都岁数大了，估计必点曲目会是连蹦一个月迪。</p>
<p>一开始我还有点担心，但又被她的“中年阿姨的聚会都是在互倒家庭苦水，这种场合哪有带儿子去的”话打发走了，后来我妈的“疯玩”活动渐息，我也放下心来，基本就再没问过她的日程安排。</p>
<p>之所以现在注意到了我妈的出门频率有所回升，全然是因为我想和倾倾约会。想约会就得找我妈，找我妈就发现她不在家。一开始我没多想，只以为我妈出门遛弯，可一次两次找不到，三次四次还找不到，甚至有一回给她打电话她也没接，我才察觉到有些不对。难道说，我妈，终于要给我找个野爹了？</p>
<p>为了避免中年人的尴尬，我觉得这事还是旁敲侧击比较好。于是我找了个机会问曹阿姨知不知道我妈最近在干嘛。曹阿姨很迷惑，曹阿姨很茫然，在我说出了我的猜测之后，曹阿姨很愤怒，钓男人这种事好姐妹竟然不找她倾诉？</p>
<p>曹阿姨表示她会帮我问问我妈最近在进行什么神秘行动。我乖巧地表示感谢，并暗搓搓地幻想未来我家双喜临门的场景。还没等曹阿姨给我报喜，我妈的出门频率又恢复了正常，甚至还有所减少。她整天忧心忡忡地问我和倾倾的近况，知道我俩要约会比我跑得还积极，知道我俩吵架比我都想向倾倾认错。</p>
<p>这不对劲。我找了个恰当的时机探我妈的口风。彼时正逢周三，倾倾临近期末还满课，毫不犹豫地舍弃了她的男朋友转而投入中国古代史的怀抱，我妈听闻准备包顿饺子，晚上陪我去给倾倾送夜宵。我坐在我妈斜对面给饺子捏褶。</p>
<p>“妈，你最近不忙啦？”</p>
<p>“你好奇怪，”我妈瞪了我一眼，听出我在阴阳怪气，“自从我退了休，哪里还忙过？”</p>
<p>“我也没见你上过班啊。”我嘀咕。</p>
<p>“啥？”我妈没听清。</p>
<p>“啊，我说，前一阵你不是挺忙的吗？我好几次想找你帮忙让我和倾倾约会，都找不到你人。”我循序渐进，“最近却像个教导主任似的紧紧看着我和倾倾谈恋爱。”</p>
<p>“哎呀，我们小肥是嫌没有私人空间了？还是怪妈妈前一阵没帮你约会了？”我妈打趣。</p>
<p>“没有啊，都没有，”我打断我妈打岔，“这不就随便聊聊吗，我就单纯的好奇来着。”</p>
<p>我适时出击，“你前一阵总出门，是去见什么人吗？”</p>
<p>我妈听我这么问，突然面露难色，像是在思考该怎么回答我，她包完了手里的那个饺子，停下来说：“也算吧？”</p>
<p>难不成真是野爹？</p>
<p>我憋不住了：“林静同志，组织是允许单身的同志发展自己的个人感情的，不过林静同志也需要考察好交往对象的人格品德的，最近你又不出门了，是不是那人骗你被你发现了？”</p>
<p>“……啊？”我妈满脸问号，已经摆好了怒斥我的架势，但她脸色一变，好像想到了什么，辗转几次终于开口：“没有被骗，他说的都是实话。”</p>
<p>“你这么相信他？”我妈不会是个恋爱脑吧？？</p>
<p>“都有证据的。”我妈又开始包起了饺子。</p>
<p>“好吧，”这事我也不好管太多，我想了想，嘱咐我妈，“林静同志，组织永远是你的大本营，有什么心事都可以跟组织倾诉的。”</p>
<p>“知道了，你这个家庭支部书记也算有点用吧。”我妈笑骂。</p>
<p>接下来的日子基本上都在重复着“我妈看我快乐的和倾倾各种贴贴”的日常，所以总有那么几个瞬间，我也觉得自己就是个普通的上班族，女朋友活泼可爱，亲娘善解人意，没有其他人苦恼的婆媳矛盾，到是要时不时担心自己会不会受到双方的联合讨伐。</p>
<p>除了我妈时常出门和野爹约会且一约就是一整天。我以为我的生活就会这么快乐下去的。直到一个普普通通的午饭后，我亲眼看着我妈毫无征兆地在我面前晕了过去。</p>
<p>那一个瞬间，我大脑里的所有神经都像互相搭错了线了一样不听指挥。我不知道我的手脚在干什么，只听见自己拨打120的声音；</p>
<p>我不记得自己不会被医务人员看见，也看不见任何前来救助的人员，只看到我妈被腾空放到一个担架上，被迅速地带离了我家，我的腿带着我追出了家门，可我妈的一丝一毫都不见踪影；</p>
<p>我不知道我怎么打通了曹阿姨的电话，只记得曹阿姨在保证了去医院找到我妈看护她之后，担心地劝我不要在这种时候病倒两个人，我才发现我的眼泪早已洇湿了我的外衣，我的喉咙沙哑的快要发不出声音。</p>
<p>可仅仅于此，我能为我妈做的事情，只剩下悲伤和眼泪。</p>
<p>我这才真正意识到我一直在被这个世界无情的抛弃。我痛恨这个无能为力的自己。</p>
<p>阳光一点一点撤离了我家的客厅，虫鸣声和微微热风昭示着我已经回到了滞后的夏季，可此时的我只想立即、马上回到寒冷。</p>
<p>我机械地重复按着手机的电源键，屏幕亮了又暗，内容还停留在倾倾给我讲冷笑话的界面，但我实在没力气回复她的信息。曹阿姨也发来了几条消息，只说我妈还在抢救室，叫我安心在家等，有任何消息第一时间告诉我。沙发捕捉了我的身体，就像滞后的时间侵蚀了我的所有，令我深陷其中，我无法安心，也无法挣脱。</p>
<p>时间仿佛已经失去了意义，我艰难地捱着，盯着陷入黑暗的手机，期盼它能告诉我一个好消息。它恰到好处地响了几声，可并不是我现在急切盼望的，我看着屏幕上的名字，犹豫了几瞬，还是点了接通。</p>
<p>“嗯哼！林小肥同志怎么这么久都没回我消息？从实招来你干嘛呢？”</p>
<p>“……倾倾。”我听见一个十分粗糙的声音从我口中传出，原来我的声音已经哑得如此厉害了吗？</p>
<p>“萧斐？你声音怎么突然变成这样了？出什么事了？”倾倾几乎一瞬间就听出了我的变化。</p>
<p>“我妈出事了，可是我，我什么都做不了……”我极力想改变眼泪即将流下的趋势，但有时候，人真的没法控制好自己的情绪。</p>
<p>“阿姨怎么了？？”倾倾非常担心，“萧斐，萧斐你慢慢说，阿姨出什么事了？”</p>
<p>“她突然晕倒了，我叫不醒她，打电话叫了救护车来但是他们看不见我，没人看得见我，我也没办法到正常的世界跟着我妈……我什么都做不了，我就是个一无是处的透明人。为什么只有我这样……为什么我妈不能有一个正常的儿子，为什么我什么都做不到”</p>
<p>我的声音越来越大，最后几乎是喊了出来，我知道我不该这样对倾倾用这种语气说这种屁话，可我已经控制不住了。</p>
<p>“对不起倾倾，对不起，我该自己处理好我的事情的，我”</p>
<p>倾倾打断了我，“这不是你的错，林萧斐，是这个狗屁世界的错。”</p>
<p>这是她第一次在我面前说粗话，“不要这么说自己，现在，你可以做的事有很多，比如告诉我阿姨被送去了哪个医院，我去代替你守着阿姨。”</p>
<p>倾倾的声音温柔又坚定，“阿姨生病一定是暂时的，你要振作起来，这段时间，我来尽力当你的坐标。”</p>
<p>倾倾的行动力很强，我能听见她收拾东西的声音，“我现在直接去医院守着阿姨，还是先去买一些阿姨住院需要用的东西？”她像是在问我，又像是在自言自语，“不管什么情况还是应该把住院需要的东西先准备好吧？”</p>
<p>我的理智也逐渐回归了，“如果不介意的话，你可以先来我家把我妈可能需要用到的私人物品取走。你现在来我家的话，应该是看不见我的……不过不用担心开门的问题，我妈以前怕出现什么突发状况，把我家的备用钥匙放到了门口的地毯夹层里，你可以用那把备用钥匙开我家的门。”</p>
<p>我说完才意识到刚刚说的话有些突兀，“当然我不是一定要你来我家的意思，你想怎么样都好，你能愿意代替我去医院我已经很感谢了”</p>
<p>“不要这么说哦林小肥同志，”倾倾打断我的感谢，“我只是也很担心阿姨，想要帮点忙。如果能用家里的东西，会让在医院的阿姨心情好一点吧？把你家地址发给我，我一会儿就到。”</p>
<p>“对了，小肥要把自己收拾好哦，”倾倾又补充道，“万一我能在你家看见你呢，我可不想看见一个哭哭啼啼的林小肥同志。”</p>
<p>“好。”我知道倾倾这么说是想让我振作起来，但心底也有一丝丝幻想缠绕着我，万一真的能看见她呢？此时此刻，除了迫切地想知道我妈到底出什么问题了之外，我也很想紧紧地抱住倾倾。</p>
<p>我快速地冲了个澡，然后开始列我妈在医院可能会用上的东西的单子，接着开始不断地刷新我的聊天界面，企图获得一些好消息。</p>
<p>倾倾妹妹：我到门口了！已经拿到钥匙啦</p>
<p>倾倾的消息蹦了出来，曹阿姨那边还是没有音讯。</p>
<p>林静的儿子：钥匙插进来之后右转半圈，再压一下门把手就能进来了。</p>
<p>我站起身，紧张地注视着门口，期待能听到门锁转动的声音。</p>
<p>倾倾妹妹：我已经进来啦，你家看起来好温馨已经进来了？</p>
<p>我盯着我家的防盗门，它严严实实地隔绝着内外，甚至连门锁弹簧松动的声响也没发出来。是我痴心妄想了。</p>
<p>我把电话回拨给倾倾，“倾倾？我没看到你，看来你来我家并不会让我们的时间连接在一起。”</p>
<p>倾倾的声音听起来也有些低沉，“……我也发现了。”但她很快就调整好了，“没关系的，我只是来给阿姨取东西的嘛，看不见你虽然很遗憾，但是只是顺带想看看你的。”</p>
<p>“嗯。”我说不出更多的话了，只好生硬地转移话题，告诉倾倾都需要取什么，大概位置在哪里，我站在我妈卧室的门口，看着一成不变的室内格局，闭上眼睛，听着电话那头霹雳霹雳地收拾声，脑海中想象着倾倾收拾东西的样子。</p>
<p>好想她。</p>
<p>没过多久倾倾就收好了东西向我告别，因为不知道医院里我妈什么情况，恐怕会不方便一直打电话，我们约定随时发消息保持联系。</p>
<p>“我要去医院了！”我听到电话那头倾倾关门的声音。</p>
<p>“好，无论我妈出什么事都要告诉我。”</p>
<p>我嘱咐。</p>
<p>“我会全部都告诉你的，我不会替你做决定的。”倾倾保证，“你在家安心等吧。”</p>
<p>电话就这样挂断了。大约五分钟后，倾倾给我发消息说她上车了。没多久她又发了几条。</p>
<p><em>倾倾妹妹：虽然很想看到你发现惊喜的样子</em><br><em>倾倾妹妹：但是你好笨，我还是给你点提示吧</em><br><em>倾倾妹妹：我在你家给你留了纸条哦，希望不会是183天后你才能看见</em><br><em>倾倾妹妹：你找找看？</em><br><em>倾倾妹妹：也算是个试验吧</em></p>
<p>纸条？</p>
<p>我跑到我妈的房间，极力搜索视线里一切能留下字迹的物品，工作笔记？</p>
<p>倾倾应该不会再这么重要的东西上随便写字；丢在桌角的推理小说？等等这不我上回没看完就找不到的那本吗？估计倾倾都没注意到它……那么只剩下这个了吧？我拿起了我妈梳妆台上放着的翻页日历，</p>
<p>“如果这种方法可行的话，”我边想着，边数着往后翻了六页，“她应该会写在这页上。”</p>
<p>“林小肥同志打起精神来！”映入眼帘的是一个陌生的字体，能看出写字的人在努力地想写的潦草一点，但整体看起来仍旧很工整，大概是为了纠正自己于是强硬养成的习惯。</p>
<p>这就是倾倾的字吗？倒是和她本人一样可爱。等等，我可以通过这种方法和倾倾交流？？我急忙给倾倾发消息。</p>
<p><em>林静的儿子：我看到了！</em><br><em>林静的儿子：我能看到！既然我可以看到你留在我妈的日历上的字，为什么我看不到进入了属于我妈的房子的你呢？</em><br><em>倾倾妹妹：真的可以吗？？</em><br><em>倾倾妹妹：我也只是突然想到才试了一下</em><br><em>倾倾妹妹：让我想想</em><br><em>倾倾妹妹：我这种方法算是偷渡吧？</em><br><em>林静的儿子：诶？</em><br><em>倾倾妹妹：并没有经过阿姨的同意就用了她的东西，进入房间之类的</em><br><em>倾倾妹妹：就当成是偷渡好了，既然是这样，那就要骗过规则吧？或者说钻空子</em><br><em>倾倾妹妹：我本人目标太明显了吗？所以完全不行，但是留下的字可能就没那么显眼了吧？</em><br><em>林静的儿子：也许，也有可能是</em><br><em>林静的儿子：我一直和我妈生活在这个房子里，我妈是目前唯一一个可以不受限制接触到我的人，二十多年过去了，也许这间房子已经处于一种混沌的状态中了？</em><br><em>林静的儿子：就是，灰色地带？</em><br><em>林静的儿子：以前从来没有人在我家这么试过，我和我妈也一直没有交流障碍，所以一直没有发现可以通过这种方式实现两条时间线的交流……</em><br><em>倾倾妹妹：慢点慢点！</em><br><em>倾倾妹妹：你打得太多了，等我慢慢看一下</em><br><em>林静的儿子：简单来说，也许我家会是我和现实世界的连接处</em><br><em>倾倾妹妹：这么说，我们可以在你家多做几次试验试试极限在哪里？</em><br><em>林静的儿子：对</em><br><em>倾倾妹妹：这不是好起来了嘛！</em><br><em>倾倾妹妹：医院到了！我先下车一会再说</em><br><em>林静的儿子：好</em></p>
<p>我尝试寻找一些除此之外的证据。客厅里，没来得及收拾的饭桌上还摆着吃剩的午饭，并没有因为这个空间里只剩我一个人而消失。</p>
<p>我想了想，转向厨房打开了冰箱，果然，冷鲜层的蔬菜都是前天我给我妈当苦力的时候买的。所以“我家”这个空间真的处于两个世界的交汇处？还是说因为我和我妈长此以往地在这个空间里共同生活，导致这里对我的接纳度更高？终于也许有办法让我回到正常世界了吗？</p>
<p>不，应该还是不行，刚刚倾倾来我家，我们俩并不能看见彼此，我们之间那堵透明的墙仍然存在。但是，这扇墙也许并没有我之前想象得那么牢固，它极有可能是堵透风的墙。</p>
<p>打个比方，把我妈把我带到正常世界的方式比作在这堵墙上开一扇门，那么我家这个空间就是因为这扇门的存在而产生的缝隙，虽然很小，但来自正常世界的风正在从此吹来。我正要将我想到的这些讲给倾倾的时候，倾倾也给我发了消息。</p>
<p><em>倾倾妹妹：小肥，你知道阿姨是这家医院的已建档病人吗？</em><br><em>林静的儿子：我不知道，是什么意思？</em><br><em>倾倾妹妹：意思就是阿姨之前就在这家医院就诊过，而且看病例档案，阿姨已经治疗过一阵了</em><br><em>倾倾妹妹：你，完全不知道吗？</em></p>
<p>我很茫然，因为我完全不知道。</p>
<p><em>林静的儿子：从什么时候开始的？我妈她到底是什么病？</em><br><em>倾倾妹妹：虽然阿姨病房里还有一个阿姨不让我告诉你，她就是你妈妈的朋友吧？</em><br><em>林静的儿子：应该是</em><br><em>林静的儿子：你告诉我，你答应我的</em><br><em>倾倾妹妹：是三阴性乳腺癌什么？癌症？</em><br><em>倾倾妹妹：阿姨是三个多月前确诊的，这上面显示也做过几次化疗，但是后来就没继续了</em></p>
<p>三个多月前……是，是我妈突然出门很频繁的那段时间……她生病了为什么不告诉我？我还以为，我竟然还以为她是出门约会了……</p>
<p><em>倾倾妹妹：小肥你不要着急，主治医生刚才来过了，阿姨现在情况比较稳定，再过两个小时左右就能醒了，到时候我们一起确定一下治疗方案，阿姨一定恢复健康的</em><br><em>林静的儿子：我知道了，谢谢，谢谢你</em><br><em>倾倾妹妹：小肥……</em><br><em>林静的儿子：真的很谢谢你</em><br><em>倾倾妹妹：我不要感谢</em><br><em>倾倾妹妹：下次见面的时候，我想要抱久一点</em><br><em>林静的儿子：会的，我会的</em></p>
<p>一切又被打乱了，我全然忘记了要和倾倾说什么好消息，脑子里只剩下六个字，三阴性乳腺癌。我浑浑噩噩地走出家门，像是失了魂的丧尸漫无目的地游荡在街上，直到手机的来电铃声让我条件反射地回过神来。</p>
<p>我环顾四周，发现自己竟走到了我妈送去的那家医院。</p>
<p>我在医院的小花园里找了个露天座椅坐下，手机已经不响了，屏幕上的“老娘”已有两个未接电话，我回拨了回去，开了免提，小窗后开始在浏览器里搜索三阴性乳腺癌。</p>
<p>我妈很快就接了，我还在一堆垃圾广告里找真正的科普。</p>
<p>“小肥，你在家吗？”我妈的声音听起来还不算太虚弱。</p>
<p>“没有……我出门了。”我还在网页上继续找。</p>
<p>“我中午晕倒了，是不是吓到你了？其实这个病吧也不算很严重，我想着神不知鬼不觉地就能治好了，所以之前就没告诉你。小肥你不用担心，这次就是我最近忘记去治疗了，所以才会晕倒。等我的身体稳定一点就出院回家，家里的菜应该是够你吃到我出院的。”</p>
<p>我妈很流利地说出了一大段话，就像是提前打了腹稿。</p>
<p>我终于找到了，“目前还没有特有的针对三阴性乳腺癌的治疗指南，因此其治疗一般按乳腺癌常规标准治疗进行。其远处转移风险较高，内脏转移机会较骨转移高，脑转移几率也较高。且预后较差，死亡风险较高。”我一字一句地读给我和我妈听，</p>
<p>“现在了还要瞒我吗？说这个病不严重？”</p>
<p>“主治医生说也是有机会控制住的，”我妈辩解，“小肥你和我隔了半年你不知道，我的医生说现在内部有一个什么专攻的特效药在找试药人员，也许我就能试成功了呢？”</p>
<p>我变得异常冷静，“你别骗我，我要看你的病历，还有你说的那个特效药的文件。”我妈不说话了。</p>
<p>“真的有特效药吗？还在骗我吗？妈？”我硬撑着，</p>
<p>“你觉得现在这样正常吗？你现在还觉得我可以过正常的生活吗？如果我是个正常人，你还会这样煞费苦心地骗我吗？这么大的事你要瞒着我，这么严重的病我不能照顾你，我现在就在你住的医院楼下，可我永远到不了你的病房里去陪着你，而你甚至还在考虑家里的菜够不够我吃。妈，太多了，够了，早就够了。”</p>
<p>电话两头全是沉默。我的话太过激了，我不该这时候扰乱我妈的情绪的，我总是这样伤害身边的人，还恬不知耻地想要得到身边人的爱，真是卑鄙十足。</p>
<p>“小肥，爱怎么会够呢？”我妈的声音又传了过来，她似乎叹了口气，“妈妈爱自己的孩子，怎么会有尽头呢？如果我没法继续生活在这个世界上，在我离开前，我也一定会希望你，我的孩子，能够成为一个普普通通的幸福的人。”</p>
<p>我妈再一次用她的爱包裹住了我，一如从前的千百次，可我们都不知道这样的温暖还能存在多久。</p>
<p>“对不起，妈。”我艰涩开口。</p>
<p>“我知道我得了这个病你一定会很难接受，其实一开始我也是这样的，不过后来我就想通了，我一直生活的很幸福，虽然一直为你的特殊感到头疼，但你一直都是我不曾后悔的选择，那么就算这段旅途结束的或许会有点早，也没有留下什么遗憾。小肥，也许你会觉得妈妈对你的爱来自血缘，来自亲情，来自责任，但就算如此，我的爱就不是无条件的爱了吗？爱是一种纯粹又复杂的东西，我希望你不止看到了它复杂的一面，也要感受它的纯粹。如果你还是感受不到，倾倾是个好孩子，也许她可以让你得到你向往的无条件的爱。”我妈的话像是充满了安抚魔法，我慢慢平静了下来。</p>
<p>于是关注点再次歪了，“妈！倾倾在你房间里吗？”我羞赧<a href="#_msocom_1">[1]</a> 。</p>
<p>“她刚刚出去了。小肥呀小肥，妈妈还没有到不知道什么可以说什么不能说的地步呢。”</p>
<p>“我想去医院看你，可以吗？”平静过后，我还是很担心。</p>
<p>我妈想了想，“你来也可以，咱俩好像还没试过两个人在不同的时间线见面能不能连在一起？不过要是找不到我小肥可不要哭鼻子哦。”</p>
<p>“妈，可以了，不要再把12岁的事情翻出来再说一遍了。”我无奈。</p>
<p>我问好我妈的病房号，起身向住院区走去。尽管我妈这样说，但就算是一会我俩没办法见面，我也要找个其他方法和我妈的主治医生聊一聊，哪怕是三阴性乳腺癌，也不代表百分之百死亡率不是吗？</p>
<p>之前我妈做了那么多努力终于成功让我连到正常世界，这对常人来说就是个奇幻事件，那么让一个人摆脱癌症的控制这种时有发生的日常事件，也一定会有办法让它发生在我妈身上的吧？我决定先和倾倾通个气。</p>
<p><em>林静的儿子：倾倾，我也到医院楼下了，你见过我妈的主治医生了吗？</em><br><em>倾倾妹妹：你来可以看到阿姨吗？</em><br><em>倾倾妹妹：还没见到呢，问过护士站说是在查房，还没到阿姨的房间</em><br><em>林静的儿子：我也不知道，不过我妈醒了，也许可以试试</em><br><em>倾倾妹妹：阿姨的病……一定会有转机的！需要我帮忙问主治医生什么问题吗？</em><br><em>林静的儿子：如果我没法看见我妈的话，这件事就拜托你了</em><br><em>林静的儿子：不过我更希望能亲自问医生</em><br><em>倾倾妹妹：我也希望</em><br><em>倾倾妹妹：不然欠我的拥抱可是要收利息的</em></p>
<p>我终于被倾倾逗笑了，给她回了个“我诚实守信，本金利息都会还的”后，按灭了手机，推门走进了我妈告诉我的病房。</p>
<p>屋里空无一人，和我的哪种预想都不一样。按照常理，医院的病房常年满员，虽说也会存在一两间偶尔空着的病房，但就这么被我碰到会不会太巧？而且这间病房的被子还没被整理好，床头边的矮柜上还放着几个苹果和一把削皮刀。真的是半年前住在这间病房的病人恰好此时办理了出院吗？还是说因为我在靠近处于正常世界这个位置的我妈，所以才会让我的世界中的投影消失？</p>
<p>我觉得应该给我妈打个电话。熟悉的铃声在这个病房响了起来，我寻声锁定了那张还没叠被的床。</p>
<p>我妈接起了电话。“小肥？你到了吗？”</p>
<p>双重声音环绕在我耳边。我有点懵，这是从来没出现过的情况。</p>
<p>我把手机的声音调小，拿离了耳边，对着那张床问：“妈？”</p>
<p>我妈的声音略显迷糊但清晰无比，“崽？你在房间里？”</p>
<p>“对，我进来了，但是看不到你们。”我已经不看手机了，直接对着床的方向说话。</p>
<p>“什么？哦，我在和我儿子说话，我儿子，林萧斐。小肥打个招呼试试？你曹阿姨也在这呢。”我妈的声音再次传来，这种感觉就像是我妈在披着隐形斗篷和我说话，不对，更像是我们两个都披着隐形斗篷。</p>
<p>我只好随便找个方向跟曹阿姨问好，“曹阿姨，我是萧斐，你可以听见我说话吗？”</p>
<p>“我c……超级清楚，我听得超级清楚。小肥你，你在哪呢？我怎么看不见你？”曹阿姨的声音从窗边传来。行，还是原来那个曹阿姨。</p>
<p>“我也看不见他，估计是我们又钻了什么空子才能和小肥对话。”我妈解释。</p>
<p>“诶呀快别说了，小姑娘进来了！”曹阿姨低声说道。</p>
<p>是倾倾进来了？</p>
<p>“没事没事，这孩子知道小肥的情况，不会被吓到的。”我听我妈在和曹阿姨继续解释。</p>
<p>“倾倾呀，我儿子小肥来了，但是出了点状况，只能听见声音，看不见他人。</p>
<p>一会儿他要是说话，你别被吓到。”我妈在对倾倾说话。</p>
<p>“不会的，阿姨。”倾倾的声音格外清晰，就好像是从我的左耳边传来的，难道说，倾倾现在正紧紧地贴在我身边？</p>
<p>我有点儿紧张，喜欢和倾倾贴贴是一回事，和倾倾在大庭广众之下贴贴是另一回事。虽然我所处的病房依旧空无一人，但是我的脑海中已经能完全想象到她们现在所处的位置。</p>
<p>我稍稍后退几步，坐在了另一张陪护床上，降低了音量向刚刚我站着的位置问道：“倾倾，你能听见我说话吗？”</p>
<p>“嗯？你声音怎么离我这么近？”倾倾压低的呼气和清晰的声音再次传来，不过这次是从我的右边。</p>
<p>“是想我想到心有灵犀了吗？”天呐，她也坐到了这张陪护床上！</p>
<p>“倾倾在说什么？你听见小肥说话了吗？”我妈没听见倾倾说话。</p>
<p>“啊，我能听见，他好像害羞了。”倾倾回应我妈。</p>
<p>我害羞？？？</p>
<p>倾倾怎么知道？？？</p>
<p>不是，怎么就这么告诉我妈了啊？？？</p>
<p>我妈哈哈大笑。</p>
<p>我既羞耻又高兴，妈妈的笑声驱散了我的不安和紧张。</p>
<p>我试图挣脱当前的处境，“妈别笑我了！你的主治医生什么时候过来？我想问问他你的病情。”</p>
<p>我妈的笑声停住了，“小肥呀，这个医生说的话都是最严重的那种情况，你一会儿听完了不要太紧张，就平常心啊，别被他吓住。而且我现在感觉挺好的，感觉癌症也没有他之前说的那么痛苦嘛。”</p>
<p>我不打算再被我妈这些安慰我的话骗了，我凭借记忆尽量转向了刚刚倾倾在的位置，“倾倾，医生听不见我说话，一会儿你就帮我转述一下我的问题。嗯，我也听不见医生的，”</p>
<p>我正在想对策，就听到倾倾的声音从我头顶传来，“我就重复一遍医生说的话？”</p>
<p>为什么倾倾！为什么你又换位置了！所以我刚刚在对着什么说话，倾倾的胸口吗？</p>
<p>不行，不能再继续想下进去了，我转过身去，背对着倾倾，含糊地说了声“对”就不再搭话了。</p>
<p>没过多久，我听见倾倾在说话：“医生你好，阿姨现在的病是什么情况？怎么会突然晕倒呢？什么，阿姨是被疼晕的吗？”</p>
<p>我赶紧走到离倾倾声音最近的地方，“我妈的癌症到什么阶段了？现在的治疗方案是什么？有什么有针对性的治疗方法吗？”倾倾没复述我的问题，而是重复了医生的话：“我们去办公室谈？好的好的，阿姨你多休息一会儿，我一会就回来。”我赶紧跟上。</p>
<p>“现在没有什么特效靶向药？”倾倾重复。</p>
<p>“那其他的治疗方法呢，放疗？化疗？”我问。</p>
<p>“对这种癌症的治疗效果都不突出，只能延缓生命吗……”</p>
<p>“那手术呢？手术切除可以吗？”我继续。</p>
<p>“只能试试看？具体要做了全面检查才知道吗？而且癌细胞转移的几率很高？”</p>
<p>“那转院呢，去专项医院会有更大的把握吗？”我思考。</p>
<p>“可以先问问，但是哪里其实都差不多，主要是这个癌症现在确实没有什么有效的预后手段？”</p>
<p>“……那，还有多久？我妈还能……多久？”</p>
<p>“六个月左右……”尽管我已经做了心理准备，但听到这个时间，我还是不能接受，</p>
<p>“怎么会这么短……”</p>
<p>倾倾的声音依旧冷静，“那么哪种治疗方案延续生命的几率最大？手术切除吗？好的，我会回去和病人再商量一下。是的，病人的想法也很重要，谢谢医生，嗯嗯，有问题随时都可以问你的是吗？”</p>
<p>接着倾倾用很轻的声音对我说，“走吧，我们出去想想。”</p>
<p>我随倾倾离开了医生办公室，在倾倾的引导下，我们到了走廊尽头的楼梯间，接着她打通了我的手机，我们假装在通话。</p>
<p>“阿姨的病，接下来该怎么办？”我靠在冰冷的墙壁上，“我妈应该早就知道了，这些治疗方案，可她病历上怎么写的？”</p>
<p>“确诊之后按要求每个月过来做过几次化疗，但是后来就没来过了……也许，也许阿姨觉得症状减轻了，又担心你发现她去看病，所以就不来治疗了？”</p>
<p>“也许只是因为没什么效果。”</p>
<p>“小肥……”倾倾听出了我的绝望，她极力劝我，“别这样想，医生不是说了做手术延缓生命的几率最大吗？我们可以劝阿姨去做个身体检查，也许就符合做手术的要求呢？”</p>
<p>“阿姨一定会好起来的。”倾倾温柔的声音支撑着我。“我也希望。”</p>
<p>我妈前几次的术前检查都很顺利，于是医生依据那几次的检查，大致确定了我妈的手术时间，就在元旦前夕。</p>
<p>另外医生还建议说让我妈这段时间就住院观察，同时进行一些辅助治疗，以确保手术能顺利开始。所以这段时间我一直守在医院陪我妈，有时倾倾会来陪我，但次数多了，我渐渐生出了些内疚之情，我实在是亏欠倾倾太多了。</p>
<p>我们仨对我妈的手术都很期待，一来是我和我妈都想回家度过新年的第一天，二来是我希望手术能让我妈的身上发生奇迹，三来，我也想有空余的时间陪陪倾倾。</p>
<p>倾倾对此从无怨言，但我，我能给倾倾的实在是太少了，甚至连甜言蜜语之时，我都无法轻松地许诺永远。我妈一直很积极的按医生的要求进行各种治疗，她的气色并不像其他癌症病人那样苍白，甚至头发掉的都比同科室的病人少，一切似乎都在朝着好的方向前进，我们都是这样想的，直到最后一次术前检查。</p>
<p>那天实在突然，检查结束后，主治医生略显严肃地通知我，最新的体检显示我妈的身体状况无法支撑她进行手术，肿瘤突然飞速增长。</p>
<p>我早已不像最初那样会大脑宕机无法处理这种坏消息了，或者说，我早就做好了各种最坏的打算。我问医生接下来的治疗方案该怎么调整，医生回答说如果我还坚持手术的话，可以把这次手术的时间推迟到我妈的身体状况足以通过检查，但这样的话必须在日常治疗中增加一些项目的频率；或者就放弃手术这条路，继续之前的保守疗法。</p>
<p>这段日子我一直在努力了解我妈的癌症，就目前我所知道的内容，保守治疗绝无根治的可能。本以为手术可以让我妈和我度过年关，可现在原定的手术变得遥遥无期。我把这个消息告诉了我妈和倾倾，开口前总是很艰难的，但一旦说出了口，心里就好像是瞬间知道接下来该怎么做了一样冷静。</p>
<p>我妈也很平静，就好像她早就知道这个结果。她就用着平常说去超市没买到我爱吃的水果一样的语气应了声，然后略感遗憾地说我俩只好在医院过元旦了，全然没提医生给出的保守治疗的方案。我暗自松了口气，我始终觉得只要我妈还愿意手术，我们就还有机会。倾倾并不介意我们没法在元旦约会的事，临近期末，她也难以分心常来医院，于是常常叮嘱我要照顾好我妈，不仅是注意病情，我妈的心情更加重要。</p>
<p>又过了几天，倾倾说她给我准备了一份绝妙的新年礼物，等我妈病好后我自己去拆，我一直很好奇是什么，她只说这份礼物绝对会让我爱她爱得死去活来，其余的一概不讲。</p>
<p>就这样，元旦到了。</p>
<p>其实我已经不太记得只读世界和现实世界的日期对应了，我妈也许怕我想到手术推迟就会难过，也一直没提元旦的事情。</p>
<p>日复一日的治疗不仅折磨着我妈，也折磨着我。</p>
<p>还是倾倾发消息给我，我才注意到节日的到来。</p>
<p>倾倾妹妹：今天是元旦哦，我给你准备的惊喜要开始制作啦，林小肥同志183天后要记得签收！今年的心愿是希望在你的只读世界过元旦之前阿姨的身体就康复了，我们俩也找到方法打破了时间的阻隔！总之，提前说一声元旦快乐吧～</p>
<p><em>林静的儿子：我的新年愿望是我妈身体健康，倾倾永远快乐</em><br><em>林静的儿子：今天是要出门去玩吗？和哥哥？</em><br><em>倾倾妹妹：我才不带他</em><br><em>倾倾妹妹：你的愿望都没有自己的吗？这么大公无私呀</em><br><em>林静的儿子：也有的</em><br><em>林静的儿子：我的私心，不告诉你</em><br><em>倾倾妹妹：？</em><br><em>倾倾妹妹：大臭猪都有胆子瞒我事情了吗</em><br><em>林静的儿子：hhh</em></p>
<p>“我希望我能和倾倾永远在一起”这种愿望，还是不要这么直白的告诉她了吧？</p>
<p>安顿好我妈的午饭之后，我便回家准备依着做饭视频捏几个饺子，想着我俩也过个节。北方不论过什么节都爱吃饺子，从前都是我妈当主力，我在旁边做副手，两个人热热闹闹地聊天一点也不觉得费时费力，这次只有我一个人，面的发酵和馅料的调味就把我折腾得够呛，等好不容易包出几个像样的饺子，都快到了晚饭时间，我把它们丢进了锅里，这才稍稍得到了一丝喘息的时间。我摸到了不知道何时沾上了面粉的手机，点开一看，倾倾的消息占满了屏幕。</p>
<p><em>倾倾妹妹：步行街好热闹呀，大家都出来玩了</em><br><em>倾倾妹妹：午饭的地点选在了牧野小镇，是室友强烈推荐的，我尝着感觉也不错，下次一起来呀？</em><br><em>倾倾妹妹：亮灯了！氛围真好……</em><br><em>倾倾妹妹：有在和阿姨好好过跨年夜吗？让我猜猜你包的饺子是什么馅的</em><br><em>倾倾妹妹：白菜？</em><br><em>倾倾妹妹：香菇？</em><br><em>倾倾妹妹：我吃了玉米馅的，意外的很好吃哦</em><br><em>倾倾妹妹：我今晚要在步行街跨年，听说零点的时候对着烟花许愿会很灵，不知道是真的还是假的</em><br><em>倾倾妹妹：我想试试看</em><br><em>林静的儿子：我包了虾仁的，没想到一个人包饺子这么难……</em><br><em>林静的儿子：如果晚上我也能看见烟花的话，就许一个“你的愿望全部实现”的愿望好了</em><br><em>倾倾妹妹：下次我们一起包！我可是包饺子小能手哦</em><br><em>倾倾妹妹：哈哈哈哈林小肥同志很上道嘛</em><br><em>林静的儿子：嗯嗯</em><br><em>林静的儿子：毕竟我希望倾倾的生活永远顺利</em><br><em>倾倾妹妹：！！</em><br><em>倾倾妹妹：犯规了犯规了！</em><br><em>倾倾妹妹：突然好想你</em><br><em>倾倾妹妹：本来就很想，现在更想了</em><br><em>倾倾妹妹：好想好想好想</em><br><em>倾倾妹妹：不聊了！我要去给你准备礼物了！</em><br><em>林静的儿子：到底是什么这么神秘？</em><br><em>倾倾妹妹：不告诉你！</em></p>
<p>我笑着关掉了对话框，拎着保温饭盒走进我妈的病房，房间里静悄悄的，就像往常一样。</p>
<p>安静是常态，这没什么不对的，在我和我妈“链接”到一起之前，这房间里一直是这样的安静。我照旧给我妈打了电话，等她接通好把我拽到正常世界，可是一直到电话忙音她也没接。去卫生间了？我边想着边把饭盒放到床边的矮柜上，打算等等再打。大约过了十五分钟，我又给我妈打了电话，依然无人接听，我这才意识到不对劲。</p>
<p>我赶紧给护士站打电话，“你好，请问513病房的林静病人在病房吗？我打电话给她没人接听。”</p>
<p>“稍等，我问一下值班护士。”</p>
<p>“好的。”</p>
<p>“513病人在房间吗？小吴你去看看，什么？刚刚发现失去意识在做紧急抢救？”护士有些模糊的声音传来，我只听清了抢救。</p>
<p>难道我妈出事了？“我妈出什么事了？”我急急忙忙地问。</p>
<p>“您是513病人的直系亲属吗？513病人刚刚昏迷了，目前正在抢救，随时可能下病危通知，这边建议您赶紧来医院做好准备。”</p>
<p>“我……我在外地回不来，她的情况严重吗？”</p>
<p>“这也说不太准，我们的医生是一定会尽全力的。那您能联系到本地的亲属过来一趟吗，这边的情况还是需要一个亲属来做决定的。”</p>
<p>“只有我一个……”又一次同样的情况，就在我面前，我却什么都做不到。</p>
<p>“这……”护士犯了难，大概在心里骂我冷血吧，“那这样吧，513病人一旦出现了什么状况我都电话通知您，都让您有个准备，不过还是建议您最好回来一趟，这位病人，已经癌症晚期了。”</p>
<p>“……我知道。”</p>
<p>…</p>
<p>那个晚上成了我挥之不去的梦魇。时间对于我失去了意义，所有的事情都变得混乱不堪，而每一刻都历历在目的并行在我的眼前，我的左耳听见护士说我妈脱离危险，右耳畔却响起病房里监控器的警报声，冬与夏在我眼的前来回交替，数不清的医生护士在我面前奔跑，眨眼间又消失不见。</p>
<p>变换的场景令我头晕目眩，嘈杂的声音让我无法思考，混沌里只听我脑海中不断传来的声音：你的世界就要抛弃你了。是谁的声音？如此熟悉，藏不住的哽咽声，一遍又一遍。我努力循着声音找去，医院里不知何时起了雾，我看不清前路，也找不到归宿。</p>
<p>声音越来越近，越来越近，在一片雾茫茫之中，我终于看见一个熟悉的身影。</p>
<p>那是我，一个小小的，第一次离开妈妈独自出门的我。我突然想起那次的经历。也许是七岁，也许是八岁，我因为妈妈不让我去楼下和其他的小朋友一起玩而赌气。</p>
<p>那是个周六，我记得，难得的阳光明媚，我从我家窗户向外看去，几个小个朋友在柳树下正玩得开心，他们在用旁边施工多余的沙堆堆长城。从未和其他小朋友一起玩过的我突然对他们的游戏爆发了难以控制的热情，于是我央求我妈，希望我妈能同意我下楼去玩，我妈一如往常地拒绝了我，连理由都是同样的，她说我在生病，不可以和其他的小朋友一起玩，等我病好了我想玩什么她都会带我去，接着她蹲下抱了抱我，让我回房间睡午觉。</p>
<p>以往听到这里，我都会乖乖的听话回房间，可是那一次，那一次对“和其他小朋友一起玩沙堆”的热情确实是空前的高涨，以至于我第一次没有听我妈的话。我知道我妈也会和我一起午睡，而我们两个都有自己的房间。于是我回到房间，兴奋的等着，期待着，畅想着，没有一丝困意，我不记得我等了多久，但我确定我妈已经睡熟，于是我穿好外套和鞋子，蹑手蹑脚地打开家门，一溜烟地跑到了那颗柳树下。</p>
<p>小朋友们还在那里，我对着他们大喊：“我可以和你们一起玩吗？”没人回应我，但我也没太过失望，上学的时候也是这样的，至少他们没有因为我说话而离开这个沙堆，这就够了，我很容易满足，这样也算和小朋友们一起玩了。于是我愉快的加入了沙长城的建设中。我们建设完了这个工程，又去找下一个沙堆继续建设，我不知道玩了多久，只知道小朋友们一个一个的回了家，最后只剩我一个，被留在了刚刚盖好的沙城堡面前。</p>
<p>我也终于尽了兴，这才想起要赶在妈妈睡醒之前赶快回家，可我抬头环顾四周，入眼全是陌生的街景，我才发现我迷路了。我一瞬间慌了神，惊慌失措之下号啕大哭，我也尝试寻找街边的大人去问我该怎么回家，可无一例外的，没有任何人理会我，那是第一次让我感觉世界抛弃了我。</p>
<p>「我」现在就在我面前哭泣。“你，你好大哥哥，你知道怎么去远洋小区吗？”</p>
<p>我听见「我」哭泣着问我。我蹲下身看着面前的「我」，像我妈一样轻轻地抱住了「我」，</p>
<p>“我不知道。”</p>
<p>“不过没关系的，妈妈马上就会来找你了，”我拍了拍「我」的头，“不管你在哪儿，她总能找到你的。”</p>
<p>“真的吗？”</p>
<p>“真的，她永远都不会抛弃你的。”我安慰自己。“可是，妈妈在变老。”</p>
<p>“妈妈变老了，你也会长大，你会遇见另一个总能找到你的人，而你也总能找到她。”</p>
<p>“是我的好朋友吗？”</p>
<p>“是的，她是非常、非常、非常好，想要紧紧相连一辈子的好朋友。”</p>
<p>放在裤子口袋里的手机在响。我改用左手抱住小小的“我”，右手艰难地从口袋里拖拽出了括噪的手机。</p>
<p>哦，是我的倾倾。“倾倾？”“萧斐！你终于肯接电话了！你，你现在好些了吗？”</p>
<p>倾倾沙哑的声音中流露出焦急，又带着哽咽。</p>
<p>我很不解，倾倾怎么是这样的语气，她现在不应该开开心心的在跨年吗？</p>
<p>还有我，我又怎么了？</p>
<p>“好些？什么好些了？”于是我问道，“你的状态听起来，”</p>
<p>我想了想，尽量避免问题太过突兀，“是在步行街发生什么事情了吗？”</p>
<p>“什么？步行街？”</p>
<p>“我是说，你现在不是在步行街等着跨年吗？刚刚和我发消息的时候感觉你还很开心，现在怎么听起来这么难过，是遇到什么事情了吗？”</p>
<p>倾倾不说话了。</p>
<p>我不知道我哪里说错了话，而我又无法赶到她身边，只能在电话里说些安慰的话。</p>
<p>想到这儿，我的头开始痛了，这种感觉似曾相识。</p>
<p>而倾倾恰在此时开口：“今天是几号？林萧斐，你告诉我，今天是几号。”</p>
<p>“12月31啊，”我不解，“这有什么可问的，你不是在跨年吗？”</p>
<p>“你看看你的手机，上面显示是几号。”倾倾听起来要哭了。</p>
<p>“倾倾你别哭！我现在就看，我看，”我赶紧把手机远离脸颊，按亮了屏幕，“我这里是7月4号，加183天是……”</p>
<p>我用日期计算器把它们相加，“呃，1月3号？怎么会是1月3号？”</p>
<p>倾倾完全不掩饰她的哭声了，“已经三天了，我给你打了三天电话，这是你接的第一个。萧斐，我知道阿姨离开你对你的打击一定会特别大，但是你也要振作起来，阿姨一定也不会想看到你现在这样的。”</p>
<p>“你说什么？我妈怎么了？”我的大脑在旋转，在翻滚，始终拒绝解读倾倾的话。</p>
<p>“阿姨走了。”倾倾努力调整情绪，“是你告诉我的。31号的零点刚过，你给我打电话说你没有妈妈了，然后就挂断了电话，我回拨给你，你再没接过。后来，后来我收到了阿姨给我发的定时信息。”呜咽的声音从听筒传来，“她说很抱歉她没撑过去，如果可以的话，你就拜托给我了。还有一份电子转让合同和信息一起发给我了，上面写的是把阿姨和你居住的房子无偿赠与我。”</p>
<p>倾倾的声音听起来如此无措，“萧斐，我想见你……”</p>
<p>我的大脑仍在拒绝工作，也许在下意识里抗拒处理“我妈走了”这件事，就是佐证倾倾的话的最佳证据。我低头看向自己的怀里，想要找些什么反驳倾倾，可是什么都没有，那个小小的我消失的无影无踪，我的怀抱里只余一团空气。</p>
<p>这一切都是因为我抗拒现实，大脑替我编造出来的？背后冰冷的储物柜提醒着我，我甚至没有走出我妈的病房。原来是我太脆弱。原来是我想太多。我没有言语，默默挂断了电话。倾倾，现在的我，一个仍然没找到另一个锚点的我，在失去了与正常世界唯一联系的我，该如何回应你呢？</p>
<p>为什么时间还在前进？</p>
<p>为什么我被留在过去？</p>
<p>断了线的风筝，还能够回到原点吗？</p>
<p>我的生活一分为二，一半停留在过去，一半随我妈消失。</p>
<p>我开始抗拒和现实世界接触，我不再接听倾倾的电话，对曹阿姨的关心不闻不问，对BLEACH的训斥毫不在意</p>
<p>……</p>
<p>极其偶尔的时候，我会回倾倾几个字。</p>
<p>我把我所有的精力都投入到，寻找我妈的投影中。我仍然无法接受她就这样离开了。</p>
<p>因而我也发现，我家的房子真的有些问题，因为我无法在家里看到任何我妈过去的投影，这显然是不符合我的常理的。</p>
<p>但我不知道成因，也不在意成因，只知道自己不能在家里找了，于是改在家门口等着“我妈”出现。我妈每天出门的时间都不固定，出门做的事情也不尽相同，不管她去做什么，我都会跟着她的投影。</p>
<p>是的，我清楚的知道那是投影，是过去，是虚假，是无法互动的片段，但我还是想要再陪陪她。那些我错过的时间里，我妈她都做了什么事情？</p>
<p>我从未像现在这样如此庆幸自己生活在只读世界，那些我不曾留意，无从得知的事情，我还有机会再次了解，尽管只有半年。</p>
<p>我陪着她一起去超市，可我没法帮她拿任何东西；</p>
<p>我看她坐在医院走廊的座椅上望着诊断报告发呆，可我没法对她说安慰的话；</p>
<p>我看她几次驻足在花店前流连忘返，但从未买过一枝花，而那全是因为我花粉过敏，可我现在只希望我妈能高兴地捧一束花回家。</p>
<p>我沉溺在183天前的倒影中，就像一只鸵鸟，只要不抬头，就可以一直待在温暖的羽毛里。</p>
<p>可那些许许多多我做不到的事又像是一根根针，它们刺痛着我，让我清醒。</p>
<p>清醒的时候，我总是在想倾倾，那个漂亮的，善解人意的，充满活力的女孩，只因为我非常喜欢她，就该被我拴住吗？她的确像太阳一样温暖了我，但太阳从来不该只属于一个人。</p>
<p>可我的私心，我的爱慕，始终阻止着我直白的和她提出分手，她没有任何错，错的是横在我们两个之间的时间。</p>
<p>我突然惊醒。梦里上一刻还在娇嗔地捶着我的背的倾倾，此刻已不见踪影。但喜悦仍在。那梦中的情感突然被带出现实，仅是残留的，都骗过了我的心脏。此刻的它正在为倾倾猛烈地跳动。我缩在被子里，等待它平静下来。</p>
<p>约莫过了十来分钟，剧烈跳动的感觉终于消失了，可我不愿意起身。但最终我还是坐到了工作桌前，从杂乱无章的东西里翻出了不知道记了多少天的本子，我翻到夹着笔的那一页，不出意外，一片空白。</p>
<p>今天怎么写好呢？我想了想，下笔写道：“许久没做这么长的梦了。”</p>
<p>是啊，那全都是梦，那怎么不会是梦。这里连空气都是冷的，又怎么能留住温暖的阳光呢？</p>
<p>“……12月31日，是最后一天了。我能得到的有关倾倾的消息，就要停在今天了。”</p>
<p>“接下来还能做什么？是继续举证推断自己二十多年的生活不是一个疯子的臆想，还是接着在透明的围墙上摸索也许再也不会出现的门，或者……出去见见她。”</p>
<p>“出去见见她吧……不管怎么算，梦里的我和现实的我都很想知道，倾倾的礼物会是什么。”</p>
<p>我停下笔，看了眼时间，8点37分，现在出门刚刚好。电费所剩无几，我没开卫生间的灯，草草地用冷水洗了下脸，抓起离门口最近的外衣套在身上便出了门。其实有许多事需要我想出对策，比如我该怎么继续生活下去。</p>
<p>现在我用水、电、供暖和网费，都是我妈生前交的，她总是喜欢一次性交很多费用，从前我一直不知道是因为什么，现在想来，大概是她怕自己哪天出了意外，我就没法一个人活在只读世界了。但是那些“昨天”们想不出对策的事情，我想排在今天之后。</p>
<p>我在去步行街的路上随便找了家便利店，进门拿了一个面包，撕开包装纸咬了几口当做早饭，曾经绝对做不出的事情，现在对我来说反而稀松平常。</p>
<p>反正我无论做什么，都改变不了现实世界。</p>
<p>我拿出手机，一边翻和倾倾的聊天记录，一边往步行街的入口走。在翻过了大量的我一个人的自言自语之后，我终于看到了来自倾倾的那条“步行街好热闹呀，大家都出来玩了”，时间是9点47分。远处的复古钟楼提醒我现在是九点一刻，我收起手机，在步行街的入口处找了一个没人的座椅坐下。</p>
<p>不知道幸存者偏差还是怎么，经过我面前的行人全都成群结队，快乐和兴奋飘洒在街道上，把他们围得密不透风。</p>
<p>但我毫不在意，因为我很确定地知道我需要什么，我在等什么。</p>
<p>倾倾。</p>
<p>夏倾倾。</p>
<p>我在只读世界的冬天，等待一个属于夏天的太阳。所以当那个身影真的出现在我的视线中时，我便觉得徘徊在我头上许久的乌云终于被驱散了。</p>
<p>一步，两步，为什么我跑得这样慢？</p>
<p>三步，四步，她今天真漂亮。</p>
<p>五步，六步，我终于挽住她的手了。</p>
<p>真好啊，我终于能确定这一切都不是梦了，如果是梦的话，我一定会想得更大胆一些，比如我一定会让倾倾感觉到我。</p>
<p>“林小肥？”倾倾看向了我。</p>
<p>什么？这怎么可能？</p>
<p>“果然有些怪啊……”倾倾把头转了回去，有些害羞地摸了摸鼻子，小声嘀咕道。</p>
<p>她的手在口袋里摸索了一会儿，掏出了一副蓝牙耳机戴在了耳朵上，“咳咳，这样就好多了吧？”</p>
<p>我又一次习惯性地将她飘在额头前的那缕头发别向她的耳后，“嗯，好多了。”</p>
<p>接着倾倾又拿出了一面镜子，翻开来仔细观察自己的模样。“嗯，很好看，直男林小肥非常喜欢这个样子。”</p>
<p>“倾倾今天好漂亮。”</p>
<p>我俩的声音重叠在一起，如此默契，却也冷冰冰的提示着面前的倾倾只是这个世界记忆的投影。</p>
<p>可我仍然会不由自主地追逐。</p>
<p>“呀！快要十点了！”倾倾小声惊呼，“时间怎么过得这么快？”</p>
<p>时间怎么会过得这么快……我近乎痴迷地望着她，只希望永远停留在这一刻。</p>
<p>但她的投影仍在继续。“就九点五十七分吧，记下来记下来。”</p>
<p>倾倾在手机备忘录上很认真地打字：“上午九点五十七 约会开始”</p>
<p>“当当当~林小肥同志！还记得我说要送给你一个神秘礼物吗？就是这个！由夏倾倾同学完全主导的一次约会！”倾倾微微偏头，向着空无一人的身侧说道。</p>
<p>我默默挪到了倾倾面对的那侧。</p>
<p>“当然，我知道现在的你在做更重要的事情，所以这次的约会对象是未来的你哦！”</p>
<p>“咳咳，那么现在，约会开始啦！”倾倾说完并没有动，像是在等着什么，于是我拉上她的手一起等着。</p>
<p>“小肥有拉住我的手吗？我可要出发了哦？”她有些不放心地出声提醒。</p>
<p>“有的。”我与倾倾十指相扣，“走吧，我很期待和倾倾的约会。”</p>
<p>明知道这是我一个人出演的话剧，我还是愿意全心全意地投入。</p>
<p>我与倾倾就这样慢慢地走过甜品店，走过咖啡店，走过CD店，直到走过我的世界。</p>
<p>我们在新年展厅门口前的横椅坐下。</p>
<p>倾倾拿出手机，又在备忘录上记下了什么，而我依然像观摩心爱的艺术品那样看着她，不愿错过一分一秒。</p>
<p>“说起来，小肥在干什么呢？”倾倾思考。</p>
<p>“过去的我吗？这个时间……大概在看三分钟学会包饺子的视频吧。”我回复她。</p>
<p>“真是难以想象啊……半年后的小肥会在干什么呢？认真算一算的话，我们在一起的时间也才一年？”倾倾陷入了回忆。</p>
<p>“你问现在的我？我在赴约。”赴我唯一能确定的约会。</p>
<p>倾倾先是笑了笑，接着摸了摸鼻子，最后用手搓了搓脸，“时间过得真快呀，好多事情仿佛就发生在昨天。”</p>
<p>“好想你呀，林小肥，我们什么时候才能见面呢？一星期后？一个月后？一百八十三天后？”倾倾注视着她的身旁，“等见面的时候，你会抱抱我吗？”</p>
<p>我把倾倾紧紧抱在怀里，熟悉的气味，顺滑的头发，合适的位置，一切是那么理所应当，直到倾倾的声音突兀地响起：“接下来要去餐馆吃饭啦！听说这家店的情侣套餐特别好吃，我一定要带你去尝一尝~”</p>
<p>我舍不得怀里的倾倾，却也想继续和倾倾的约会，万般无奈之下，我还是把怀里的倾倾放了出去，跟着她的身影走向餐馆。</p>
<p>这一天过得漫长又短暂，我们一起吃了情侣餐，一起看了有美好结局的电影，一起去娃娃机挥金如土，一起到撸猫店快乐吸猫……实在难以想象，短短一天的约会我们竟然做了如此多的事情，或者说倾倾是不是也在担忧什么，从而进行了这么紧密地安排的呢？</p>
<p>对了，缅因猫真的很可爱，我很想有一只温柔的大猫和我在客厅的沙发上一起晒太阳，如果还有机会的话。</p>
<p>只是它还是太过短暂。</p>
<p>倾倾这一天一直很努力地假装身边有一个我，我也很努力地不去想这极有可能是属于我的最后一场约会，所以一定在很多个时刻，我们都享受着这个跨越时间的礼物。</p>
<p>直到深夜。步行街上的人多得罕见，并且他们都很有默契地朝着同一个方向走动。倾倾也在此列，但她走得比其他人都要慢，我默默跟在她身旁，在热闹的午夜获得一丝漫步的惬意。</p>
<p>我并不知道他们要去哪里，也许他们的目的地有一些约定俗成的活动在进行。</p>
<p>而我只熟悉夏天的，我妈是个既喜欢热闹又十分怕冷的人，她喜欢带我去所有开在夏天的盛会，但一到冬天，傍晚四点后就不会再出门。</p>
<p>不过，今天这个日子，这么多人的深夜活动也许是大家聚在一起倒计时？有心爱的人陪在身边的话，倒是能让人完全忘记寒冷啊。</p>
<p>“手好冷哦，”倾倾突然说，“害羞的小肥同志是不是没有牵我的手呀？”她转向我在的位置，眨着眼睛，满是笑意。</p>
<p>至于为什么这次她能如此精准地捕捉到我，全然是因为积累了一天的经验，我已经能摸清倾倾转头的习惯了。</p>
<p>我忙伸出手想去牵她，这才发现自己的手早就冻得麻木，只得用力攥紧了拳头，试图让快冻出冰碴的血液流动起来。</p>
<p>可没等我把手变暖，就听倾倾再次开口：“我突然好多啦，小肥真好。”她露出的笑容依旧让我着迷，只是动作和语言无不在把我拉出现实：这只是一段发生在过去的记忆。我只得默默跟上她的步伐。</p>
<p>远处闪烁着的霓虹灯带越来越近，我这才辨认出灯光的来源是报时的钟楼。它的周围围满了人，喜悦的，幸福的情绪不断从人群里飘散而出，许许多多带着期待的话语也流入我的耳中。</p>
<p>“妈妈，今天的灯好漂亮！是因为要庆祝新年吗？”</p>
<p>“都说了跨年夜要注意安全，不要到处乱跑，还不快点拉住爸爸的手。”</p>
<p>“宝贝！我这次约会地点选得是不是特别好？我一想就知道你绝对会喜欢这里！好啦好啦，怎么还哭了，我保证以后每年我都陪你来好不好？宝贝要开心呀。”</p>
<p>“萧斐！”我晃过神来，听见倾倾在叫我的名字，她的手里出现了一个信封，不知道是什么时候拿到的，我正好奇信封里装了什么的时候，就听见她有些不好意思地开口：“萧斐，我听我的学姐说，步行街每年都会在钟楼下面放一个许愿信箱，它会一年后的同一天把这封信邮寄到收件人的手里，”她一下又一下地抚摸信封，像是在缓解害羞的情绪，“所以我，我写了一封给你的信。我先说好哦，这封信绝对绝对不是情书！只是一些，嗯，想你的话……”</p>
<p>她的脸上爬满了懊恼，似乎是因为说错了话，“不能喊卡重来真的是……”倾倾小声嘀咕了几句就不出声了。我看得出她在想接下来的话该说些什么，通常这种情况不会持续太久，果然这次也是，倾倾像是下定了什么决心一般，抬起头朝着我在的方向再次说道：“就是情书，林萧斐，这封就是我写给你的情书，在我见不到你的时候，在我一遍一遍看咱们俩一起拍的视频和照片的时候，在我东想西想的时候，我就爱写点什么……不知不觉就，写完了这封信。”</p>
<p>倾倾眼中的光亮地不可思议，旁人见了只会觉得她在和电话那头的人进行认真地谈话，但我知道她是在看着未来的我。</p>
<p>她把手中的信向我这边递了递，我会意地接了过来，放进了我的外套口袋里。</p>
<p>“等我回家了你再看吧，怪不好意思的。”小小地声音伴随着抽纸声从身边传来。</p>
<p>我笑了笑，”遵命，我的倾倾爱哭鬼。”</p>
<p>我跟着倾倾走到了她说的那个许愿信箱面前，看她郑重其事地把一个空气投进邮筒的样子还怪好笑的，不过倾倾显然没有任何感觉，她投完信后抬头看了看钟楼，我也顺着她的目光看去，钟楼的指针也在闪烁着，那根长长的，仿佛可以宣判我的命运的分针已经指到了十一。我跟着倾倾往人群中走去。她选了个离钟楼不算太近的位置，我紧跟着她站好，倾倾没再看向我这边，而是望着漆黑的天空，一副期待着什么的摸样，而我又开始像个痴汉一般盯着倾倾的侧脸看个不停。</p>
<p>人群中逐渐传来了倒数数字的声音。</p>
<p>“十、九、八……”声音越来越大。</p>
<p>我也开口轻轻也跟着一起数着，“五、四……”“三、二、一。”</p>
<p>漆黑的天空中突然迸发出光彩，烟花连成一片，映在每个幸福的脸颊上。</p>
<p>“新年快乐！”</p>
<p>“新年快乐！”</p>
<p>“又过了一年啦！”</p>
<p>“明年也要来呀！”</p>
<p>“新年快乐林小肥！明年可不能再让我一个人来了哦，不然我可真的生气了！”倾倾笑眼盈盈，趁人头攒动之时喊出了这句话。</p>
<p>没人在意这个面带笑容的小姑娘说了些什么，无它，她的笑容太耀眼了，就像是幸福溢出的模样。</p>
<p>可是这样的时间，这样的地点，人人都很快乐。</p>
<p>可这一句话，是我今天唯一无法回应的一句。</p>
<p>倾倾没有等我的回应，“你回去吧小肥，哥哥已经来接我啦。”倾倾接着说道，”这次先饶过你，明年可就是你送我回家了哦。”</p>
<p>我没有动。倾倾像是预判了我的行为，又小声说了一句：“你不想看信吗？快去看信吧！千万不要在我身边看，我会不好意思的。”</p>
<p>我知道她今天会很安全地被BLEACH接走，然后再回家路上接到我的电话，接着担心了我两天，直到再也联系不到我。我全都知道。所以我想再看她一会儿。</p>
<p>于是我离她稍远几步，一边看着她，一边打开信封。</p>
<p>亲爱的林萧斐：哎呀哎呀，不知道你这个单细胞直男看到这封信是什么感觉，是疑惑还是害羞？是喜欢还是感动？总之，我不许你有负面情绪。我已经许久没见到你了。虽然每天都在联系，却还是止不住地想你，在食堂吃到好吃的饭的时候会想你，上课听不懂想要打瞌睡的时候会想你，闲逛在湖边看阳光下水波荡漾的时候也会想你。我的室友说，异地恋的感觉就是这样的，尽管现代科技可以让我们随时随地地聊天、视频，但想念仍然不会停止。我想我们俩，也可以算做异地恋吧？所以这只是正常范围内的想念，绝对不是因为我特别想你。其实有时候我会想，你是不是我幻想出来的男朋友呢？不然怎么会如此让我喜欢，第一次和你聊天的时候，那种喜悦的感觉就瞬间侵入了我的大脑，只觉得世界上怎么会有这么可爱的男生，所以忍不住想要调戏你，想看你脸红的样子，想看你惊慌失措打错字的样子，想看你假装神态自若却完全不知道自己在说什么的样子。后来才发现，我也很喜欢你毒舌的样子，喜欢你绞尽脑汁讨我喜欢的样子，喜欢你在困惑为什么我喜欢你的样子，喜欢你温柔地亲吻我的样子，喜欢你拉着我的手走在路边吹着晚风的样子。一想到这，我就能确定你不是我幻想中的男朋友了。如果是我的幻想，你现在就应该站在我的宿舍楼下，等我下楼一起去吃校门口好吃的东北菜了。所以林萧斐，我真的好想你哦。我讨厌你身上奇奇怪怪的规则，我讨厌你生活在另一个世界，我讨厌你不能每天出现在我的面前。可是，我喜欢你的全部。真是糟糕。那，下次见面的时候，就罚你要说上一整天的你喜欢我好了，谁叫你总是无时无刻出现在我的脑海里。就这么说定了哦。啊啊啊许愿信箱快让那一天早点来吧！夏倾倾</p>
<p>我擦了擦洇在信纸上的痕迹，将它仔细折好又放回了我的口袋。倾倾被她哥哥接走了，这里的喜悦再没有我的份。我不想回家，也不想留在这里，于是去了和倾倾第一次约会的江边。我也没有一定要去江边的理由，就是觉得，它在叫我。今天的江边很热闹，夜幕里的烟花此起彼伏的闪耀，消失。我盯着绽放又消失的烟花，这才焕然大悟，原来我对倾倾的第一印象出了差错。她并不是能一直照耀我的太阳，而是只能给我带来一瞬间幸福的烟花。很美，很耀眼，让人能记住一辈子的烟花。好像也不错。</p>
<p><strong>END</strong></p>
<p>七宝：反复读了好几遍，BE中最令人痛心的一是母亲的病逝自己没有见到母亲最后一面和倾倾独自演绎的新年礼物。但是还是有一些小的bug，故事中肥肥需要母亲的介绍才能于正确时间的人交流，这一设定对于肥肥的母亲来说应该是不生效的。也就是说肥肥任何时候都可以看看正常时间线中的母亲。所以再母亲生病后，肥肥也是有能力直接去医院见到正常时间线下的母亲，不至于到最后那么束手无策。</p>
]]></content>
      <categories>
        <category>小说</category>
      </categories>
      <tags>
        <tag>小说</tag>
        <tag>集</tag>
      </tags>
  </entry>
</search>
