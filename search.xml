<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>有一些话</title>
    <url>/2023/05/09/01-someword/</url>
    <content><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a><strong>写在前面：</strong></h2><p>总算下了决心把博客做一个迁移了，就像是和一个老朋友做了道别一样，有点疲倦和无奈。放一张以前博客的截图。</p>
<p><img src="https://resources.kagerou.top/img/deemo/AI05newworld.webp" alt="七宝的小窝"></p>
<p>自从购买了阿里云的数据库RDS之后，将博客的数据库链接分到了别的服务器上，博客服务器和数据库通信的延迟就直接番了好几倍，体验真的差了很多。但是也没有办法，同期QQ机器人的开发和数据存储又需要一个比较好的数据服务，也导致后来博客就慢慢的不在使用了。后来因为工作的原因，机器人也没用，很多东西感觉放太久了，就像放在橱窗里的橘子一样，虽然有厚厚的皮包裹着不容易坏掉，但是也没有最开始的新鲜的味道了。想重新拾起来，却总是找百般借口。</p>
<p>最近一直都很迷茫，找不到一件主心骨的事情，浑浑噩噩的。做了内网穿透使用的是<strong>nps</strong>+<strong>npc</strong>,将以前的手机root后装上了<strong>termux</strong>开始了一个新的Linux鼓捣方向，还好整个过程都还算顺利，做了Arai的下载服务，本博客的部署。当然也有不顺利的地方：FTP服务总是没有办法配置好，想配合电视盒子做一个视频服务器的，可惜没有如愿。哈哈哈之后换个路由器和能刷盒子系统的时候再来尝试一下。</p>
<p>前几天买了几个郁金香的种子回来，想种种花，爸妈问我能不能去做一下其他行业的事情，我才发现，我似乎除了<del>写写代码</del>，其他的似乎什么都做不来。年纪有这么大了，像新手一样重头学起嘛？会考虑很多，想一下徒增烦恼的问题，很烦啊。冷静一下来写写博客吧！即使只是搬运，有事情总比没有的好。</p>
]]></content>
      <categories>
        <category>废话</category>
      </categories>
      <tags>
        <tag>随便写写</tag>
        <tag>话痨</tag>
      </tags>
  </entry>
  <entry>
    <title>将PNG图片快速转化为Webp格式</title>
    <url>/2023/05/22/Png2Webp/</url>
    <content><![CDATA[<h4 id="PNG格式介绍"><a href="#PNG格式介绍" class="headerlink" title="PNG格式介绍"></a>PNG格式介绍</h4><p>PNG（Portable Network Graphics），便携式网络图形，是一种采用无损压缩算法的位图格式，支持索引、灰度、RGB三种颜色方案以及Alpha通道等特性。其设计目的是试图替代GIF和TIFF文件格式，同时增加一些GIF文件格式所不具备的特性。PNG使用从LZ77派生的无损数据压缩算法，一般应用于JAVA程序、网页或S60程序中，原因是它压缩比高，生成文件体积小。PNG文件的扩展名为.png</p>
<h4 id="Webp格式介绍"><a href="#Webp格式介绍" class="headerlink" title="Webp格式介绍"></a>Webp格式介绍</h4><p>不想写</p>
<h4 id="使用Pillow转换"><a href="#使用Pillow转换" class="headerlink" title="使用Pillow转换"></a>使用Pillow转换</h4><p>使用的Python的图像库Pillow中 Image.open().save()函数来做图片的处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;./imagining.png&#x27;</span>) <span class="comment">#读入文件</span></span><br><span class="line">im.save(<span class="string">&#x27;./imagining.webp&#x27;</span>) <span class="comment">#保存</span></span><br></pre></td></tr></table></figure>

<h4 id="批量的目录读取-转化"><a href="#批量的目录读取-转化" class="headerlink" title="批量的目录读取+转化"></a>批量的目录读取+转化</h4><p>使用os.walk()来读取指定目录和目录下的所有文件信息，遍历后对匹配的文件进行Pillow的函数转化。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment">#im = Image.open(&quot;./ephemeral.png&quot;) #读入文件</span></span><br><span class="line"><span class="comment">#im.save(&quot;./ephemeral.webp&quot;) #保存</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pic_webp</span>(<span class="params">picpath</span>):</span><br><span class="line">    imagePath = picpath.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>] <span class="comment">#文件名称</span></span><br><span class="line">    outputPath = imagePath +<span class="string">&quot;.webp&quot;</span><span class="comment">#输出文件名称</span></span><br><span class="line">    im = Image.<span class="built_in">open</span>(picpath) <span class="comment">#读入文件</span></span><br><span class="line">    im.save(outputPath) <span class="comment">#保存</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> dirpath,dirname,dirfiles <span class="keyword">in</span> os.walk(<span class="string">&quot;./&quot;</span>,topdown=<span class="literal">False</span>):</span><br><span class="line">    <span class="keyword">for</span> dirfile <span class="keyword">in</span> dirfiles:</span><br><span class="line">        <span class="keyword">if</span> dirfile.split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>] <span class="keyword">in</span> [<span class="string">&quot;png&quot;</span>,<span class="string">&quot;jpeg&quot;</span>,<span class="string">&quot;jpg&quot;</span>]:</span><br><span class="line">            pic_webp(dirfile)</span><br></pre></td></tr></table></figure>

<h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>如果你没有安装Pillow，请先安装Pillow。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install Pillow </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>图片处理</tag>
      </tags>
  </entry>
  <entry>
    <title>PL/SQL编程详解</title>
    <url>/2023/09/13/SQL/</url>
    <content><![CDATA[<h3 id="1-1-基本结构"><a href="#1-1-基本结构" class="headerlink" title="1.1 基本结构"></a>1.1 基本结构</h3><p>PL&#x2F;SQL程序由三个块组成，即声明部分、执行部分、异常处理部分。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DECLARE </span><br><span class="line">   --声明部分: 在此声明PL/SQL用到的变量,类型及游标，以及局部的存储过程和函数</span><br><span class="line">BEGIN</span><br><span class="line">   -- 执行部分:  过程及SQL 语句  , 即程序的主要部分</span><br><span class="line">EXCEPTION</span><br><span class="line">   -- 执行异常部分: 错误处理</span><br><span class="line">END;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-命名规则"><a href="#1-2-命名规则" class="headerlink" title="1.2 命名规则"></a>1.2 命名规则</h3><table>
<thead>
<tr>
<th align="left">标识符</th>
<th align="left">命名规则</th>
<th align="left">例子</th>
</tr>
</thead>
<tbody><tr>
<td align="left">程序变量</td>
<td align="left">V_Name</td>
<td align="left">V_Date</td>
</tr>
<tr>
<td align="left">程序常量</td>
<td align="left">C_Name</td>
<td align="left">C_Server</td>
</tr>
<tr>
<td align="left">游标变量</td>
<td align="left">Cursor_Name</td>
<td align="left">Cursor_Emp</td>
</tr>
<tr>
<td align="left">异常标识</td>
<td align="left">E_Name</td>
<td align="left">E_Dep</td>
</tr>
<tr>
<td align="left">表类型</td>
<td align="left">Name_table_type</td>
<td align="left">Emp_record_type</td>
</tr>
<tr>
<td align="left">表</td>
<td align="left">Name_Table</td>
<td align="left">Dep_</td>
</tr>
<tr>
<td align="left">记录类型</td>
<td align="left">Name_Record</td>
<td align="left">Dep_record</td>
</tr>
<tr>
<td align="left">SQL*PLUS代替变量</td>
<td align="left">P_Name</td>
<td align="left">P_Num</td>
</tr>
<tr>
<td align="left">绑定变量</td>
<td align="left">G_Name</td>
<td align="left">G_Day</td>
</tr>
</tbody></table>
<h3 id="1-3-记录类型"><a href="#1-3-记录类型" class="headerlink" title="1.3 记录类型"></a>1.3 记录类型</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TYPE record_name IS RECORD(</span><br><span class="line">   v1 data_type1  [NOT NULL]  [:= default_value ],</span><br><span class="line">   v2 data_type2  [NOT NULL]  [:= default_value ],</span><br><span class="line">   ......</span><br><span class="line">   vn data_typen  [NOT NULL]  [:= default_value ] );</span><br></pre></td></tr></table></figure>

<p>范例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DECLARE</span><br><span class="line"> --定义与hr.employees表中的这几个列相同的记录数据类型</span><br><span class="line">   TYPE RECOAR_TYPE_EMPLOYEES IS RECORD(</span><br><span class="line">      f_name   hr.employees.first_name%TYPE,</span><br><span class="line">      h_date   hr.employees.hire_date%TYPE,</span><br><span class="line">      j_id     hr.employees.job_id%TYPE</span><br><span class="line">   );</span><br><span class="line">   --声明一个该记录数据类型的记录变量</span><br><span class="line">   v_emp_record RECOAR_TYPE_EMPLOYEES；</span><br><span class="line"></span><br><span class="line">BEGIN</span><br><span class="line">   SELECT first_name,hire_date,job_id INTO v_emp_record</span><br><span class="line">   FROM employees</span><br><span class="line">   WHERE employees.id = &amp;emp_id</span><br><span class="line"></span><br><span class="line">   DBMS_OUTPUT.PUT_LINE(&#x27;雇员名称：&#x27;||v_emp_record.f_name</span><br><span class="line">             ||&#x27;  雇佣日期：&#x27;||v_emp_record.h_date</span><br><span class="line">             ||&#x27;  岗位：&#x27;||v_emp_record.j_id);</span><br><span class="line">END;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-数组类型"><a href="#1-4-数组类型" class="headerlink" title="1.4 数组类型"></a>1.4 数组类型</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TYPE array_name IS VARRAY(size) OF element_type [NOT NULL];</span><br></pre></td></tr></table></figure>

<p>范例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   <span class="comment">--定义一个最多保存5个VARCHAR(25)的数据类型成员的VARRAY数据类型</span></span><br><span class="line">   TYPE reg_varray_type <span class="keyword">IS</span> VARRAY(<span class="number">5</span>) <span class="keyword">OF</span> <span class="type">VARCHAR</span>(<span class="number">25</span>);</span><br><span class="line">   <span class="comment">--声明一个该VARRAY的数据类型的变量</span></span><br><span class="line">   v_reg_varray_type REG_VARRAY_TYPE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="comment">--使用构造函数初始化变量的值</span></span><br><span class="line">   v_reg_varray :<span class="operator">=</span> reg_varray_type(<span class="string">&#x27;中国&#x27;</span>,<span class="string">&#x27;美国&#x27;</span>,<span class="string">&#x27;英国&#x27;</span>,<span class="string">&#x27;德国&#x27;</span>,<span class="string">&#x27;法国&#x27;</span>);</span><br><span class="line">   DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;地区名称：&#x27;</span><span class="operator">||</span>v_reg_varray(<span class="number">1</span>)<span class="operator">||</span><span class="string">&#x27;、&#x27;</span></span><br><span class="line">                                    <span class="operator">||</span>v_reg_varray(<span class="number">2</span>)<span class="operator">||</span><span class="string">&#x27;、&#x27;</span></span><br><span class="line">                                    <span class="operator">||</span>v_reg_varray(<span class="number">3</span>)<span class="operator">||</span><span class="string">&#x27;、&#x27;</span></span><br><span class="line">                                    <span class="operator">||</span>v_reg_varray(<span class="number">4</span>));</span><br><span class="line">   DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;赋予初值NULL的第5个成员的值：&#x27;</span><span class="operator">||</span> v_reg_varray(<span class="number">5</span>)); </span><br><span class="line">   <span class="comment">--用构造函数语法赋予初值，再次对数组成员赋值</span></span><br><span class="line">   v_reg_varray(<span class="number">5</span>) :<span class="operator">=</span> <span class="string">&#x27;波兰&#x27;</span></span><br><span class="line">   DBMS_OUTPUT.PUTLINE(<span class="string">&#x27;第五个成员的值是：&#x27;</span> <span class="operator">||</span> v_reg_varray(<span class="number">5</span>));</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="1-5-TYPE"><a href="#1-5-TYPE" class="headerlink" title="1.5 %TYPE"></a>1.5 %TYPE</h3><p>使用%TYPE定义一个变量，其数据类型与已经定义的某个数据变量（尤其是表的某一列）的数据类型一直。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   v_empno emp.empno<span class="operator">%</span>TYPE :<span class="operator">=</span>$<span class="keyword">no</span>;</span><br><span class="line">   Type t_record <span class="keyword">is</span> record (</span><br><span class="line">      v_name   emp.ename<span class="operator">%</span>TYPE,</span><br><span class="line">      v_sal    emp.sal<span class="operator">%</span>TYPE,</span><br><span class="line">      v_date   emp.hiredate<span class="operator">%</span>TYPE</span><br><span class="line">   );</span><br><span class="line">   Rec t_record;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">SELECT</span> ename,sal,hiredate <span class="keyword">INTO</span> Rec</span><br><span class="line">   <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> empno <span class="operator">=</span> v_empno;</span><br><span class="line">   DBMS_PUTOUT.PUT_LINE(Rec.v_name<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>Rec.v_sal<span class="operator">||</span><span class="string">&#x27;--&#x27;</span><span class="operator">||</span>Rec.v_date)</span><br></pre></td></tr></table></figure>

<h3 id="1-6-ROWTYPE"><a href="#1-6-ROWTYPE" class="headerlink" title="1.6 %ROWTYPE"></a>1.6 %ROWTYPE</h3><p>使用%ROWTYPE操作符，返回一个记录类型，其数据类型和数据库表的数据结构一致。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DEcLARE</span></span><br><span class="line">   v_empno emp.empno<span class="operator">%</span>TYPE;</span><br><span class="line">   rec emp<span class="operator">%</span>ROWTYPE;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">INTO</span> rec</span><br><span class="line">   <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> emp,empno <span class="operator">=</span> v_empno;</span><br><span class="line">   DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;姓名:&#x27;</span><span class="operator">||</span>rec.ename<span class="operator">||</span><span class="string">&#x27;工资:&#x27;</span><span class="operator">||</span>rec.sal<span class="operator">||</span><span class="string">&#x27;工作时间:&#x27;</span><span class="operator">||</span>rec.hiredate);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="1-7-TABLE"><a href="#1-7-TABLE" class="headerlink" title="1.7 TABLE"></a>1.7 TABLE</h3><p>使用TABLE定义记录表数据类型。它与记录类型相似，但他可以处理多行记录，类似于二位数组来模仿数据库中的表。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">TYPE tabel_name <span class="keyword">IS</span> <span class="keyword">TABLE</span> <span class="keyword">OF</span> element_type [<span class="keyword">NOT</span> <span class="keyword">NULL</span>]</span><br><span class="line">INDEX <span class="keyword">BY</span> [BINARY_INTEGER <span class="operator">|</span> PLS_INTEGER <span class="operator">|</span> VARRAY2];</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">EXISTS(n)</td>
<td align="left">如果集合的第n个成员存在，则返回true</td>
</tr>
<tr>
<td align="left">COUNT</td>
<td align="left">返回已经分配了储存空间即已经赋值了的成员数量</td>
</tr>
<tr>
<td align="left">FIRST&#x2F;LAST</td>
<td align="left">FRIST:返回成员最低下标值；LAST :返回成员的最高下标值</td>
</tr>
<tr>
<td align="left">PRIOR(n)</td>
<td align="left">返回下标为n的成员的前一个成员的下标，如果没有则返回NULL</td>
</tr>
<tr>
<td align="left">NEXT(n)</td>
<td align="left">返回下标为n的成员的后一个成员的下标，如果没有则返回NULL</td>
</tr>
<tr>
<td align="left">TRIM[(n)]</td>
<td align="left">TRIM:删除末尾一个成员;TRIM(n):删除末尾n个成员</td>
</tr>
<tr>
<td align="left">DELETE[(n)]</td>
<td align="left">DELETE:删除所有成员；DELETE(n):删除第n个成员;DELETE(m,n):删除从m到n的成员</td>
</tr>
<tr>
<td align="left">EXTEND</td>
<td align="left">EXTEND:添加一个null成员;EXTEND(n);添加n个null成员;EXTEND(n,i):添加n个成员，其值与第i个成员相同</td>
</tr>
<tr>
<td align="left">LIMIT</td>
<td align="left">返回在varray类型变量中出现的最高下标值</td>
</tr>
</tbody></table>
<p>范例如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   TYPE dept_table_type <span class="keyword">IS</span> <span class="keyword">TABLE</span> <span class="keyword">OF</span></span><br><span class="line">      dept<span class="operator">%</span>TYPE INDEX <span class="keyword">BY</span> BINARY_INTEGER;</span><br><span class="line">   my_dname_table dept_table_type;</span><br><span class="line">   v_count NUMBER(<span class="number">2</span>) :<span class="operator">=</span><span class="number">4</span>;</span><br><span class="line">   v_i NUMBER(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line">   <span class="keyword">FOR</span> i <span class="keyword">in</span> <span class="number">1</span> .. v_count LOOP</span><br><span class="line">      <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">INTO</span> my_dname_table(i) </span><br><span class="line">      <span class="keyword">FROM</span> dept <span class="keyword">WHERE</span> deptno <span class="operator">=</span> i ;</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">FOR</span> <span class="type">int</span> <span class="keyword">in</span> my_dname_table.FIRST .. my_dname_table.LAST LOOP</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;Department number: &#x27;</span><span class="operator">||</span>my_dname_table(<span class="type">int</span>).deptno);</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;Department name: &#x27;</span><span class="operator">||</span> my_dname_table(<span class="type">int</span>).dname);</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="1-8-运算符"><a href="#1-8-运算符" class="headerlink" title="1.8 运算符"></a>1.8 运算符</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 变量赋值</span></span><br><span class="line">variable :<span class="operator">=</span> expression;</span><br><span class="line"><span class="comment">-- 空值加数字仍是空值</span></span><br><span class="line"><span class="keyword">NULL</span> <span class="operator">+</span> <span class="operator">&lt;</span>数字<span class="operator">&gt;</span> <span class="operator">=</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="comment">-- 空值（连接）字符，结果为字符</span></span><br><span class="line"><span class="keyword">NULL</span> <span class="operator">||</span> <span class="operator">&lt;</span>STR<span class="operator">&gt;</span> <span class="operator">=</span> <span class="operator">&lt;</span>STR<span class="operator">&gt;</span>;</span><br><span class="line"><span class="comment">-- CHAR 转化为NUMBER</span></span><br><span class="line">v_total :<span class="operator">=</span> TO_NUMBER(<span class="string">&#x27;100.00&#x27;</span>) <span class="operator">+</span> sal;</span><br><span class="line"><span class="comment">-- NUMBER转化为CHAR</span></span><br><span class="line">v_comm :<span class="operator">=</span> TO_CHAR(<span class="string">&#x27;123.45&#x27;</span>) <span class="operator">||</span> <span class="string">&#x27;元&#x27;</span>；</span><br><span class="line"><span class="comment">-- 字符转换为日期</span></span><br><span class="line">v_date :<span class="operator">=</span> TO_DATE(<span class="string">&#x27;2023.07.03&#x27;</span>,<span class="string">&#x27;yyyy.mm.dd&#x27;</span>);</span><br><span class="line"><span class="comment">-- 日期转换为字符</span></span><br><span class="line">v_to_day :<span class="operator">=</span> TO_CHAR(SYSDATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) ;</span><br></pre></td></tr></table></figure>

<h3 id="1-9-注释"><a href="#1-9-注释" class="headerlink" title="1.9 注释"></a>1.9 注释</h3><ul>
<li>使用双 ‘-‘ ( 减号) 加注释</li>
<li>使用 &#x2F;* *&#x2F; 来加一行或多行注释</li>
</ul>
<h3 id="2-0-条件语句IF"><a href="#2-0-条件语句IF" class="headerlink" title="2.0 条件语句IF"></a>2.0 条件语句IF</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">IF <span class="operator">&lt;</span>布尔表达式<span class="operator">&gt;</span> <span class="keyword">THEN</span></span><br><span class="line">  PL<span class="operator">/</span><span class="keyword">SQL</span> 和 <span class="keyword">SQL</span>语句</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="comment">-----------------------</span></span><br><span class="line">IF <span class="operator">&lt;</span>布尔表达式<span class="operator">&gt;</span> <span class="keyword">THEN</span></span><br><span class="line">  PL<span class="operator">/</span><span class="keyword">SQL</span> 和 <span class="keyword">SQL</span>语句</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line">  其它语句</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="comment">-----------------------</span></span><br><span class="line">IF <span class="operator">&lt;</span>布尔表达式<span class="operator">&gt;</span> <span class="keyword">THEN</span></span><br><span class="line">  PL<span class="operator">/</span><span class="keyword">SQL</span> 和 <span class="keyword">SQL</span>语句</span><br><span class="line">ELSIF <span class="operator">&lt;</span> 其它布尔表达式<span class="operator">&gt;</span> <span class="keyword">THEN</span></span><br><span class="line">  其它语句</span><br><span class="line">ELSIF <span class="operator">&lt;</span> 其它布尔表达式<span class="operator">&gt;</span> <span class="keyword">THEN</span></span><br><span class="line">  其它语句</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line">  其它语句</span><br><span class="line"><span class="keyword">END</span> IF;</span><br></pre></td></tr></table></figure>

<p>范例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    v_empno  employees.employee_id<span class="operator">%</span>TYPE :<span class="operator">=</span><span class="operator">&amp;</span>empno;</span><br><span class="line">    V_salary employees.salary<span class="operator">%</span>TYPE;</span><br><span class="line">    V_comment VARCHAR2(<span class="number">35</span>);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">SELECT</span> salary <span class="keyword">INTO</span> v_salary <span class="keyword">FROM</span> employees </span><br><span class="line">   <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> v_empno;</span><br><span class="line">   IF v_salary <span class="operator">&lt;</span> <span class="number">1500</span> <span class="keyword">THEN</span></span><br><span class="line">       V_comment:<span class="operator">=</span> <span class="string">&#x27;太少了,加点吧~!&#x27;</span>;</span><br><span class="line">   ELSIF v_salary <span class="operator">&lt;</span><span class="number">3000</span> <span class="keyword">THEN</span></span><br><span class="line">      V_comment:<span class="operator">=</span> <span class="string">&#x27;多了点,少点吧~!&#x27;</span>;</span><br><span class="line">   <span class="keyword">ELSE</span></span><br><span class="line">      V_comment:<span class="operator">=</span> <span class="string">&#x27;没有薪水~!&#x27;</span>;</span><br><span class="line">   <span class="keyword">END</span> IF;</span><br><span class="line">   DBMS_OUTPUT.PUT_LINE(V_comment);</span><br><span class="line">   exception</span><br><span class="line">     <span class="keyword">when</span> no_data_found <span class="keyword">then</span></span><br><span class="line">        DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;没有数据~!&#x27;</span>);</span><br><span class="line">     <span class="keyword">when</span> others <span class="keyword">then</span></span><br><span class="line">        DBMS_OUTPUT.PUT_LINE(sqlcode <span class="operator">||</span> <span class="string">&#x27;---&#x27;</span> <span class="operator">||</span> sqlerrm);        </span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-1-条件语句CASE"><a href="#2-1-条件语句CASE" class="headerlink" title="2.1 条件语句CASE"></a>2.1 条件语句CASE</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CASE</span> 条件表达式</span><br><span class="line">  <span class="keyword">WHEN</span> 条件表达式结果<span class="number">1</span> <span class="keyword">THEN</span> </span><br><span class="line">     语句段<span class="number">1</span></span><br><span class="line">  <span class="keyword">WHEN</span> 条件表达式结果<span class="number">2</span> <span class="keyword">THEN</span></span><br><span class="line">     语句段<span class="number">2</span></span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">WHEN</span> 条件表达式结果n <span class="keyword">THEN</span></span><br><span class="line">     语句段n</span><br><span class="line">  [<span class="keyword">ELSE</span> 条件表达式结果]</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CASE</span> </span><br><span class="line">  <span class="keyword">WHEN</span> 条件表达式<span class="number">1</span> <span class="keyword">THEN</span></span><br><span class="line">     语句段<span class="number">1</span></span><br><span class="line">  <span class="keyword">WHEN</span> 条件表达式<span class="number">2</span> <span class="keyword">THEN</span></span><br><span class="line">     语句段<span class="number">2</span></span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">WHEN</span> 条件表达式n <span class="keyword">THEN</span> </span><br><span class="line">     语句段n</span><br><span class="line">  [<span class="keyword">ELSE</span> 语句段]</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<p>范例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">  V_grade <span class="type">char</span>(<span class="number">1</span>) :<span class="operator">=</span> <span class="built_in">UPPER</span>(<span class="string">&#x27;&amp;p_grade&#x27;</span>);</span><br><span class="line">  V_appraisal VARCHAR2(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  V_appraisal :<span class="operator">=</span></span><br><span class="line">  <span class="keyword">CASE</span> v_grade</span><br><span class="line">    <span class="keyword">WHEN</span> <span class="string">&#x27;A&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;Excellent&#x27;</span></span><br><span class="line">    <span class="keyword">WHEN</span> <span class="string">&#x27;B&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;Very Good&#x27;</span></span><br><span class="line">    <span class="keyword">WHEN</span> <span class="string">&#x27;C&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;Good&#x27;</span></span><br><span class="line">    <span class="keyword">ELSE</span> <span class="string">&#x27;No such grade&#x27;</span></span><br><span class="line">  <span class="keyword">END</span>;</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;Grade:&#x27;</span><span class="operator">||</span>v_grade<span class="operator">||</span><span class="string">&#x27;  Appraisal: &#x27;</span><span class="operator">||</span> v_appraisal);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   v_first_name employees.first_name<span class="operator">%</span>TYPE;</span><br><span class="line">   v_job_id employees.job_id<span class="operator">%</span>TYPE;</span><br><span class="line">   v_salary employees.salary<span class="operator">%</span>TYPE;</span><br><span class="line">   v_sal_raise NUMBER(<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">SELECT</span> first_name,   job_id,   salary <span class="keyword">INTO</span></span><br><span class="line">          v_first_name, v_job_id, v_salary</span><br><span class="line">   <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="operator">&amp;</span>emp_id;</span><br><span class="line">   <span class="keyword">CASE</span></span><br><span class="line">      <span class="keyword">WHEN</span> v_job_id <span class="operator">=</span> <span class="string">&#x27;PU_CLERK&#x27;</span> <span class="keyword">THEN</span></span><br><span class="line">         IF v_salary <span class="operator">&lt;</span> <span class="number">3000</span> <span class="keyword">THEN</span> v_sal_raise :<span class="operator">=</span> <span class="number">.08</span>;</span><br><span class="line">         <span class="keyword">ELSE</span> v_sal_raise :<span class="operator">=</span> <span class="number">.07</span>;</span><br><span class="line">         <span class="keyword">END</span> IF;</span><br><span class="line">      <span class="keyword">WHEN</span> v_job_id <span class="operator">=</span> <span class="string">&#x27;SH_CLERK&#x27;</span> <span class="keyword">THEN</span></span><br><span class="line">         IF v_salary <span class="operator">&lt;</span> <span class="number">4000</span> <span class="keyword">THEN</span> v_sal_raise :<span class="operator">=</span> <span class="number">.06</span>;</span><br><span class="line">         <span class="keyword">ELSE</span> v_sal_raise :<span class="operator">=</span> <span class="number">.05</span>;</span><br><span class="line">         <span class="keyword">END</span> IF;</span><br><span class="line">      <span class="keyword">WHEN</span> v_job_id <span class="operator">=</span> <span class="string">&#x27;ST_CLERK&#x27;</span> <span class="keyword">THEN</span></span><br><span class="line">         IF v_salary <span class="operator">&lt;</span> <span class="number">3500</span> <span class="keyword">THEN</span> v_sal_raise :<span class="operator">=</span> <span class="number">.04</span>;</span><br><span class="line">         <span class="keyword">ELSE</span> v_sal_raise :<span class="operator">=</span> <span class="number">.03</span>;</span><br><span class="line">         <span class="keyword">END</span> IF;</span><br><span class="line">      <span class="keyword">ELSE</span></span><br><span class="line">         DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;该岗位不涨工资: &#x27;</span><span class="operator">||</span>v_job_id);</span><br><span class="line">   <span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line">   DBMS_OUTPUT.PUT_LINE(v_first_name<span class="operator">||</span><span class="string">&#x27;的岗位是&#x27;</span><span class="operator">||</span>v_job_id</span><br><span class="line">                                    <span class="operator">||</span><span class="string">&#x27;、的工资是&#x27;</span><span class="operator">||</span>v_salary</span><br><span class="line">                                    <span class="operator">||</span><span class="string">&#x27;、工资涨幅是&#x27;</span><span class="operator">||</span>v_sal_raise);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-循环语句LOOP"><a href="#2-2-循环语句LOOP" class="headerlink" title="2.2 循环语句LOOP"></a>2.2 循环语句LOOP</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">LOOP</span><br><span class="line">   要执行的语句;</span><br><span class="line">   EXIT <span class="keyword">WHEN</span> <span class="operator">&lt;</span>条件语句<span class="operator">&gt;</span> <span class="comment">--条件满足，退出循环语句</span></span><br><span class="line"><span class="keyword">END</span> LOOP;</span><br></pre></td></tr></table></figure>

<p>范例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    <span class="type">int</span> NUMBER(<span class="number">2</span>) :<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   LOOP</span><br><span class="line">      <span class="type">int</span> :<span class="operator">=</span> <span class="type">int</span> <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;int 的当前值为:&#x27;</span><span class="operator">||</span><span class="type">int</span>);</span><br><span class="line">      EXIT <span class="keyword">WHEN</span> <span class="type">int</span> <span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-循环语句While"><a href="#2-3-循环语句While" class="headerlink" title="2.3 循环语句While"></a>2.3 循环语句While</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">WHILE <span class="operator">&lt;</span>布尔表达式<span class="operator">&gt;</span> LOOP</span><br><span class="line">    要执行的语句;</span><br><span class="line"><span class="keyword">END</span> LOOP;</span><br></pre></td></tr></table></figure>

<p>范例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> </span><br><span class="line">  x NUMBER :<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   WHILE x<span class="operator">&lt;=</span><span class="number">10</span> LOOP</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;X的当前值为:&#x27;</span><span class="operator">||</span>x);</span><br><span class="line">       x:<span class="operator">=</span> x<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-循环语句For"><a href="#2-4-循环语句For" class="headerlink" title="2.4 循环语句For"></a>2.4 循环语句For</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[<span class="operator">&lt;&lt;</span>循环标签<span class="operator">&gt;&gt;</span>]</span><br><span class="line"><span class="keyword">FOR</span> 循环计数器 <span class="keyword">IN</span> [ REVERSE ] 下限 .. 上限 LOOP</span><br><span class="line">  要执行的语句;</span><br><span class="line"><span class="keyword">END</span> LOOP [循环标签];</span><br></pre></td></tr></table></figure>

<p>范例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    V_counter NUMBER :<span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> temp_table(num_col) <span class="keyword">VALUES</span> (v_counter );</span><br><span class="line">   <span class="keyword">FOR</span> v_counter <span class="keyword">IN</span> <span class="number">20</span> .. <span class="number">25</span> LOOP</span><br><span class="line">      <span class="keyword">INSERT</span> <span class="keyword">INTO</span> temp_table (num_col ) <span class="keyword">VALUES</span> ( v_counter );</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> temp_table(num_col) <span class="keyword">VALUES</span> (v_counter );</span><br><span class="line">   <span class="comment">--REVERSE 倒序遍历</span></span><br><span class="line">   <span class="keyword">FOR</span> v_counter <span class="keyword">IN</span> REVERSE <span class="number">20</span> .. <span class="number">25</span> LOOP</span><br><span class="line">      <span class="keyword">INSERT</span> <span class="keyword">INTO</span> temp_table (num_col ) <span class="keyword">VALUES</span> ( v_counter );</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="keyword">END</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> temp_table;</span><br></pre></td></tr></table></figure>

<h3 id="3-1-显式游标"><a href="#3-1-显式游标" class="headerlink" title="3.1 显式游标"></a>3.1 显式游标</h3><p>显式游标处理需四个 PL&#x2F;SQL步骤：</p>
<p>定义&#x2F;声明游标：就是定义一个游标名，以及与其相对应的SELECT 语句<br>打开游标：就是执行游标所对应的SELECT 语句，将其查询结果放入工作区，并且指针指向工作区的首部，标识游标结果集合。如果游标查询语句中带有FOR UPDATE选项，OPEN 语句还将锁定数据库表中游标结果集合对应的数据行<br>提取游标数据：就是检索结果集合中的数据行，放入指定的输出变量中<br>关闭游标：当提取和处理完游标结果集合数据后，应及时关闭游标，以释放该游标所占用的系统资源，并使该游标的工作区变成无效，不能再使用FETCH 语句取其中数据。关闭后的游标可以使用OPEN 语句重新打开。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- define cursor</span></span><br><span class="line"><span class="keyword">CURSOR</span> cursor_name[(<span class="keyword">parameter</span>[, <span class="keyword">parameter</span>]…)] </span><br><span class="line">    [<span class="keyword">RETURN</span> datatype]</span><br><span class="line"><span class="keyword">IS</span> </span><br><span class="line">    select_statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- open cursor</span></span><br><span class="line"><span class="keyword">OPEN</span> cursor_name[([<span class="keyword">parameter</span> <span class="operator">=</span><span class="operator">&gt;</span>] <span class="keyword">value</span>[, [<span class="keyword">parameter</span> <span class="operator">=</span><span class="operator">&gt;</span>] <span class="keyword">value</span>]…)];</span><br><span class="line"></span><br><span class="line"><span class="comment">-- fetch cursor</span></span><br><span class="line"><span class="keyword">FETCH</span> cursor_name <span class="keyword">INTO</span> &#123;variable_list <span class="operator">|</span> record_variable &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">--close cursor</span></span><br><span class="line"><span class="keyword">CLOSE</span> cursor_name;</span><br></pre></td></tr></table></figure>

<p>范例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--ex1</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   <span class="keyword">CURSOR</span> c_cursor </span><br><span class="line">   <span class="keyword">IS</span> <span class="keyword">SELECT</span> first_name <span class="operator">||</span> last_name, Salary </span><br><span class="line">   <span class="keyword">FROM</span> EMPLOYEES </span><br><span class="line">   <span class="keyword">WHERE</span> rownum<span class="operator">&lt;</span><span class="number">11</span>;   </span><br><span class="line">   v_ename  EMPLOYEES.first_name<span class="operator">%</span>TYPE;</span><br><span class="line">   v_sa<span class="operator">-</span>   EMPLOYEES.Salary<span class="operator">%</span>TYPE;   </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">OPEN</span> c_cursor;</span><br><span class="line">  <span class="keyword">FETCH</span> c_cursor <span class="keyword">INTO</span> v_ename, v_sal;</span><br><span class="line">  WHILE c_cursor<span class="operator">%</span>FOUND LOOP</span><br><span class="line">     DBMS_OUTPUT.PUT_LINE(v_ename<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>to_char(v_sal) );</span><br><span class="line">     <span class="keyword">FETCH</span> c_cursor <span class="keyword">INTO</span> v_ename, v_sal;</span><br><span class="line">  <span class="keyword">END</span> LOOP;</span><br><span class="line">  <span class="keyword">CLOSE</span> c_cursor;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ex2</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">  DeptRec    DEPARTMENTS<span class="operator">%</span>ROWTYPE;</span><br><span class="line">  Dept_name  DEPARTMENTS.DEPARTMENT_NAME<span class="operator">%</span>TYPE;</span><br><span class="line">  Dept_loc   DEPARTMENTS.LOCATION_ID<span class="operator">%</span>TYPE;</span><br><span class="line">  <span class="keyword">CURSOR</span> c1 <span class="keyword">IS</span> </span><br><span class="line">   <span class="keyword">SELECT</span> DEPARTMENT_NAME, LOCATION_ID </span><br><span class="line">   <span class="keyword">FROM</span> DEPARTMENTS <span class="keyword">WHERE</span> DEPARTMENT_ID <span class="operator">&lt;=</span> <span class="number">30</span>;</span><br><span class="line">  <span class="keyword">CURSOR</span> c2(dept_no NUMBER <span class="keyword">DEFAULT</span> <span class="number">10</span>) <span class="keyword">IS</span></span><br><span class="line">    <span class="keyword">SELECT</span> DEPARTMENT_NAME, LOCATION_ID <span class="keyword">FROM</span> DEPARTMENTS </span><br><span class="line">    <span class="keyword">WHERE</span> DEPARTMENT_ID <span class="operator">&lt;=</span> dept_no;</span><br><span class="line">  <span class="keyword">CURSOR</span> c3(dept_no NUMBER <span class="keyword">DEFAULT</span> <span class="number">10</span>) <span class="keyword">IS</span> </span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> DEPARTMENTS </span><br><span class="line">    <span class="keyword">WHERE</span> DEPARTMENTS.DEPARTMENT_ID <span class="operator">&lt;=</span>dept_no;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="comment">--打开游标c1</span></span><br><span class="line">  <span class="keyword">OPEN</span> c1;</span><br><span class="line">  <span class="comment">--开始循环，这里是为了循环游标c1里的所有列</span></span><br><span class="line">  LOOP</span><br><span class="line">    <span class="comment">--提取游标c1的成员的值放入变量dept_name和dept_loc中</span></span><br><span class="line">    <span class="keyword">FETCH</span> c1 <span class="keyword">INTO</span> dept_name, dept_loc;</span><br><span class="line">    <span class="comment">--判断最近一次FETCT的c1是否存在，不存咋退出，结束循环。</span></span><br><span class="line">    EXIT <span class="keyword">WHEN</span> c1<span class="operator">%</span>NOTFOUND;</span><br><span class="line">        DBMS_OUTPUT.PUT_LINE(dept_name<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>dept_loc);</span><br><span class="line">    <span class="keyword">END</span> LOOP;</span><br><span class="line">    <span class="comment">--关闭游标</span></span><br><span class="line">    <span class="keyword">CLOSE</span> c1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">OPEN</span> c2;</span><br><span class="line">    LOOP</span><br><span class="line">        <span class="keyword">FETCH</span> c2 <span class="keyword">INTO</span> dept_name, dept_loc;</span><br><span class="line">        EXIT <span class="keyword">WHEN</span> c2<span class="operator">%</span>NOTFOUND;</span><br><span class="line">        DBMS_OUTPUT.PUT_LINE(dept_name<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>dept_loc);</span><br><span class="line">    <span class="keyword">END</span> LOOP;</span><br><span class="line">    <span class="keyword">CLOSE</span> c2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">--游标c3可设置自定义变量，来控制游标的值</span></span><br><span class="line">    <span class="keyword">OPEN</span> c3(dept_no <span class="operator">=</span><span class="operator">&gt;</span><span class="number">20</span>);</span><br><span class="line">    LOOP</span><br><span class="line">        <span class="keyword">FETCH</span> c3 <span class="keyword">INTO</span> deptrec;</span><br><span class="line">        EXIT <span class="keyword">WHEN</span> c3<span class="operator">%</span>NOTFOUND;</span><br><span class="line">        DBMS_OUTPUT.PUT_LINE(deptrec.DEPARTMENT_ID<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>deptrec.DEPARTMENT_NAME<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>deptrec.LOCATION_ID);</span><br><span class="line">    <span class="keyword">END</span> LOOP;</span><br><span class="line">    <span class="keyword">CLOSE</span> c3;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-游标属性"><a href="#3-2-游标属性" class="headerlink" title="3.2 游标属性"></a>3.2 游标属性</h3><ul>
<li><strong>Cursor_name%FOUND</strong> ：布尔型属性，当最近一次提取游标操作FETCH成功则为 TRUE,否则为FALSE</li>
<li><strong>Cursor_name%NOTFOUND</strong> ：布尔型属性，与%FOUND相反</li>
<li><strong>Cursor_name%ISOPEN</strong> ：布尔型属性，当游标已打开时返回 TRUE</li>
<li><strong>Cursor_name%ROWCOUNT</strong> ：数字型属性，返回已从游标中读取的记录数</li>
</ul>
<p>范例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 给工资低于1200 的员工增加工资50</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   v_empno  EMPLOYEES.EMPLOYEE_ID<span class="operator">%</span>TYPE;</span><br><span class="line">   v_sal    EMPLOYEES.Salary<span class="operator">%</span>TYPE;</span><br><span class="line">   <span class="keyword">CURSOR</span> c_cursor <span class="keyword">IS</span> <span class="keyword">SELECT</span> EMPLOYEE_ID, Salary <span class="keyword">FROM</span> EMPLOYEES; </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">OPEN</span> c_cursor;</span><br><span class="line">   LOOP</span><br><span class="line">      <span class="keyword">FETCH</span> c_cursor <span class="keyword">INTO</span> v_empno, v_sal;</span><br><span class="line">      EXIT <span class="keyword">WHEN</span> c_cursor<span class="operator">%</span>NOTFOUND; </span><br><span class="line">      IF v_sal<span class="operator">&lt;=</span><span class="number">1200</span> <span class="keyword">THEN</span></span><br><span class="line">            <span class="keyword">UPDATE</span> EMPLOYEES <span class="keyword">SET</span> Salary<span class="operator">=</span>Salary<span class="operator">+</span><span class="number">50</span> <span class="keyword">WHERE</span> EMPLOYEE_ID<span class="operator">=</span>v_empno;</span><br><span class="line">            DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;编码为&#x27;</span><span class="operator">||</span>v_empno<span class="operator">||</span><span class="string">&#x27;工资已更新!&#x27;</span>);</span><br><span class="line">      <span class="keyword">END</span> IF;</span><br><span class="line">   DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;记录数:&#x27;</span><span class="operator">||</span> c_cursor <span class="operator">%</span>ROWCOUNT);</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line">   <span class="keyword">CLOSE</span> c_cursor;</span><br><span class="line"><span class="keyword">END</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 没有参数且没有返回值的游标</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   v_f_name employees.first_name<span class="operator">%</span>TYPE;</span><br><span class="line">   v_j_id   employees.job_id<span class="operator">%</span>TYPE;</span><br><span class="line">   <span class="keyword">CURSOR</span> c1     <span class="comment">--声明游标,没有参数没有返回值</span></span><br><span class="line">   <span class="keyword">IS</span></span><br><span class="line">      <span class="keyword">SELECT</span> first_name, job_id </span><br><span class="line">      <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">OPEN</span> c1;        <span class="comment">--打开游标</span></span><br><span class="line">   LOOP</span><br><span class="line">      <span class="keyword">FETCH</span> c1 <span class="keyword">INTO</span> v_f_name, v_j_id;    <span class="comment">--提取游标</span></span><br><span class="line">      IF c1<span class="operator">%</span>FOUND <span class="keyword">THEN</span></span><br><span class="line">         DBMS_OUTPUT.PUT_LINE(v_f_name<span class="operator">||</span><span class="string">&#x27;的岗位是&#x27;</span><span class="operator">||</span>v_j_id);</span><br><span class="line">      <span class="keyword">ELSE</span></span><br><span class="line">         DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;已经处理完结果集了&#x27;</span>);</span><br><span class="line">         EXIT;</span><br><span class="line">      <span class="keyword">END</span> IF;</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line">   <span class="keyword">CLOSE</span> c1;   <span class="comment">--关闭游标</span></span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 有参数且没有返回值的游标</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   v_f_name employees.first_name<span class="operator">%</span>TYPE;</span><br><span class="line">   v_h_date employees.hire_date<span class="operator">%</span>TYPE;</span><br><span class="line">   <span class="keyword">CURSOR</span> c2(dept_id NUMBER, j_id VARCHAR2) <span class="comment">--声明游标,有参数没有返回值</span></span><br><span class="line">   <span class="keyword">IS</span></span><br><span class="line">      <span class="keyword">SELECT</span> first_name, hire_date <span class="keyword">FROM</span> employees</span><br><span class="line">      <span class="keyword">WHERE</span> department_id <span class="operator">=</span> dept_id <span class="keyword">AND</span> job_id <span class="operator">=</span> j_id;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">OPEN</span> c2(<span class="number">90</span>, <span class="string">&#x27;AD_VP&#x27;</span>);  <span class="comment">--打开游标,传递参数值</span></span><br><span class="line">   LOOP</span><br><span class="line">      <span class="keyword">FETCH</span> c2 <span class="keyword">INTO</span> v_f_name, v_h_date;    <span class="comment">--提取游标</span></span><br><span class="line">      IF c2<span class="operator">%</span>FOUND <span class="keyword">THEN</span></span><br><span class="line">         DBMS_OUTPUT.PUT_LINE(v_f_name<span class="operator">||</span><span class="string">&#x27;的雇佣日期是&#x27;</span><span class="operator">||</span>v_h_date);</span><br><span class="line">      <span class="keyword">ELSE</span></span><br><span class="line">         DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;已经处理完结果集了&#x27;</span>);</span><br><span class="line">         EXIT;</span><br><span class="line">      <span class="keyword">END</span> IF;</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line">   <span class="keyword">CLOSE</span> c2;   <span class="comment">--关闭游标</span></span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 有参数且有返回值的游标</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   TYPE emp_record_type <span class="keyword">IS</span> RECORD(</span><br><span class="line">        f_name   employees.first_name<span class="operator">%</span>TYPE,</span><br><span class="line">        h_date   employees.hire_date<span class="operator">%</span>TYPE);</span><br><span class="line">   v_emp_record EMP_RECORD_TYPE;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">CURSOR</span> c3(dept_id NUMBER, j_id VARCHAR2) <span class="comment">--声明游标,有参数有返回值</span></span><br><span class="line">          <span class="keyword">RETURN</span> EMP_RECORD_TYPE</span><br><span class="line">   <span class="keyword">IS</span></span><br><span class="line">      <span class="keyword">SELECT</span> first_name, hire_date <span class="keyword">FROM</span> employees</span><br><span class="line">      <span class="keyword">WHERE</span> department_id <span class="operator">=</span> dept_id <span class="keyword">AND</span> job_id <span class="operator">=</span> j_id;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">OPEN</span> c3(j_id <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;AD_VP&#x27;</span>, dept_id <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">90</span>);  <span class="comment">--打开游标,传递参数值</span></span><br><span class="line">   LOOP</span><br><span class="line">      <span class="keyword">FETCH</span> c3 <span class="keyword">INTO</span> v_emp_record;    <span class="comment">--提取游标</span></span><br><span class="line">      IF c3<span class="operator">%</span>FOUND <span class="keyword">THEN</span></span><br><span class="line">         DBMS_OUTPUT.PUT_LINE(v_emp_record.f_name<span class="operator">||</span><span class="string">&#x27;的雇佣日期是&#x27;</span></span><br><span class="line">                            <span class="operator">||</span>v_emp_record.h_date);</span><br><span class="line">      <span class="keyword">ELSE</span></span><br><span class="line">         DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;已经处理完结果集了&#x27;</span>);</span><br><span class="line">         EXIT;</span><br><span class="line">      <span class="keyword">END</span> IF;</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line">   <span class="keyword">CLOSE</span> c3;   <span class="comment">--关闭游标</span></span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 基于游标定义记录变量</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   <span class="keyword">CURSOR</span> c4(dept_id NUMBER, j_id VARCHAR2) <span class="comment">--声明游标,有参数没有返回值</span></span><br><span class="line">   <span class="keyword">IS</span></span><br><span class="line">      <span class="keyword">SELECT</span> first_name f_name, hire_date <span class="keyword">FROM</span> employees</span><br><span class="line">      <span class="keyword">WHERE</span> department_id <span class="operator">=</span> dept_id <span class="keyword">AND</span> job_id <span class="operator">=</span> j_id;</span><br><span class="line">    <span class="comment">--基于游标定义记录变量，比声明记录类型变量要方便，不容易出错</span></span><br><span class="line">    v_emp_record c4<span class="operator">%</span>ROWTYPE;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">OPEN</span> c4(<span class="number">90</span>, <span class="string">&#x27;AD_VP&#x27;</span>);  <span class="comment">--打开游标,传递参数值</span></span><br><span class="line">   LOOP</span><br><span class="line">      <span class="keyword">FETCH</span> c4 <span class="keyword">INTO</span> v_emp_record;    <span class="comment">--提取游标</span></span><br><span class="line">      IF c4<span class="operator">%</span>FOUND <span class="keyword">THEN</span></span><br><span class="line">         DBMS_OUTPUT.PUT_LINE(v_emp_record.f_name<span class="operator">||</span><span class="string">&#x27;的雇佣日期是&#x27;</span></span><br><span class="line">                            <span class="operator">||</span>v_emp_record.hire_date);</span><br><span class="line">      <span class="keyword">ELSE</span></span><br><span class="line">         DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;已经处理完结果集了&#x27;</span>);</span><br><span class="line">         EXIT;</span><br><span class="line">      <span class="keyword">END</span> IF;</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line">   <span class="keyword">CLOSE</span> c4;   <span class="comment">--关闭游标</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-游标FOR循环"><a href="#3-3-游标FOR循环" class="headerlink" title="3.3 游标FOR循环"></a>3.3 游标FOR循环</h3><p>游标FOR循环语句，自动执行游标的OPEN、FETCH、CLOSE语句和循环语句的功能；当进入循环时，游标FOR循环语句自动打开游标，并提取第一行游标数据，当程序处理完当前所提取的数据而进入下一次循环时，游标FOR循环语句自动提取下一行数据供程序处理，当提取完结果集合中的所有数据行后结束循环，并自动关闭游标。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FOR</span> index_variable <span class="keyword">IN</span> cursor_name[(<span class="keyword">value</span>[, <span class="keyword">value</span>]…)] LOOP</span><br><span class="line">    <span class="comment">-- 游标数据处理代码</span></span><br><span class="line"><span class="keyword">END</span> LOOP;</span><br></pre></td></tr></table></figure>
<p>index_variable为游标FOR 循环语句隐含声明的索引变量，该变量为记录变量，其结构与游标查询语句返回的结构集合的结构相同。在程序中可以通过引用该索引记录变量元素来读取所提取的游标数据，index_variable中各元素的名称与游标查询语句选择列表中所制定的列名相同。如果在游标查询语句的选择列表中存在计算列，则必须为这些计算列指定别名后才能通过游标FOR 循环语句中的索引变量来访问这些列数据。</p>
<p>范例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ex1</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   <span class="keyword">CURSOR</span> c_sal <span class="keyword">IS</span> </span><br><span class="line">      <span class="keyword">SELECT</span> employee_id, first_name <span class="operator">||</span> last_name ename, salary</span><br><span class="line">      <span class="keyword">FROM</span> employees ;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="comment">--隐含打开游标</span></span><br><span class="line">   <span class="keyword">FOR</span> v_sal <span class="keyword">IN</span> c_sal LOOP</span><br><span class="line">   <span class="comment">--隐含执行一个FETCH语句</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(to_char(v_sal.employee_id)<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span> v_sal.ename<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>to_char(v_sal.salary)) ;</span><br><span class="line">   <span class="comment">--隐含监测c_sal%NOTFOUND</span></span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="comment">--隐含关闭游标</span></span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ex2 当所声明的游标带有参数时，通过游标FOR 循环语句为游标传递参数</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">  <span class="keyword">CURSOR</span> c_cursor(dept_no NUMBER <span class="keyword">DEFAULT</span> <span class="number">10</span>) <span class="keyword">IS</span></span><br><span class="line">   <span class="keyword">SELECT</span> department_name, location_id </span><br><span class="line">   <span class="keyword">FROM</span> departments <span class="keyword">WHERE</span> department_id <span class="operator">&lt;=</span> dept_no;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;当dept_no参数值为30：&#x27;</span>);</span><br><span class="line">    <span class="keyword">FOR</span> c1_rec <span class="keyword">IN</span> c_cursor(<span class="number">30</span>) LOOP        </span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(c1_rec.department_name<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>c1_rec.location_id);</span><br><span class="line">    <span class="keyword">END</span> LOOP;</span><br><span class="line">    DBMS_OUTPUT.PUT_LINE(CHR(<span class="number">10</span>)<span class="operator">||</span><span class="string">&#x27;使用默认的dept_no参数值10：&#x27;</span>);</span><br><span class="line">    <span class="keyword">FOR</span> c1_rec <span class="keyword">IN</span> c_cursor LOOP        </span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(c1_rec.department_name<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>c1_rec.location_id);</span><br><span class="line">    <span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>不要在程序中对游标进行人工操作；不要在程序中定义用于控制FOR循环的记录</p>
</blockquote>
<h3 id="3-4-处理隐式游标"><a href="#3-4-处理隐式游标" class="headerlink" title="3.4 处理隐式游标"></a>3.4 处理隐式游标</h3><p>对于非查询语句，如修改、删除操作，则由ORACLE 系统自动地为这些操作设置游标并创建其工作区，这些由系统隐含创建的游标称为隐式游标，隐式游标的名字为SQL，这是由ORACLE 系统定义的。对于隐式游标的操作，如定义、打开、取值及关闭操作，都由ORACLE 系统自动地完成，无需用户进行处理。用户只能通过隐式游标的相关属性，来完成相应的操作。在隐式游标的工作区中，所存放的数据是与用户自定义的显示游标无关的、最新处理的一条SQL 语句所包含的数据。</p>
<p>格式调用为： <strong>SQL%</strong></p>
<p>范例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--  删除EMPLOYEES表中某部门的所有员工，如果该部门中已没有员工，则在DEPARTMENT表中删除该部门</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    V_deptno department_id<span class="operator">%</span>TYPE :<span class="operator">=</span> <span class="operator">&amp;</span>p_deptno;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DELETE</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> department_id<span class="operator">=</span>v_deptno;</span><br><span class="line">    IF <span class="keyword">SQL</span><span class="operator">%</span>NOTFOUND <span class="keyword">THEN</span></span><br><span class="line">        <span class="keyword">DELETE</span> <span class="keyword">FROM</span> departments <span class="keyword">WHERE</span> department_id<span class="operator">=</span>v_deptno;</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 通过隐式游标SQL的%ROWCOUNT属性来了解修改了多少行</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   v_rows NUMBER;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">--更新数据</span></span><br><span class="line">   <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary <span class="operator">=</span> <span class="number">30000</span></span><br><span class="line">   <span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">90</span> <span class="keyword">AND</span> job_id <span class="operator">=</span> <span class="string">&#x27;AD_VP&#x27;</span>;</span><br><span class="line"><span class="comment">--获取默认游标的属性值</span></span><br><span class="line">   v_rows :<span class="operator">=</span> <span class="keyword">SQL</span><span class="operator">%</span>ROWCOUNT;</span><br><span class="line">   DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;更新了&#x27;</span><span class="operator">||</span>v_rows<span class="operator">||</span><span class="string">&#x27;个雇员的工资&#x27;</span>);</span><br><span class="line"><span class="comment">--回退更新，以便使数据库的数据保持原样</span></span><br><span class="line">   <span class="keyword">ROLLBACK</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-5-NO-DATA-FOUND-和-NOTFOUND的区别"><a href="#3-5-NO-DATA-FOUND-和-NOTFOUND的区别" class="headerlink" title="3.5 NO_DATA_FOUND 和 %NOTFOUND的区别"></a>3.5 NO_DATA_FOUND 和 %NOTFOUND的区别</h3><ul>
<li>SELECT … INTO 语句触发 NO_DATA_FOUND；</li>
<li>当一个显式游标的WHERE子句未找到时触发%NOTFOUND；</li>
<li>当UPDATE或DELETE 语句的WHERE 子句未找到时触发 SQL%NOTFOUND；</li>
<li>在提取循环中要用 %NOTFOUND 或%FOUND来确定循环的退出条件，不要用 NO_DATA_FOUND</li>
</ul>
<h3 id="3-6-使用游标更新和删除数据"><a href="#3-6-使用游标更新和删除数据" class="headerlink" title="3.6 使用游标更新和删除数据"></a>3.6 使用游标更新和删除数据</h3><p>为了对正在处理(查询)的行不被另外的用户改动，ORACLE 提供一个 FOR UPDATE 子句来对所选择的行进行锁住。该需求迫使ORACLE锁定游标结果集合的行，可以防止其他事务处理更新或删除相同的行，直到您的事务处理提交或回退为止。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_list <span class="keyword">FROM</span> table_list <span class="keyword">FOR</span> <span class="keyword">UPDATE</span> [<span class="keyword">OF</span> <span class="keyword">column</span>[, <span class="keyword">column</span>]…] [NOWAIT]</span><br></pre></td></tr></table></figure>

<p>范例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 从EMPLOYEES表中查询某部门的员工情况，将其工资最低定为 1500；</span></span><br><span class="line"><span class="keyword">DECLARE</span> </span><br><span class="line">   V_deptno employees.department_id<span class="operator">%</span>TYPE :<span class="operator">=</span> <span class="operator">&amp;</span>p_deptno;</span><br><span class="line">   <span class="keyword">CURSOR</span> emp_cursor <span class="keyword">IS</span> </span><br><span class="line">      <span class="keyword">SELECT</span> employees.employee_id, employees.salary </span><br><span class="line">      <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employees.department_id<span class="operator">=</span>v_deptno</span><br><span class="line">      <span class="keyword">FOR</span> <span class="keyword">UPDATE</span> NOWAIT;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">FOR</span> emp_record <span class="keyword">IN</span> emp_cursor LOOP</span><br><span class="line">      IF emp_record.salary <span class="operator">&lt;</span> <span class="number">1500</span> <span class="keyword">THEN</span></span><br><span class="line">        <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary<span class="operator">=</span><span class="number">1500</span></span><br><span class="line">        <span class="keyword">WHERE</span> <span class="keyword">CURRENT</span> <span class="keyword">OF</span> emp_cursor;</span><br><span class="line">      <span class="keyword">END</span> IF;</span><br><span class="line">    <span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="comment">--    COMMIT;</span></span><br><span class="line"><span class="keyword">END</span>; </span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 将EMPLOYEES表中部门编码为90、岗位为AD_VP的雇员的工资都更新为2000元；</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   v_emp_record employees<span class="operator">%</span>ROWTYPE;</span><br><span class="line">   <span class="keyword">CURSOR</span> c1 <span class="keyword">IS</span></span><br><span class="line">      <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">OPEN</span> c1;</span><br><span class="line">   LOOP</span><br><span class="line">      <span class="keyword">FETCH</span> c1 <span class="keyword">INTO</span> v_emp_record;</span><br><span class="line">      EXIT <span class="keyword">WHEN</span> c1<span class="operator">%</span>NOTFOUND;</span><br><span class="line">      IF v_emp_record.department_id <span class="operator">=</span> <span class="number">90</span> <span class="keyword">AND</span></span><br><span class="line">         v_emp_record.job_id <span class="operator">=</span> <span class="string">&#x27;AD_VP&#x27;</span></span><br><span class="line">      <span class="keyword">THEN</span></span><br><span class="line">         <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary <span class="operator">=</span> <span class="number">20000</span></span><br><span class="line">         <span class="keyword">WHERE</span> <span class="keyword">CURRENT</span> <span class="keyword">OF</span> c1;  <span class="comment">--更新当前游标行对应的数据行</span></span><br><span class="line">      <span class="keyword">END</span> IF;</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line">   <span class="keyword">COMMIT</span>;   <span class="comment">--提交已经修改的数据</span></span><br><span class="line">   <span class="keyword">CLOSE</span> c1;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-7游标变量"><a href="#3-7游标变量" class="headerlink" title="3.7游标变量"></a>3.7游标变量</h3><p>游标变量操作也包括打开、提取和关闭三个步骤。<br>1． 打开游标变量<br>打开游标变量时使用的是OPEN…FOR 语句。格式为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">OPEN</span> &#123;cursor_variable_name <span class="operator">|</span> :host_cursor_variable_name&#125;</span><br><span class="line"><span class="keyword">FOR</span> select_statement;</span><br></pre></td></tr></table></figure>

<p><strong>cursor_variable_name</strong> 为游标变量，<strong>host_cursor_variable_name</strong> 为PL&#x2F;SQL主机环境（如OCI: ORACLE Call Interface，Pro*c 程序等）中声明的游标变量。<br><strong>OPEN…FOR</strong> 语句可以在关闭当前的游标变量之前重新打开游标变量，而不会导致 <strong>CURSOR_ALREAD_OPEN</strong> 异常错误。新打开游标变量时，前一个查询的内存处理区将被释放。</p>
<p>2 . 提取游标变量数据<br>使用FETCH语句提取游标变量结果集合中的数据。格式为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FETCH</span> &#123;cursor_variable_name <span class="operator">|</span> :host_cursor_variable_name&#125;</span><br><span class="line"><span class="keyword">INTO</span> &#123;variable [, variable]…<span class="operator">|</span> record_variable&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>cursor_variable_name</strong> 和 <strong>host_cursor_variable_name</strong> 分别为游标变量和宿主游标变量名称；<br><strong>variable</strong> 和 <strong>record_variable</strong> 分别为普通变量和记录变量名称。</p>
<p>3． 关闭游标变量<br>CLOSE语句关闭游标变量，格式为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CLOSE</span> &#123;cursor_variable_name <span class="operator">|</span> :host_cursor_variable_name&#125;</span><br></pre></td></tr></table></figure>

<p><strong>cursor_variable_name</strong> 和 <strong>host_cursor_variable_name</strong> 分别为游标变量和宿主游标变量名称，如果应用程序试图关闭一个未打开的游标变量，则将导致 <strong>INVALID_CURSOR</strong> 异常错误</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 强类型参照游标变量类型</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    TYPE emp_job_rec <span class="keyword">IS</span> RECORD(</span><br><span class="line">        Employee_id employees.employee_id<span class="operator">%</span>TYPE,</span><br><span class="line">        Employee_name employees.first_name<span class="operator">%</span>TYPE,</span><br><span class="line">        Job_title employees.job_id<span class="operator">%</span>TYPE</span><br><span class="line">    );</span><br><span class="line">    TYPE emp_job_refcur_type <span class="keyword">IS</span> <span class="keyword">REF</span> <span class="keyword">CURSOR</span> <span class="keyword">RETURN</span> emp_job_rec;</span><br><span class="line">    Emp_refcur emp_job_refcur_type ;</span><br><span class="line">    Emp_job emp_job_rec;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">OPEN</span> emp_refcur <span class="keyword">FOR</span> </span><br><span class="line">      <span class="keyword">SELECT</span> employees.employee_id, employees.first_name<span class="operator">||</span>employees.last_name, employees.job_id </span><br><span class="line">      <span class="keyword">FROM</span> employees <span class="keyword">ORDER</span> <span class="keyword">BY</span> employees.department_id;</span><br><span class="line">   <span class="keyword">FETCH</span> emp_refcur <span class="keyword">INTO</span> emp_job;</span><br><span class="line">   WHILE emp_refcur<span class="operator">%</span>FOUND LOOP</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(emp_job.employee_id<span class="operator">||</span><span class="string">&#x27;: &#x27;</span><span class="operator">||</span>emp_job.employee_name<span class="operator">||</span><span class="string">&#x27; is a &#x27;</span><span class="operator">||</span>emp_job.job_title);</span><br><span class="line">      <span class="keyword">FETCH</span> emp_refcur <span class="keyword">INTO</span> emp_job;</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 弱类型参照游标变量类型</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    Type refcur_t <span class="keyword">IS</span> <span class="keyword">REF</span> <span class="keyword">CURSOR</span>;</span><br><span class="line">    Refcur refcur_t;</span><br><span class="line">    TYPE sample_rec_type <span class="keyword">IS</span> RECORD (</span><br><span class="line">        Id number,</span><br><span class="line">        Description VARCHAR2 (<span class="number">30</span>)</span><br><span class="line">    );</span><br><span class="line">    sample sample_rec_type;</span><br><span class="line">    selection varchar2(<span class="number">1</span>) :<span class="operator">=</span> <span class="built_in">UPPER</span> (SUBSTR (<span class="string">&#x27;&amp;tab&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    IF selection<span class="operator">=</span><span class="string">&#x27;D&#x27;</span> <span class="keyword">THEN</span></span><br><span class="line">        <span class="keyword">OPEN</span> refcur <span class="keyword">FOR</span> </span><br><span class="line">         <span class="keyword">SELECT</span> departments.department_id, departments.department_name </span><br><span class="line">         <span class="keyword">FROM</span> departments;</span><br><span class="line">         DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;Department data&#x27;</span>);</span><br><span class="line">    ELSIF selection<span class="operator">=</span><span class="string">&#x27;E&#x27;</span> <span class="keyword">THEN</span></span><br><span class="line">        <span class="keyword">OPEN</span> refcur <span class="keyword">FOR</span> </span><br><span class="line">        <span class="keyword">SELECT</span> employees.employee_id, employees.first_name<span class="operator">||</span><span class="string">&#x27; is a &#x27;</span><span class="operator">||</span>employees.job_id </span><br><span class="line">        <span class="keyword">FROM</span> employees;</span><br><span class="line">        DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;Employee data&#x27;</span>);</span><br><span class="line">    <span class="keyword">ELSE</span></span><br><span class="line">        DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;Please enter &#x27;&#x27;D&#x27;&#x27; or &#x27;&#x27;E&#x27;&#x27;&#x27;</span>);</span><br><span class="line">        <span class="keyword">RETURN</span>;</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line">    DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;----------------------&#x27;</span>);</span><br><span class="line">    <span class="keyword">FETCH</span> refcur <span class="keyword">INTO</span> sample;</span><br><span class="line">    WHILE refcur<span class="operator">%</span>FOUND LOOP</span><br><span class="line">        DBMS_OUTPUT.PUT_LINE(sample.id<span class="operator">||</span><span class="string">&#x27;: &#x27;</span><span class="operator">||</span>sample.description);</span><br><span class="line">        <span class="keyword">FETCH</span> refcur <span class="keyword">INTO</span> sample;</span><br><span class="line">    <span class="keyword">END</span> LOOP;</span><br><span class="line">    <span class="keyword">CLOSE</span> refcur;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用游标变量（没有RETURN子句）</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line"><span class="comment">--定义一个游标数据类型</span></span><br><span class="line">   TYPE emp_cursor_type <span class="keyword">IS</span> <span class="keyword">REF</span> <span class="keyword">CURSOR</span>;</span><br><span class="line"><span class="comment">--声明一个游标变量</span></span><br><span class="line">   c1 EMP_CURSOR_TYPE;</span><br><span class="line"><span class="comment">--声明两个记录变量</span></span><br><span class="line">   v_emp_record employees<span class="operator">%</span>ROWTYPE;</span><br><span class="line">   v_reg_record regions<span class="operator">%</span>ROWTYPE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">OPEN</span> c1 <span class="keyword">FOR</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">   LOOP</span><br><span class="line">      <span class="keyword">FETCH</span> c1 <span class="keyword">INTO</span> v_emp_record;</span><br><span class="line">      EXIT <span class="keyword">WHEN</span> c1<span class="operator">%</span>NOTFOUND;</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(v_emp_record.first_name<span class="operator">||</span><span class="string">&#x27;的雇佣日期是&#x27;</span></span><br><span class="line">                            <span class="operator">||</span>v_emp_record.hire_date);</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="comment">--将同一个游标变量对应到另一个SELECT语句</span></span><br><span class="line">   <span class="keyword">OPEN</span> c1 <span class="keyword">FOR</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> regions <span class="keyword">WHERE</span> region_id <span class="keyword">IN</span>（<span class="number">1</span>，<span class="number">2</span>）;</span><br><span class="line">   LOOP</span><br><span class="line">      <span class="keyword">FETCH</span> c1 <span class="keyword">INTO</span> v_reg_record;</span><br><span class="line">      EXIT <span class="keyword">WHEN</span> c1<span class="operator">%</span>NOTFOUND;</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(v_reg_record.region_id<span class="operator">||</span><span class="string">&#x27;表示&#x27;</span></span><br><span class="line">                            <span class="operator">||</span>v_reg_record.region_name);</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line">   <span class="keyword">CLOSE</span> c1;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用游标变量（有RETURN子句）</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line"><span class="comment">--定义一个与employees表中的这几个列相同的记录数据类型</span></span><br><span class="line">   TYPE emp_record_type <span class="keyword">IS</span> RECORD(</span><br><span class="line">        f_name   employees.first_name<span class="operator">%</span>TYPE,</span><br><span class="line">        h_date   employees.hire_date<span class="operator">%</span>TYPE,</span><br><span class="line">        j_id     employees.job_id<span class="operator">%</span>TYPE);</span><br><span class="line"><span class="comment">--声明一个该记录数据类型的记录变量</span></span><br><span class="line">   v_emp_record EMP_RECORD_TYPE;</span><br><span class="line"><span class="comment">--定义一个游标数据类型</span></span><br><span class="line">   TYPE emp_cursor_type <span class="keyword">IS</span> <span class="keyword">REF</span> <span class="keyword">CURSOR</span></span><br><span class="line">        <span class="keyword">RETURN</span> EMP_RECORD_TYPE;</span><br><span class="line"><span class="comment">--声明一个游标变量</span></span><br><span class="line">   c1 EMP_CURSOR_TYPE;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">OPEN</span> c1 <span class="keyword">FOR</span> </span><br><span class="line">      <span class="keyword">SELECT</span> first_name, hire_date, job_id</span><br><span class="line">      <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">   LOOP</span><br><span class="line">      <span class="keyword">FETCH</span> c1 <span class="keyword">INTO</span> v_emp_record;</span><br><span class="line">      EXIT <span class="keyword">WHEN</span> c1<span class="operator">%</span>NOTFOUND;</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;雇员名称：&#x27;</span><span class="operator">||</span>v_emp_record.f_name</span><br><span class="line">                <span class="operator">||</span><span class="string">&#x27;  雇佣日期：&#x27;</span><span class="operator">||</span>v_emp_record.h_date</span><br><span class="line">                <span class="operator">||</span><span class="string">&#x27;  岗位：&#x27;</span><span class="operator">||</span>v_emp_record.j_id);</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line">   <span class="keyword">CLOSE</span> c1;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-1-异常处理概念"><a href="#4-1-异常处理概念" class="headerlink" title="4.1 异常处理概念"></a>4.1 异常处理概念</h3><p>有三种类型的异常错误：</p>
<ol>
<li>预定义错误：ORACLE预定义的异常情况大约有24个。对这种异常情况的处理，无需在程序中定义，由ORACLE自动将其引发。</li>
<li>非预定义错误：即其他标准的ORACLE错误。对这种异常情况的处理，需要用户在程序中定义，然后由ORACLE自动将其引发。</li>
<li>用户定义错误：程序执行过程中，出现编程人员认为的非正常情况。对这种异常情况的处理，需要用户在程序中定义，然后显式地在程序中将其引发。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXCEPTION</span><br><span class="line">   <span class="keyword">WHEN</span> first_exception <span class="keyword">THEN</span>  <span class="operator">&lt;</span>code <span class="keyword">to</span> handle <span class="keyword">first</span> exception <span class="operator">&gt;</span></span><br><span class="line">   <span class="keyword">WHEN</span> second_exception <span class="keyword">THEN</span>  <span class="operator">&lt;</span>code <span class="keyword">to</span> handle <span class="keyword">second</span> exception <span class="operator">&gt;</span></span><br><span class="line">   <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span>  <span class="operator">&lt;</span>code <span class="keyword">to</span> handle others exception <span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-预定义的异常处理"><a href="#4-2-预定义的异常处理" class="headerlink" title="4.2 预定义的异常处理"></a>4.2 预定义的异常处理</h3><p>只需在PL&#x2F;SQL块的异常处理部分，直接引用相应的异常情况名，并对其完成相应的异常错误处理即可。</p>
<table>
<thead>
<tr>
<th align="left">异常代码</th>
<th align="left">异常描述</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ORA-0001</td>
<td align="left">Dup_val_on_index</td>
<td align="left">违反了唯一性限制</td>
</tr>
<tr>
<td align="left">ORA-0051</td>
<td align="left">Timeout-on-resource</td>
<td align="left">在等待资源时发生超时</td>
</tr>
<tr>
<td align="left">ORA-0061</td>
<td align="left">Transaction-backed-out</td>
<td align="left">由于发生死锁事务被撤消</td>
</tr>
<tr>
<td align="left">ORA-1001</td>
<td align="left">Invalid-CURSOR</td>
<td align="left">试图使用一个无效的游标</td>
</tr>
<tr>
<td align="left">ORA-1012</td>
<td align="left">Not-logged-on</td>
<td align="left">没有连接到ORACLE</td>
</tr>
<tr>
<td align="left">ORA-1017</td>
<td align="left">Login-denied</td>
<td align="left">无效的用户名&#x2F;口令</td>
</tr>
<tr>
<td align="left">ORA-1403</td>
<td align="left">No_data_found</td>
<td align="left">SELECT INTO没有找到数据</td>
</tr>
<tr>
<td align="left">ORA-1422</td>
<td align="left">Too_many_rows</td>
<td align="left">SELECT INTO 返回多行</td>
</tr>
<tr>
<td align="left">ORA-1476</td>
<td align="left">Zero-divide</td>
<td align="left">试图被零除</td>
</tr>
<tr>
<td align="left">ORA-1722</td>
<td align="left">Invalid-NUMBER</td>
<td align="left">转换一个数字失败</td>
</tr>
<tr>
<td align="left">ORA-6500</td>
<td align="left">Storage-error</td>
<td align="left">内存不够引发的内部错误</td>
</tr>
<tr>
<td align="left">ORA-6501</td>
<td align="left">Program-error</td>
<td align="left">内部错误</td>
</tr>
<tr>
<td align="left">ORA-6502</td>
<td align="left">Value-error</td>
<td align="left">转换或截断错误</td>
</tr>
<tr>
<td align="left">ORA-6504</td>
<td align="left">Rowtype-mismatch</td>
<td align="left">宿主游标变量与 PL&#x2F;SQL变量有不兼容行类型</td>
</tr>
<tr>
<td align="left">ORA-6511</td>
<td align="left">CURSOR-already-OPEN</td>
<td align="left">试图打开一个已处于打开状态的游标</td>
</tr>
<tr>
<td align="left">ORA-6530</td>
<td align="left">Access-INTO-null</td>
<td align="left">试图为null 对象的属性赋值</td>
</tr>
<tr>
<td align="left">ORA-6531</td>
<td align="left">Collection-is-null</td>
<td align="left">试图将Exists 以外的集合( collection)方法应用于一个null pl&#x2F;sql 表上或varray上</td>
</tr>
<tr>
<td align="left">ORA-6532</td>
<td align="left">Subscript-outside-limit</td>
<td align="left">对嵌套或varray索引得引用超出声明范围以外</td>
</tr>
<tr>
<td align="left">ORA-6533</td>
<td align="left">Subscript-beyond-count</td>
<td align="left">对嵌套或varray 索引得引用大于集合中元素的个数.</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 更新指定员工工资，如工资小于1500，则加100；</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   v_empno employees.employee_id<span class="operator">%</span>TYPE :<span class="operator">=</span> <span class="operator">&amp;</span>empno;</span><br><span class="line">   v_sa<span class="operator">-</span>  employees.salary<span class="operator">%</span>TYPE;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">SELECT</span> salary <span class="keyword">INTO</span> v_sal <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> v_empno;</span><br><span class="line">   IF v_sal<span class="operator">&lt;=</span><span class="number">1500</span> <span class="keyword">THEN</span> </span><br><span class="line">        <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">+</span> <span class="number">100</span> <span class="keyword">WHERE</span> employee_id<span class="operator">=</span>v_empno; </span><br><span class="line">        DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;编码为&#x27;</span><span class="operator">||</span>v_empno<span class="operator">||</span><span class="string">&#x27;员工工资已更新!&#x27;</span>);     </span><br><span class="line">   <span class="keyword">ELSE</span></span><br><span class="line">        DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;编码为&#x27;</span><span class="operator">||</span>v_empno<span class="operator">||</span><span class="string">&#x27;员工工资已经超过规定值!&#x27;</span>);</span><br><span class="line">   <span class="keyword">END</span> IF;</span><br><span class="line">EXCEPTION</span><br><span class="line">   <span class="keyword">WHEN</span> NO_DATA_FOUND <span class="keyword">THEN</span>  </span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;数据库中没有编码为&#x27;</span><span class="operator">||</span>v_empno<span class="operator">||</span><span class="string">&#x27;的员工&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> TOO_MANY_ROWS <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;程序运行错误!请使用游标&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(SQLCODE<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>SQLERRM);</span><br><span class="line"><span class="keyword">END</span>; </span><br></pre></td></tr></table></figure>

<h3 id="4-3-非预定义的异常处理"><a href="#4-3-非预定义的异常处理" class="headerlink" title="4.3 非预定义的异常处理"></a>4.3 非预定义的异常处理</h3><p>必须对非定义的ORACLE错误进行定义。步骤如下：</p>
<ol>
<li>定义异常情况 <strong>&lt;异常情况&gt; EXCEPTION</strong>;</li>
<li>将定义异常情况，与标准的ORACLE错误联系起来： <strong>PRAGMA EXCEPTION_INIT(&lt;异常情况&gt;, &lt;错误代码&gt;)</strong>;</li>
<li>在异常情况处理部分对异常情况做出相应的处理。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除指定部门的记录信息，以确保该部门没有员工。</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> departments <span class="keyword">VALUES</span>(<span class="number">50</span>, <span class="string">&#x27;FINANCE&#x27;</span>, <span class="string">&#x27;CHICAGO&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   v_deptno departments.department_id<span class="operator">%</span>TYPE :<span class="operator">=</span> <span class="operator">&amp;</span>deptno;</span><br><span class="line">   deptno_remaining EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(deptno_remaining, <span class="number">-2292</span>);</span><br><span class="line">   <span class="comment">/* -2292 是违反一致性约束的错误代码 */</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">DELETE</span> <span class="keyword">FROM</span> departments <span class="keyword">WHERE</span> department_id <span class="operator">=</span> v_deptno;</span><br><span class="line">EXCEPTION</span><br><span class="line">   <span class="keyword">WHEN</span> deptno_remaining <span class="keyword">THEN</span> </span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;违反数据完整性约束!&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(SQLCODE<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>SQLERRM);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-4-用户自定义的异常处理"><a href="#4-4-用户自定义的异常处理" class="headerlink" title="4.4 用户自定义的异常处理"></a>4.4 用户自定义的异常处理</h3><p>用户定义的异常错误是通过显式使用 RAISE 语句来触发。当引发一个异常错误时，控制就转向到 EXCEPTION块异常错误部分，执行错误处理代码。对于这类异常情况的处理，步骤如下：</p>
<ol>
<li>定义异常情况 <strong>&lt;异常情况&gt; EXCEPTION</strong>;</li>
<li>**RAISE &lt;异常情况&gt;**；</li>
<li>在异常情况处理部分对异常情况做出相应的处理</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 更新指定员工工资，增加100；</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   v_empno employees.employee_id<span class="operator">%</span>TYPE :<span class="operator">=</span><span class="operator">&amp;</span>empno;</span><br><span class="line">   no_result  EXCEPTION;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary <span class="operator">=</span> salary<span class="operator">+</span><span class="number">100</span> <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> v_empno;</span><br><span class="line">   IF <span class="keyword">SQL</span><span class="operator">%</span>NOTFOUND <span class="keyword">THEN</span></span><br><span class="line">      RAISE no_result;</span><br><span class="line">   <span class="keyword">END</span> IF;</span><br><span class="line">EXCEPTION</span><br><span class="line">   <span class="keyword">WHEN</span> no_result <span class="keyword">THEN</span> </span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;你的数据更新语句失败了!&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(SQLCODE<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>SQLERRM);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-5-自定义异常代码"><a href="#4-5-自定义异常代码" class="headerlink" title="4.5 自定义异常代码"></a>4.5 自定义异常代码</h3><p>调用DBMS_STANDARD(ORACLE提供的包)包所定义的RAISE_APPLICATION_ERROR过程，可以重新定义异常错误消息，它为应用程序提供了一种与ORACLE交互的方法。<br>RAISE_APPLICATION_ERROR 的语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">RAISE_APPLICATION_ERROR(error_number,error_message,[keep_errors] );</span><br></pre></td></tr></table></figure>
<p>这里的 error_number 是从 –20,000 到 –20,999 之间的参数，<br>error_message 是相应的提示信息(&lt; 2048 字节)，<br>keep_errors 为可选，如果 keep_errors &#x3D;TRUE ,则新错误将被添加到已经引发的错误列表中。如果 keep_errors&#x3D;FALSE(缺省), 则新错误将替换当前的错误列表。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建一个函数get_salary, 该函数检索指定部门的工资总和，其中定义了-20991和-20992号错误，分别处理参数为空和非法部门代码两种错误：</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> errlog(</span><br><span class="line">  Errcode NUMBER,</span><br><span class="line">  Errtext <span class="type">CHAR</span>(<span class="number">40</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">FUNCTION</span> get_salary(p_deptno NUMBER)</span><br><span class="line"><span class="keyword">RETURN</span> NUMBER </span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">  v_sal NUMBER;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  IF p_deptno <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">THEN</span></span><br><span class="line">    RAISE_APPLICATION_ERROR(<span class="number">-20991</span>, ’部门代码为空’);</span><br><span class="line">  ELSIF p_deptno<span class="operator">&lt;</span><span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line">    RAISE_APPLICATION_ERROR(<span class="number">-20992</span>, ’无效的部门代码’);</span><br><span class="line">  <span class="keyword">ELSE</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">SUM</span>(employees.salary) <span class="keyword">INTO</span> v_sal <span class="keyword">FROM</span> employees </span><br><span class="line">    <span class="keyword">WHERE</span> employees.department_id<span class="operator">=</span>p_deptno;</span><br><span class="line">    <span class="keyword">RETURN</span> v_sal;</span><br><span class="line">  <span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> </span><br><span class="line">  V_salary NUMBER(<span class="number">7</span>,<span class="number">2</span>);</span><br><span class="line">  V_sqlcode NUMBER;</span><br><span class="line">  V_sqlerr VARCHAR2(<span class="number">512</span>);</span><br><span class="line">  Null_deptno EXCEPTION;</span><br><span class="line">  Invalid_deptno EXCEPTION;</span><br><span class="line">  PRAGMA EXCEPTION_INIT(null_deptno,<span class="number">-20991</span>);</span><br><span class="line">  PRAGMA EXCEPTION_INIT(invalid_deptno, <span class="number">-20992</span>);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  V_salary :<span class="operator">=</span>get_salary(<span class="number">10</span>);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;10号部门工资：&#x27;</span> <span class="operator">||</span> TO_CHAR(V_salary));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">    V_salary :<span class="operator">=</span>get_salary(<span class="number">-10</span>);</span><br><span class="line">  EXCEPTION</span><br><span class="line">    <span class="keyword">WHEN</span> invalid_deptno <span class="keyword">THEN</span></span><br><span class="line">      V_sqlcode :<span class="operator">=</span>SQLCODE;</span><br><span class="line">      V_sqlerr  :<span class="operator">=</span>SQLERRM;</span><br><span class="line">      <span class="keyword">INSERT</span> <span class="keyword">INTO</span> errlog(errcode, errtext) </span><br><span class="line">      <span class="keyword">VALUES</span>(v_sqlcode, v_sqlerr);</span><br><span class="line">      <span class="keyword">COMMIT</span>;</span><br><span class="line">  <span class="keyword">END</span> inner1;</span><br><span class="line"></span><br><span class="line">  V_salary :<span class="operator">=</span>get_salary(<span class="number">20</span>);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;部门号为20的工资为：&#x27;</span><span class="operator">||</span>TO_CHAR(V_salary));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">    V_salary :<span class="operator">=</span>get_salary(<span class="keyword">NULL</span>);</span><br><span class="line">  <span class="keyword">END</span> inner2;</span><br><span class="line"></span><br><span class="line">  V_salary :<span class="operator">=</span> get_salary(<span class="number">30</span>);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;部门号为30的工资为：&#x27;</span><span class="operator">||</span>TO_CHAR(V_salary));</span><br><span class="line"></span><br><span class="line">  EXCEPTION</span><br><span class="line">    <span class="keyword">WHEN</span> null_deptno <span class="keyword">THEN</span></span><br><span class="line">      V_sqlcode :<span class="operator">=</span>SQLCODE;</span><br><span class="line">      V_sqlerr  :<span class="operator">=</span>SQLERRM;</span><br><span class="line">      <span class="keyword">INSERT</span> <span class="keyword">INTO</span> errlog(errcode, errtext) <span class="keyword">VALUES</span>(v_sqlcode, v_sqlerr);</span><br><span class="line">      <span class="keyword">COMMIT</span>;</span><br><span class="line">    <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">         DBMS_OUTPUT.PUT_LINE(SQLCODE<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>SQLERRM);</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">outer</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义触发器，使用RAISE_APPLICATION_ERROR阻止没有员工姓名的新员式记录插入：</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">TRIGGER</span> tr_insert_emp</span><br><span class="line">BEFORE <span class="keyword">INSERT</span> <span class="keyword">ON</span> employees</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  IF :new.first_name <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">OR</span> :new.last_name <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">THEN</span></span><br><span class="line">    RAISE_APPLICATION_ERROR(<span class="number">-20000</span>,<span class="string">&#x27;Employee must have a name.&#x27;</span>);</span><br><span class="line">  <span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-6异常错误处理编程"><a href="#4-6异常错误处理编程" class="headerlink" title="4.6异常错误处理编程"></a>4.6异常错误处理编程</h3><p>由于ORACLE 的错信息最大长度是512字节，为了得到完整的错误提示信息，我们可用 SQLERRM和 SUBSTR 函数一起得到错误提示信息，方便进行错误，特别是如果WHEN OTHERS异常处理器时更为方便。</p>
<blockquote>
<p>SQLCODE  返回遇到的Oracle错误号,<br>SQLERRM  返回遇到的Oracle错误信息.<br>如:  SQLCODE&#x3D;-100    SQLERRM&#x3D;’no_data_found’<br>SQLCODE&#x3D;0       SQLERRM&#x3D;’normal, successfual completion’</p>
</blockquote>
<p>范例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 将ORACLE错误代码及其信息存入错误代码表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> errors (errnum NUMBER(<span class="number">4</span>), errmsg VARCHAR2(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   err_msg  VARCHAR2(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="comment">/*  得到所有 ORACLE 错误信息  */</span></span><br><span class="line">   <span class="keyword">FOR</span> err_num <span class="keyword">IN</span> <span class="number">-100</span> .. <span class="number">0</span> LOOP</span><br><span class="line">      err_msg :<span class="operator">=</span> SQLERRM(err_num);</span><br><span class="line">      <span class="keyword">INSERT</span> <span class="keyword">INTO</span> errors <span class="keyword">VALUES</span>(err_num, err_msg);</span><br><span class="line">   <span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> errors;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 查询ORACLE错误代码；</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees(employee_id, first_name,last_name,hire_date,department_id)</span><br><span class="line">   <span class="keyword">VALUES</span>(<span class="number">2222</span>, <span class="string">&#x27;Eric&#x27;</span>,<span class="string">&#x27;Hu&#x27;</span>, SYSDATE, <span class="number">20</span>);</span><br><span class="line">   DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;插入数据记录成功!&#x27;</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees(employee_id, first_name,last_name,hire_date,department_id)</span><br><span class="line">   <span class="keyword">VALUES</span>(<span class="number">2222</span>, <span class="string">&#x27;胡&#x27;</span>,<span class="string">&#x27;勇&#x27;</span>, SYSDATE, <span class="number">20</span>);</span><br><span class="line">   DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;插入数据记录成功!&#x27;</span>);</span><br><span class="line">EXCEPTION</span><br><span class="line">   <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(SQLCODE<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>SQLERRM);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 利用ORACLE错误代码，编写异常错误处理代码；</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   empno_remaining EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(empno_remaining, <span class="number">-1</span>);</span><br><span class="line">   <span class="comment">/* -1 是违反唯一约束条件的错误代码 */</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees(employee_id, first_name,last_name,hire_date,department_id)</span><br><span class="line">   <span class="keyword">VALUES</span>(<span class="number">3333</span>, <span class="string">&#x27;Eric&#x27;</span>,<span class="string">&#x27;Hu&#x27;</span>, SYSDATE, <span class="number">20</span>);</span><br><span class="line">   DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;插入数据记录成功!&#x27;</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees(employee_id, first_name,last_name,hire_date,department_id)</span><br><span class="line">   <span class="keyword">VALUES</span>(<span class="number">3333</span>, <span class="string">&#x27;胡&#x27;</span>,<span class="string">&#x27;勇&#x27;</span>,SYSDATE, <span class="number">20</span>);</span><br><span class="line">   DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;插入数据记录成功!&#x27;</span>);</span><br><span class="line">EXCEPTION</span><br><span class="line">   <span class="keyword">WHEN</span> empno_remaining <span class="keyword">THEN</span> </span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;违反数据完整性约束!&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(SQLCODE<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>SQLERRM);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="5-1-过程与函数"><a href="#5-1-过程与函数" class="headerlink" title="5.1 过程与函数"></a>5.1 过程与函数</h3><p>过程和函数统称为PL&#x2F;SQL子程序，他们是被命名的PL&#x2F;SQL块，均存储在数据库中，并通过输入、输出参数或输入&#x2F;输出参数与其调用者交换信息。过程和函数的唯一区别是函数总向调用者返回数据，而过程则不返回数据。</p>
<h3 id="5-2-创建函数"><a href="#5-2-创建函数" class="headerlink" title="5.2 创建函数"></a>5.2 创建函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">OR</span> REPLACE] <span class="keyword">FUNCTION</span> function_name</span><br><span class="line"> (arg1 [ &#123; <span class="keyword">IN</span> <span class="operator">|</span> <span class="keyword">OUT</span> <span class="operator">|</span> <span class="keyword">IN</span> <span class="keyword">OUT</span> &#125;] type1 [<span class="keyword">DEFAULT</span> value1],</span><br><span class="line"> [arg2 [ &#123; <span class="keyword">IN</span> <span class="operator">|</span> <span class="keyword">OUT</span> <span class="operator">|</span> <span class="keyword">IN</span> <span class="keyword">OUT</span> &#125;] type2 [<span class="keyword">DEFAULT</span> value1]],</span><br><span class="line"> ......</span><br><span class="line"> [argn [ &#123; <span class="keyword">IN</span> <span class="operator">|</span> <span class="keyword">OUT</span> <span class="operator">|</span> <span class="keyword">IN</span> <span class="keyword">OUT</span> &#125;] typen [<span class="keyword">DEFAULT</span> valuen]])</span><br><span class="line"> [ AUTHID DEFINER <span class="operator">|</span> <span class="built_in">CURRENT_USER</span> ]</span><br><span class="line"><span class="keyword">RETURN</span> return_type</span><br><span class="line"> <span class="keyword">IS</span> <span class="operator">|</span> <span class="keyword">AS</span></span><br><span class="line">    <span class="operator">&lt;</span>类型.变量的声明部分<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    执行部分</span><br><span class="line">    <span class="keyword">RETURN</span> expression</span><br><span class="line">EXCEPTION</span><br><span class="line">    异常处理部分</span><br><span class="line"><span class="keyword">END</span> function_name; 　　</span><br></pre></td></tr></table></figure>

<p>IN, OUT, IN OUT是形参的模式。若省略，则为 IN 模式。 IN 模式的形参只能将实参传递给形参，进入函数内部，但只能读不能写，函数返回时实参的值不变。 OUT 模式的形参会忽略调用时的实参值（或说该形参的初始值总是 NULL），但在函数内部可以被读或写，函数返回时形参的值会赋予给实参。 IN OUT 具有前两种模式的特性，即调用时，实参的值总是传递给形参，结束时，形参的值传递给实参。调用时，对于 IN 模式的实参可以是常量或变量，但对于 OUT 和 IN OUT模式的实参必须是变量。只有在确认function_name函数是新函数或是要更新的函数时，才使用OR REPALCE关键字，否则容易删除有用的函数。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--获取某部门的工资总和</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE</span><br><span class="line"><span class="keyword">FUNCTION</span> get_salary(</span><br><span class="line">  Dept_no NUMBER,</span><br><span class="line">  Emp_count <span class="keyword">OUT</span> NUMBER)</span><br><span class="line">  <span class="keyword">RETURN</span> NUMBER</span><br><span class="line"><span class="keyword">IS</span></span><br><span class="line">  V_sum NUMBER;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">SELECT</span> <span class="built_in">SUM</span>(SALARY), <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">INTO</span> V_sum, emp_count</span><br><span class="line">    <span class="keyword">FROM</span> EMPLOYEES <span class="keyword">WHERE</span> DEPARTMENT_ID<span class="operator">=</span>dept_no;</span><br><span class="line">  <span class="keyword">RETURN</span> v_sum;</span><br><span class="line">EXCEPTION</span><br><span class="line">   <span class="keyword">WHEN</span> NO_DATA_FOUND <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;你需要的数据不存在!&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(SQLCODE<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>SQLERRM);</span><br><span class="line"><span class="keyword">END</span> get_salary;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-函数调用"><a href="#5-3-函数调用" class="headerlink" title="5.3 函数调用"></a>5.3 函数调用</h3><p>在调用函数时，可以使用以下三种方法</p>
<ul>
<li>位置表示法：按形参的排列顺序，依次写出实参的名称，而将形参与实参关联起来进行传递 <strong>argument_value1[,argument_value2 …]</strong></li>
<li>名称表示法：写出实参对应的形参，而将形参与实参关联起来进行传递 <strong>argument &#x3D;&gt; parameter [,…]</strong></li>
<li>组合传递：同时使用位置表示法和名称表示法为函数传递参数，使用位置表示法所传递的参数必须放在名称表示法所传递的参数前面。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 位置表示法</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    V_num NUMBER;</span><br><span class="line">    V_sum NUMBER;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    V_sum :<span class="operator">=</span>get_salary(<span class="number">10</span>, v_num);</span><br><span class="line">    DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;部门号为:10的工资总和：&#x27;</span><span class="operator">||</span>v_sum<span class="operator">||</span><span class="string">&#x27;，人数为：&#x27;</span><span class="operator">||</span>v_num);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 名称表示法</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    V_num NUMBER;</span><br><span class="line">    V_sum NUMBER;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    V_sum :<span class="operator">=</span>get_salary(emp_count <span class="operator">=</span><span class="operator">&gt;</span> v_num, dept_no <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">10</span>);</span><br><span class="line">    DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;部门号为:10的工资总和：&#x27;</span><span class="operator">||</span>v_sum<span class="operator">||</span><span class="string">&#x27;，人数为：&#x27;</span><span class="operator">||</span>v_num);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 组合传递</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">FUNCTION</span> demo_fun(</span><br><span class="line">  Name VARCHAR2,<span class="comment">--注意VARCHAR2不能给精度，如：VARCHAR2(10)，其它类似</span></span><br><span class="line">  Age <span class="type">INTEGER</span>,</span><br><span class="line">  Sex VARCHAR2)</span><br><span class="line">  <span class="keyword">RETURN</span> VARCHAR2</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">  V_var VARCHAR2(<span class="number">32</span>);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  V_var :<span class="operator">=</span> name<span class="operator">||</span><span class="string">&#x27;：&#x27;</span><span class="operator">||</span>TO_CHAR(age)<span class="operator">||</span><span class="string">&#x27;岁.&#x27;</span><span class="operator">||</span>sex;</span><br><span class="line">  <span class="keyword">RETURN</span> v_var;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">  Var <span class="type">VARCHAR</span>(<span class="number">32</span>);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  Var :<span class="operator">=</span> demo_fun(<span class="string">&#x27;user1&#x27;</span>, <span class="number">30</span>, sex <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(var);</span><br><span class="line"> </span><br><span class="line">  Var :<span class="operator">=</span> demo_fun(<span class="string">&#x27;user2&#x27;</span>, age <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">40</span>, sex <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(var);</span><br><span class="line"> </span><br><span class="line">  Var :<span class="operator">=</span> demo_fun(<span class="string">&#x27;user3&#x27;</span>, sex <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;女&#x27;</span>, age <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">20</span>);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(var);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="5-4-参数默认值"><a href="#5-4-参数默认值" class="headerlink" title="5.4 参数默认值"></a>5.4 参数默认值</h3><p>在 CREATE OR REPLACE FUNCTION 语句中声明函数参数时可以使用DEFAULT关键字为输入的参数指定默认值。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">FUNCTION</span> demo_fun(</span><br><span class="line">  Name VARCHAR2,</span><br><span class="line">  Age <span class="type">INTEGER</span>,</span><br><span class="line">  Sex VARCHAR2 <span class="keyword">DEFAULT</span> <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line">  <span class="keyword">RETURN</span> VARCHAR2</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">  V_var VARCHAR2(<span class="number">32</span>);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  V_var :<span class="operator">=</span> name<span class="operator">||</span><span class="string">&#x27;：&#x27;</span><span class="operator">||</span>TO_CHAR(age)<span class="operator">||</span><span class="string">&#x27;岁.&#x27;</span><span class="operator">||</span>sex;</span><br><span class="line">  <span class="keyword">RETURN</span> v_var;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<p>具有默认值的函数创建后，在函数调用时，如果没有为具有默认值的参数提供实际参数值，函数将使用该参数的默认值。但当调用者为默认参数提供实际参数时，函数将使用实际参数值。在创建函数时，只能为输入参数设置默认值，而不能为输入&#x2F;输出参数设置默认值。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line"> var <span class="type">VARCHAR</span>(<span class="number">32</span>);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"> var :<span class="operator">=</span> demo_fun(<span class="string">&#x27;user1&#x27;</span>, <span class="number">30</span>);</span><br><span class="line"> DBMS_OUTPUT.PUT_LINE(var);</span><br><span class="line"> var :<span class="operator">=</span> demo_fun(<span class="string">&#x27;user2&#x27;</span>, age <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">40</span>);</span><br><span class="line"> DBMS_OUTPUT.PUT_LINE(var);</span><br><span class="line"> var :<span class="operator">=</span> demo_fun(<span class="string">&#x27;user3&#x27;</span>, sex <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;女&#x27;</span>, age <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">20</span>);</span><br><span class="line"> DBMS_OUTPUT.PUT_LINE(var);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<p>5.5 储存过程</p>
<p>创建</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">OR</span> REPLACE] <span class="keyword">PROCEDURE</span> procedure_name</span><br><span class="line">([arg1 [ <span class="keyword">IN</span> <span class="operator">|</span> <span class="keyword">OUT</span> <span class="operator">|</span> <span class="keyword">IN</span> <span class="keyword">OUT</span> ]] type1 [<span class="keyword">DEFAULT</span> value1],</span><br><span class="line"> [arg2 [ <span class="keyword">IN</span> <span class="operator">|</span> <span class="keyword">OUT</span> <span class="operator">|</span> <span class="keyword">IN</span> <span class="keyword">OUT</span> ]] type2 [<span class="keyword">DEFAULT</span> value1]],</span><br><span class="line"> ......</span><br><span class="line"> [argn [ <span class="keyword">IN</span> <span class="operator">|</span> <span class="keyword">OUT</span> <span class="operator">|</span> <span class="keyword">IN</span> <span class="keyword">OUT</span> ]] typen [<span class="keyword">DEFAULT</span> valuen])</span><br><span class="line">    [ AUTHID DEFINER <span class="operator">|</span> <span class="built_in">CURRENT_USER</span> ]</span><br><span class="line">&#123; <span class="keyword">IS</span> <span class="operator">|</span> <span class="keyword">AS</span> &#125;</span><br><span class="line">  <span class="operator">&lt;</span>声明部分<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="operator">&lt;</span>执行部分<span class="operator">&gt;</span></span><br><span class="line">EXCEPTION</span><br><span class="line">  <span class="operator">&lt;</span>可选的异常错误处理程序<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">END</span> procedure_name;</span><br></pre></td></tr></table></figure>

<p>范例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 用户连接登记记录；  </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> logtable (userid VARCHAR2(<span class="number">10</span>), logdate <span class="type">date</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">PROCEDURE</span> logexecution</span><br><span class="line"><span class="keyword">IS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> logtable (userid, logdate) <span class="keyword">VALUES</span> (<span class="keyword">USER</span>, SYSDATE);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除指定员工记录； </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">PROCEDURE</span> DelEmp (v_empno <span class="keyword">IN</span> employees.employee_id<span class="operator">%</span>TYPE)</span><br><span class="line"><span class="keyword">AS</span> No_result EXCEPTION;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">DELETE</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> v_empno;</span><br><span class="line">   IF <span class="keyword">SQL</span><span class="operator">%</span>NOTFOUND <span class="keyword">THEN</span></span><br><span class="line">      RAISE no_result;</span><br><span class="line">   <span class="keyword">END</span> IF;</span><br><span class="line">   DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;编码为&#x27;</span><span class="operator">||</span>v_empno<span class="operator">||</span><span class="string">&#x27;的员工已被删除!&#x27;</span>);</span><br><span class="line">EXCEPTION</span><br><span class="line">   <span class="keyword">WHEN</span> no_result <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;温馨提示:你需要的数据不存在!&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(SQLCODE<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>SQLERRM);</span><br><span class="line"><span class="keyword">END</span> DelEmp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入员工记录: </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">PROCEDURE</span> InsertEmp(</span><br><span class="line">   v_empno     <span class="keyword">in</span> employees.employee_id<span class="operator">%</span>TYPE,</span><br><span class="line">   v_firstname <span class="keyword">in</span> employees.first_name<span class="operator">%</span>TYPE,</span><br><span class="line">   v_lastname  <span class="keyword">in</span> employees.last_name<span class="operator">%</span>TYPE,</span><br><span class="line">   v_deptno    <span class="keyword">in</span> employees.department_id<span class="operator">%</span>TYPE</span><br><span class="line">   )</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">   empno_remaining EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(empno_remaining, <span class="number">-1</span>);</span><br><span class="line">   <span class="comment">/* -1 是违反唯一约束条件的错误代码 */</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMPLOYEES(EMPLOYEE_ID, FIRST_NAME, LAST_NAME, HIRE_DATE,DEPARTMENT_ID)</span><br><span class="line">   <span class="keyword">VALUES</span>(v_empno, v_firstname,v_lastname, sysdate, v_deptno);</span><br><span class="line">   DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;温馨提示:插入数据记录成功!&#x27;</span>);</span><br><span class="line">EXCEPTION</span><br><span class="line">   <span class="keyword">WHEN</span> empno_remaining <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;温馨提示:违反数据完整性约束!&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(SQLCODE<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>SQLERRM);</span><br><span class="line"><span class="keyword">END</span> InsertEmp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用存储过程向departments表中插入数据。 </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">PROCEDURE</span> insert_dept</span><br><span class="line">  (v_dept_id <span class="keyword">IN</span> departments.department_id<span class="operator">%</span>TYPE,</span><br><span class="line">   v_dept_name <span class="keyword">IN</span> departments.department_name<span class="operator">%</span>TYPE,</span><br><span class="line">   v_mgr_id <span class="keyword">IN</span> departments.manager_id<span class="operator">%</span>TYPE,</span><br><span class="line">   v_loc_id <span class="keyword">IN</span> departments.location_id<span class="operator">%</span>TYPE)</span><br><span class="line"><span class="keyword">IS</span></span><br><span class="line">   ept_null_error EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(ept_null_error, <span class="number">-1400</span>);</span><br><span class="line">   ept_no_loc_id EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(ept_no_loc_id, <span class="number">-2291</span>);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> departments</span><br><span class="line">   (department_id, department_name, manager_id, location_id)</span><br><span class="line">   <span class="keyword">VALUES</span></span><br><span class="line">   (v_dept_id, v_dept_name, v_mgr_id, v_loc_id);</span><br><span class="line">   DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;插入部门&#x27;</span><span class="operator">||</span>v_dept_id<span class="operator">||</span><span class="string">&#x27;成功&#x27;</span>);</span><br><span class="line">EXCEPTION</span><br><span class="line">   <span class="keyword">WHEN</span> DUP_VAL_ON_INDEX <span class="keyword">THEN</span></span><br><span class="line">      RAISE_APPLICATION_ERROR(<span class="number">-20000</span>, <span class="string">&#x27;部门编码不能重复&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> ept_null_error <span class="keyword">THEN</span></span><br><span class="line">      RAISE_APPLICATION_ERROR(<span class="number">-20001</span>, <span class="string">&#x27;部门编码、部门名称不能为空&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> ept_no_loc_id <span class="keyword">THEN</span></span><br><span class="line">      RAISE_APPLICATION_ERROR(<span class="number">-20002</span>, <span class="string">&#x27;没有该地点&#x27;</span>);</span><br><span class="line"><span class="keyword">END</span> insert_dept;</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 调用实例1</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   ept_20000 EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(ept_20000, <span class="number">-20000</span>);</span><br><span class="line">   ept_20001 EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(ept_20001, <span class="number">-20001</span>);</span><br><span class="line">   ept_20002 EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(ept_20002, <span class="number">-20002</span>);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   insert_dept(<span class="number">300</span>, <span class="string">&#x27;部门300&#x27;</span>, <span class="number">100</span>, <span class="number">2400</span>);</span><br><span class="line">   insert_dept(<span class="number">310</span>, <span class="keyword">NULL</span>, <span class="number">100</span>, <span class="number">2400</span>);</span><br><span class="line">   insert_dept(<span class="number">310</span>, <span class="string">&#x27;部门310&#x27;</span>, <span class="number">100</span>, <span class="number">900</span>);</span><br><span class="line">EXCEPTION</span><br><span class="line">   <span class="keyword">WHEN</span> ept_20000 <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;ept_20000部门编码不能重复&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> ept_20001 <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;ept_20001部门编码、部门名称不能为空&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> ept_20002 <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;ept_20002没有该地点&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;others出现了其他异常错误&#x27;</span>);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   ept_20000 EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(ept_20000, <span class="number">-20000</span>);</span><br><span class="line">   ept_20001 EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(ept_20001, <span class="number">-20001</span>);</span><br><span class="line">   ept_20002 EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(ept_20002, <span class="number">-20002</span>);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   insert_dept(v_dept_name <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;部门310&#x27;</span>, v_dept_id <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">310</span>,</span><br><span class="line">               v_mgr_id <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">100</span>, v_loc_id <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">2400</span>);</span><br><span class="line">   insert_dept(<span class="number">320</span>, <span class="string">&#x27;部门320&#x27;</span>, v_mgr_id <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">100</span>, v_loc_id <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">900</span>);</span><br><span class="line">EXCEPTION</span><br><span class="line">   <span class="keyword">WHEN</span> ept_20000 <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;ept_20000部门编码不能重复&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> ept_20001 <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;ept_20001部门编码、部门名称不能为空&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> ept_20002 <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;ept_20002没有该地点&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;others出现了其他异常错误&#x27;</span>);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-6-调用存储过程"><a href="#5-6-调用存储过程" class="headerlink" title="5.6 调用存储过程"></a>5.6 调用存储过程</h3><p>存储过程建立完成后，只要通过授权，用户就可以在SQLPLUS 、ORACLE开发工具或第三方开发工具中来调用运行。对于参数的传递也有三种：按位置传递、按名称传递和组合传递，传递方法与函数的一样。ORACLE 使用EXECUTE 语句来实现对存储过程的调用：<strong>EXEC[UTE] procedure_name( parameter1, parameter2…);</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询指定员工记录； </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">PROCEDURE</span> QueryEmp</span><br><span class="line">    (v_empno <span class="keyword">IN</span>  employees.employee_id<span class="operator">%</span>TYPE,</span><br><span class="line">     v_ename <span class="keyword">OUT</span> employees.first_name<span class="operator">%</span>TYPE,</span><br><span class="line">     v_sa<span class="operator">-</span>  <span class="keyword">OUT</span> employees.salary<span class="operator">%</span>TYPE)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SELECT</span> last_name <span class="operator">||</span> last_name, salary <span class="keyword">INTO</span> v_ename, v_sal</span><br><span class="line">     <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> v_empno;</span><br><span class="line">    DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;温馨提示:编码为&#x27;</span><span class="operator">||</span>v_empno<span class="operator">||</span><span class="string">&#x27;的员工已经查到!&#x27;</span>);</span><br><span class="line">EXCEPTION</span><br><span class="line">    <span class="keyword">WHEN</span> NO_DATA_FOUND <span class="keyword">THEN</span></span><br><span class="line">    DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;温馨提示:你需要的数据不存在!&#x27;</span>);</span><br><span class="line">    <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">    DBMS_OUTPUT.PUT_LINE(SQLCODE<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>SQLERRM);</span><br><span class="line"><span class="keyword">END</span> QueryEmp;</span><br><span class="line"><span class="comment">--调用</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   v1 employees.first_name<span class="operator">%</span>TYPE;</span><br><span class="line">   v2 employees.salary<span class="operator">%</span>TYPE;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  QueryEmp(<span class="number">100</span>, v1, v2);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;姓名:&#x27;</span><span class="operator">||</span>v1);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;工资:&#x27;</span><span class="operator">||</span>v2);</span><br><span class="line">  QueryEmp(<span class="number">103</span>, v1, v2);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;姓名:&#x27;</span><span class="operator">||</span>v1);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;工资:&#x27;</span><span class="operator">||</span>v2);</span><br><span class="line">  QueryEmp(<span class="number">104</span>, v1, v2);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;姓名:&#x27;</span><span class="operator">||</span>v1);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;工资:&#x27;</span><span class="operator">||</span>v2);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 计算指定部门的工资总和，并统计其中的职工数量。 </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">PROCEDURE</span> proc_demo</span><br><span class="line">    (</span><br><span class="line">      dept_no NUMBER <span class="keyword">DEFAULT</span> <span class="number">10</span>,</span><br><span class="line">      sal_sum <span class="keyword">OUT</span> NUMBER,</span><br><span class="line">      emp_count <span class="keyword">OUT</span> NUMBER</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">IS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">SUM</span>(salary), <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">INTO</span> sal_sum, emp_count</span><br><span class="line">      <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> department_id <span class="operator">=</span> dept_no;</span><br><span class="line">EXCEPTION</span><br><span class="line">   <span class="keyword">WHEN</span> NO_DATA_FOUND <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;温馨提示:你需要的数据不存在!&#x27;</span>);</span><br><span class="line">   <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(SQLCODE<span class="operator">||</span><span class="string">&#x27;---&#x27;</span><span class="operator">||</span>SQLERRM);</span><br><span class="line"><span class="keyword">END</span> proc_demo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">V_num NUMBER;</span><br><span class="line">V_sum NUMBER(<span class="number">8</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  Proc_demo(<span class="number">30</span>, v_sum, v_num);</span><br><span class="line">DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;温馨提示:30号部门工资总和：&#x27;</span><span class="operator">||</span>v_sum<span class="operator">||</span><span class="string">&#x27;,人数：&#x27;</span><span class="operator">||</span>v_num);</span><br><span class="line">  Proc_demo(sal_sum <span class="operator">=</span><span class="operator">&gt;</span> v_sum, emp_count <span class="operator">=</span><span class="operator">&gt;</span> v_num);</span><br><span class="line">DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;温馨提示:10号部门工资总和：&#x27;</span><span class="operator">||</span>v_sum<span class="operator">||</span><span class="string">&#x27;,人数：&#x27;</span><span class="operator">||</span>v_num);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="5-7-AUTHID"><a href="#5-7-AUTHID" class="headerlink" title="5.7 AUTHID"></a>5.7 AUTHID</h3><p>这里首先需要明白定义者权限和调用者权限的区别。</p>
<p>定义者权限（Difiner Right）：定义者权限是程序的默认权限。如果是在用户A下创建的程序，但其他用户只要能执行这个程序，那么这个程序所执行的任务都是以用户A的名义来执行的。因为用户A是程序的定义者。用户A能做什么，那这个程序就能做什么。</p>
<p>调用者权限（Invoker Right）：也叫执行者权限。如果某个程序中含有创建表的操作，且这个表只有用户A有创建权限，那么这个程序在用户A下面才执行成功，在其他用户下是不能成功执行的。</p>
<p>程序中没有AUTHID CURRENT_USER表示定义者权限，以定义者身份执行；程序中加上AUTHID CURRENT_USER表示调用者权限，以调用者身份执行。</p>
<p>调用者权限与定义者权限之间的差异主要体现在三个方面：</p>
<ol>
<li>执行的SCHEMA不同，操作的对象也不同</li>
</ol>
<ul>
<li><p>在定义者权限下，执行的用户为定义者，所操作的对象是定义者在编译时指定的对象。</p>
</li>
<li><p>在调用者权限下，执行的用户为当前用户，所操作的对象是当前模式下的对象。</p>
</li>
</ul>
<ol start="2">
<li>执行的权限不同</li>
</ol>
<ul>
<li><p>在定义者权限下，当前用户的权限为角色无效情况下所拥有的权限。</p>
</li>
<li><p>在调用者权限下，当前用户的权限为当前所拥有的权限（含角色）。</p>
</li>
</ul>
<ol start="3">
<li>执行的效率不同</li>
</ol>
<ul>
<li><p>在定义者权限下，过程被静态编译静态执行，所执行SQL语句在共享区池中是可被共享使用的。</p>
</li>
<li><p>在调用者权限下，过程静态编译，但动态执行，虽然执行的语句相同，但不同用户执行，其SQL语句在共享池中并不能共享。</p>
</li>
</ul>
<p>[AUTHID DEFINER]</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建立过程，使用AUTOID DEFINER； </span></span><br><span class="line"><span class="comment">--使用HR用户登录</span></span><br><span class="line"><span class="keyword">Connect</span> HR<span class="operator">/</span>qaz</span><br><span class="line"><span class="comment">--新建logtable日志表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> logtable;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">table</span> logtable (userid VARCHAR2(<span class="number">10</span>), logdate <span class="type">date</span>);</span><br><span class="line"><span class="comment">--新建过程/procedure,权限模式为定义者权限</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">PROCEDURE</span> logexecution</span><br><span class="line">    AUTHID DEFINER</span><br><span class="line"><span class="keyword">IS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> logtable (userid, logdate) <span class="keyword">VALUES</span> (<span class="keyword">USER</span>, SYSDATE);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="comment">--将logexecution的权限更改为public</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">EXECUTE</span> <span class="keyword">ON</span> logexecution <span class="keyword">TO</span> PUBLIC;</span><br><span class="line"><span class="comment">--使用SYSDBA用户登录</span></span><br><span class="line"><span class="keyword">CONNECT</span> <span class="operator">/</span> <span class="keyword">AS</span> SYSDBA</span><br><span class="line"><span class="comment">--创建testuser1用户</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CONNECT</span> <span class="keyword">TO</span> testuser1 IDENTIFIED <span class="keyword">BY</span> userpwd1;</span><br><span class="line"><span class="comment">--使用testuser1登录</span></span><br><span class="line"><span class="keyword">CONNECT</span> testuser1<span class="operator">/</span>userpwd1</span><br><span class="line"><span class="comment">--向HR.LOGTABLE表中插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> HR.LOGTABLE <span class="keyword">VALUES</span> (<span class="keyword">USER</span>, SYSDATE);</span><br><span class="line"><span class="comment">--执行HR.logexecution存储过程，插入数据库的为 HR 定义者的用户信息</span></span><br><span class="line"><span class="keyword">EXECUTE</span> HR.logexecution</span><br><span class="line"><span class="comment">--使用HR用户登录</span></span><br><span class="line"><span class="keyword">CONNECT</span> HR<span class="operator">/</span>qaz</span><br><span class="line"><span class="comment">--查看表内容</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> HR.logtable;</span><br></pre></td></tr></table></figure>

<p>[AUTHID CURRENT_USER]</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建立过程，使用AUTOID 权限模式为定义者权限。</span></span><br><span class="line"><span class="keyword">CONNECT</span> HR<span class="operator">/</span>qaz</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">PROCEDURE</span> logexecution</span><br><span class="line">  AUTHID <span class="built_in">CURRENT_USER</span> </span><br><span class="line"><span class="keyword">IS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> logtable (userid, logdate) <span class="keyword">VALUES</span> (<span class="keyword">USER</span>, SYSDATE);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">EXECUTE</span> <span class="keyword">ON</span> logexecution <span class="keyword">TO</span> PUBLIC;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CONNECT</span> testuser1<span class="operator">/</span>userpwd1</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> HR.LOGTABLE <span class="keyword">VALUES</span> (<span class="keyword">USER</span>, SYSDATE);</span><br><span class="line"><span class="comment">--执行方法插入数据库的为 testuser1 当前用户信息</span></span><br><span class="line"><span class="keyword">EXECUTE</span> HR.logexecution </span><br></pre></td></tr></table></figure>

<h3 id="5-8-PRAGMA-AUTONOMOUS-TRANSACTION"><a href="#5-8-PRAGMA-AUTONOMOUS-TRANSACTION" class="headerlink" title="5.8 PRAGMA AUTONOMOUS_TRANSACTION"></a>5.8 PRAGMA AUTONOMOUS_TRANSACTION</h3><p>ORACLE可以支持事务处理中的事务处理的概念。这种子事务处理可以完成它自己的工作，独立于父事务处理进行提交或者回滚．通过使用这种方法，开发者就能够实现这样的过程：无论父事务处理是提交还是回滚，它都可以成功执行。</p>
<p>自治事务从当前事务开始，在其自身的语境中执行。它们能独立地被提交或重新运行，而不影响正在运行的事务。正因为这样，它们成了编写错误日志表格的理想形式。在事务中检测到错误时，您可以在错误日志表格中插入一行并提交它，然后在不丢失这次插入的情况下回滚主事务。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建立过程，使用自动事务处理进行日志记录；</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> logtable;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> logtable(</span><br><span class="line">  Username varchar2(<span class="number">20</span>),</span><br><span class="line">  Dassate_time <span class="type">date</span>,</span><br><span class="line">  Mege varchar2(<span class="number">60</span>)</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> temp_table( N number );</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">PROCEDURE</span> log_message(p_message varchar2)</span><br><span class="line">  <span class="keyword">AS</span></span><br><span class="line">  PRAGMA AUTONOMOUS_TRANSACTION;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> logtable <span class="keyword">VALUES</span> ( <span class="keyword">user</span>, sysdate, p_message );</span><br><span class="line">  <span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="keyword">END</span> log_message;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  Log_message (<span class="string">&#x27;About to insert into temp_table&#x27;</span>);</span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> temp_table <span class="keyword">VALUES</span> (<span class="number">1</span>);</span><br><span class="line">  Log_message (<span class="string">&#x27;Rollback to insert into temp_table&#x27;</span>);</span><br><span class="line">  <span class="keyword">ROLLBACK</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> logtable;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> temp_table;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 建立过程，没有使用自动事务处理进行日志记录； </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">PROCEDURE</span> log_message(p_message varchar2)</span><br><span class="line">  <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> logtable <span class="keyword">VALUES</span> ( <span class="keyword">user</span>, sysdate, p_message );</span><br><span class="line">  <span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="keyword">END</span> log_message;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  Log_message (<span class="string">&#x27;About to insert into temp_table&#x27;</span>);</span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> temp_table <span class="keyword">VALUES</span> (<span class="number">1</span>);</span><br><span class="line">  Log_message (<span class="string">&#x27;Rollback to insert into temp_table&#x27;</span>);</span><br><span class="line">  <span class="keyword">ROLLBACK</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> logtable;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> temp_table;</span><br></pre></td></tr></table></figure>

<h3 id="5-9-开发存储过程步骤"><a href="#5-9-开发存储过程步骤" class="headerlink" title="5.9 开发存储过程步骤"></a>5.9 开发存储过程步骤</h3><p>开发存储过程、函数、包及触发器的步骤如下：</p>
<ol>
<li>使用文字编辑处理软件编辑存储过程源码</li>
<li>在SQLPLUS或用调试工具将存储过程程序进行解释 START &#x2F;home&#x2F;stat.sql</li>
<li>调试源码直到正确：使用SHOW ERROR提示错误位置；使用 user_errors数据字典查看各存储过程的错误位置</li>
<li>授权执行权给相关的用户或角色：如果存储过程没有授权，只有建立者才可以运行。可以用GRANT命令来进行存储过程的运行授权。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- GRANT语法 </span></span><br><span class="line"><span class="keyword">GRANT</span> system_privilege <span class="operator">|</span> role</span><br><span class="line"><span class="keyword">TO</span> <span class="keyword">user</span> <span class="operator">|</span> role <span class="operator">|</span> PUBLIC [<span class="keyword">WITH</span> ADMIN OPTION]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">GRANT</span> object_privilege <span class="operator">|</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> schema.object</span><br><span class="line"><span class="keyword">TO</span> <span class="keyword">user</span> <span class="operator">|</span> role <span class="operator">|</span> PUBLIC [<span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION]</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 例子</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE PUBLIC SYNONYM dbms_job <span class="keyword">FOR</span> dbms_job</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">EXECUTE</span> <span class="keyword">ON</span> dbms_job <span class="keyword">TO</span> PUBLIC <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION</span><br></pre></td></tr></table></figure>

<h3 id="5-10-删除过程和函数"><a href="#5-10-删除过程和函数" class="headerlink" title="5.10 删除过程和函数"></a>5.10 删除过程和函数</h3><ol>
<li>删除过程 DROP PROCEDURE [user.Procudure_name];</li>
<li>删除函数 DROP FUNCTION [user.Function_name];</li>
</ol>
<h3 id="5-11-过程与函数的比较"><a href="#5-11-过程与函数的比较" class="headerlink" title="5.11 过程与函数的比较"></a>5.11 过程与函数的比较</h3><p><strong>过程与函数具有如下优点:</strong></p>
<ul>
<li>共同使用的代码可以只需要被编写和测试一次，而被需要该代码的任何应用程序（如：.NET、++、JAVA、VB程序，也可以是DLL库）调用。</li>
<li>这种集中编写、集中维护更新、大家共享（或重用）的方法，简化了应用程序的开发和维护，提高了效率与性能。</li>
<li>这种模块化的方法，使得可以将一个复杂的问题、大的程序逐步简化成几个简单的、小的程序部分，进行分别编写、调试。因此使程序的结构清晰、简单，也容易实现</li>
<li>可以在各个开发者之间提供处理数据、控制流程、提示信息等方面的一致性。</li>
<li>节省内存空间。它们以一种压缩的形式被存储在外存中，当被调用时才被放入内存进行处理。并且，如果多个用户要执行相同的过程或函数时，就只需要在内存中加载一个该过程或函数。</li>
<li>提高数据的安全性与完整性。通过把一些对数据的操作放到过程或函数中，就可以通过是否授予用户有执行该过程或的权限，来限制某些用户对数据进行这些操作。</li>
</ul>
<p><strong>过程与函数的相同功能有：</strong></p>
<ul>
<li>都使用IN模式的参数传入数据、OUT模式的参数返回数据。</li>
<li>输入参数都可以接受默认值，都可以传值或传引导。</li>
<li>调用时的实际参数都可以使用位置表示法、名称表示法或组合方法。</li>
<li>都有声明部分、执行部分和异常处理部分。</li>
<li>其管理过程都有创建、编译、授权、删除、显示依赖关系等。</li>
</ul>
<p><strong>使用过程与函数的原则：</strong></p>
<p>如果需要返回多个值和不返回值，就使用过程；<br>如果只需要返回一个值，就使用函数。<br>过程一般用于执行一个指定的动作，函数一般用于计算和返回一个值。<br>可以SQL语句内部（如表达式）调用函数来完成复杂的计算问题，但不能调用过程。所以这是函数的特色。</p>
<h3 id="6-1-触发器类型"><a href="#6-1-触发器类型" class="headerlink" title="6.1 触发器类型"></a>6.1 触发器类型</h3><p>触发器在数据库里以独立的对象存储，它与存储过程和函数不同的是，存储过程与函数需要用户显示调用才执行，而触发器是由一个事件来启动运行。即触发器是当某个事件发生时自动地隐式运行。并且，触发器不能接收参数。所以运行触发器就叫触发或点火（firing）。ORACLE事件指的是对数据库的表进行的INSERT、UPDATE及DELETE操作或对视图进行类似的操作。ORACLE将触发器的功能扩展到了触发ORACLE，如数据库的启动与关闭等。所以触发器常用来完成由数据库的完整性约束难以完成的复杂业务规则的约束，或用来监视对数据库的各种操作，实现审计的功能。</p>
<ul>
<li>DML触发器：在DML语句进行触发，可以在DML操作前或操作后进行触发，并且可以对每个行或语句操作上进行触发。</li>
<li>替代触发器：不能直接对由两个以上的表建立的视图进行操作。所以给出了替代触发器。它就是ORACLE专门为进行视图操作的一种处理方法。</li>
<li>系统触发器：可以在ORACLE数据库系统的事件中进行触发，如ORACLE系统的启动与关闭等。</li>
</ul>
<h3 id="6-2-触发器的组成"><a href="#6-2-触发器的组成" class="headerlink" title="6.2 触发器的组成"></a>6.2 触发器的组成</h3><p><strong>触发事件</strong>：引起触发器被触发的事件。 例如：DML语句(INSERT, UPDATE, DELETE语句对表或视图执行数据处理操作)、DDL语句（如CREATE、ALTER、DROP语句 在数据库中创建、修改、删除模式对象）、数据库系统事件（如系统启动或退出、异常错误）、用户事件（如登录或退出数据库）。<br><strong>触发时间</strong>：即该TRIGGER 是在触发事件发生之前（BEFORE）还是之后(AFTER)触发，也就是触发事件和该TRIGGER 的操作顺序。<br><strong>触发操作：</strong>即该TRIGGER 被触发之后的目的和意图，正是触发器本身要做的事情。 例如：PL&#x2F;SQL 块。<br><strong>触发对象：</strong>包括表、视图、模式、数据库。只有在这些对象上发生了符合触发条件的触发事件，才会执行触发操作。<br>触发条件：由WHEN子句指定一个逻辑表达式。只有当该表达式的值为TRUE时，遇到触发事件才会自动执行触发器，使其执行触发操作。<br><strong>触发频率：</strong>说明触发器内定义的动作被执行的次数。即语句级(STATEMENT)触发器和行级(ROW)触发器。</p>
<blockquote>
<p>语句级(STATEMENT)触发器：是指当某触发事件发生时，该触发器只执行一次；<br>行级(ROW)触发器：是指当某触发事件发生时，对受到该操作影响的每一行数据，触发器都单独执行一次。</p>
</blockquote>
<h3 id="6-3-触发器的注意点"><a href="#6-3-触发器的注意点" class="headerlink" title="6.3 触发器的注意点"></a>6.3 触发器的注意点</h3><ul>
<li>触发器不接受参数</li>
<li>一个表上最多可有12个触发器，但同一时间、同一事件、同一类型的触发器只能有一个。并各触发器之间不能有矛盾。</li>
<li>在一个表上的触发器越多，对在该表上的DML操作的性能影响就越大。</li>
<li>触发器最大为32KB。若确实需要，可以先建立过程，然后在触发器中用CALL语句进行调用。</li>
<li>在触发器的执行部分只能用DML语句（SELECT、INSERT、UPDATE、DELETE），不能使用DDL语句（CREATE、ALTER、DROP）。</li>
<li>触发器中不能包含事务控制语句(COMMIT，ROLLBACK，SAVEPOINT)。因为触发器是触发语句的一部分，触发语句被提交、回退时，触发器也被提交、回退了。</li>
<li>在触发器主体中调用的任何过程、函数，都不能使用事务控制语句。</li>
<li>在触发器主体中不能申明任何Long和blob变量。新值new和旧值old也不能向表中的任何long和blob列。</li>
<li>不同类型的触发器(如DML触发器、INSTEAD OF触发器、系统触发器)的语法格式和作用有较大区别。</li>
</ul>
<h3 id="6-4-创建触发器"><a href="#6-4-创建触发器" class="headerlink" title="6.4 创建触发器"></a>6.4 创建触发器</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">OR</span> REPLACE] <span class="keyword">TRIGGER</span> trigger_name</span><br><span class="line">&#123;BEFORE <span class="operator">|</span> AFTER &#125;</span><br><span class="line">&#123;<span class="keyword">INSERT</span> <span class="operator">|</span> <span class="keyword">DELETE</span> <span class="operator">|</span> <span class="keyword">UPDATE</span> [<span class="keyword">OF</span> <span class="keyword">column</span> [, <span class="keyword">column</span> …]]&#125;</span><br><span class="line">[<span class="keyword">OR</span> &#123;<span class="keyword">INSERT</span> <span class="operator">|</span> <span class="keyword">DELETE</span> <span class="operator">|</span> <span class="keyword">UPDATE</span> [<span class="keyword">OF</span> <span class="keyword">column</span> [, <span class="keyword">column</span> …]]&#125;...]</span><br><span class="line"><span class="keyword">ON</span> [schema.]table_name <span class="operator">|</span> [schema.]view_name</span><br><span class="line">[<span class="keyword">REFERENCING</span> &#123;<span class="keyword">OLD</span> [<span class="keyword">AS</span>] <span class="keyword">old</span> <span class="operator">|</span> <span class="keyword">NEW</span> [<span class="keyword">AS</span>] <span class="keyword">new</span><span class="operator">|</span> PARENT <span class="keyword">as</span> parent&#125;]</span><br><span class="line">[<span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> ]</span><br><span class="line">[<span class="keyword">WHEN</span> <span class="keyword">condition</span>]</span><br><span class="line">PL<span class="operator">/</span>SQL_BLOCK <span class="operator">|</span> <span class="keyword">CALL</span> procedure_name;</span><br></pre></td></tr></table></figure>

<ul>
<li>BEFORE 和 AFTER 指出触发器的触发时序分别为前触发和后触发方式，前触发是在执行触发事件之前触发当前所创建的触发器，后触发是在执行触发事件之后触发当前所创建的触发器。</li>
<li>FOR EACH ROW选项说明触发器为行触发器。</li>
<li>行触发器和语句触发器的区别表现在：行触发器要求当一个DML语句操走影响数据库中的多行数据时，对于其中的每个数据行，只要它们符合触发约束条件，均激活一次触发器；而语句触发器将整个语句操作作为触发事件，当它符合约束条件时，激活一次触发器。</li>
<li>当省略FOR EACH ROW选项时，BEFORE 和 AFTER 触发器为语句触发器，而 INSTEAD OF 触发器则只能为行触发器。</li>
<li>REFERENCING 子句说明相关名称，在行触发器的PL&#x2F;SQL块和 WHEN 子句中可以使用相关名称参照当前的新、旧列值，默认的相关名称分别为 OLD 和 NEW 。触发器的PL&#x2F;SQL块中应用相关名称时，必须在它们之前加冒号:，但在 WHEN 子句中则不能加冒号:。</li>
<li>WHEN 子句说明触发约束条件。 Condition 为一个逻辑表达时，其中必须包含相关名称，而不能包含查询语句，也不能调用PL&#x2F;SQL 函数。WHEN 子句指定的触发约束条件只能用在 BEFORE 和 AFTER 行触发器中，不能用在 INSTEAD OF 行触发器和其它类型的触发器中。</li>
<li>当一个基表被修改( <code>INSERT</code> ,  <code>UPDATE</code>,  <code>DELETE</code> )时要执行的存储过程，执行时根据其所依附的基表改动而自动触发，因此与应用程序无关，用数据库触发器可以保证数据的一致性和完整性。</li>
</ul>
<p>每张表最多可建立12 种类型的触发器，它们是:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">BEFORE <span class="keyword">INSERT</span></span><br><span class="line">BEFORE <span class="keyword">INSERT</span> <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">AFTER <span class="keyword">INSERT</span></span><br><span class="line">AFTER <span class="keyword">INSERT</span> <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"> </span><br><span class="line">BEFORE <span class="keyword">UPDATE</span></span><br><span class="line">BEFORE <span class="keyword">UPDATE</span> <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">AFTER <span class="keyword">UPDATE</span></span><br><span class="line">AFTER <span class="keyword">UPDATE</span> <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"> </span><br><span class="line">BEFORE <span class="keyword">DELETE</span></span><br><span class="line">BEFORE <span class="keyword">DELETE</span> <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">AFTER <span class="keyword">DELETE</span></span><br><span class="line">AFTER <span class="keyword">DELETE</span> <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> </span><br></pre></td></tr></table></figure>

<h3 id="6-5-触发器的触发次序"><a href="#6-5-触发器的触发次序" class="headerlink" title="6.5 触发器的触发次序"></a>6.5 触发器的触发次序</h3><ol>
<li>执行 BEFORE语句级触发器;</li>
<li>对与受语句影响的每一行<ol>
<li>执行 BEFORE行级触发器</li>
<li>执行 DML语句</li>
<li>执行 AFTER行级触发器</li>
</ol>
</li>
<li>执行 AFTER语句级触发器</li>
</ol>
<h3 id="6-6-创建DML触发器"><a href="#6-6-创建DML触发器" class="headerlink" title="6.6 创建DML触发器"></a>6.6 创建DML触发器</h3><p>触发器名与过程名和包的名字不一样，它是单独的名字空间，因而触发器名可以和表或过程有相同的名字，但在一个模式中触发器名不能相同。</p>
<h4 id="DML触发器的限制"><a href="#DML触发器的限制" class="headerlink" title="DML触发器的限制"></a>DML触发器的限制</h4><ul>
<li>CREATE TRIGGER语句文本的字符长度不能超过32KB；</li>
<li>触发器体内的 SELECT 语句只能为 SELECT … INTO …结构，或者为定义游标所使用的 SELECT 语句。</li>
<li>触发器中不能使用数据库事务控制语句 COMMIT; ROLLBACK, SVAEPOINT 语句；</li>
<li>由触发器所调用的过程或函数也不能使用数据库事务控制语句；</li>
<li>触发器中不能使用 LONG, LONG RAW 类型；</li>
<li>触发器内可以参照 LOB 类型列的列值，但不能通过 : NEW 修改 LOB 列中的数据；</li>
</ul>
<h4 id="DML触发器基本要点"><a href="#DML触发器基本要点" class="headerlink" title="DML触发器基本要点"></a>DML触发器基本要点</h4><p><strong>触发时机</strong>：指定触发器的触发时间。如果指定为 BEFORE，则表示在执行DML操作之前触发，以便防止某些错误操作发生或实现某些业务规则；如果指定为AFTER，则表示在执行DML操作之后触发，以便记录该操作或做某些事后处理。<br><strong>触发事件</strong>：引起触发器被触发的事件，即DML操作（INSERT、UPDATE、DELETE）。既可以是单个触发事件，也可以是多个触发事件的组合（只能使用OR逻辑组合，不能使用AND逻辑组合）。<br><strong>条件谓词</strong>：当在触发器中包含多个触发事件（INSERT、UPDATE、DELETE）的组合时，为了分别针对不同的事件进行不同的处理，需要使用ORACLE提供的如下条件谓词。<br>1） INSERTING ：当触发事件是 INSERT 时，取值为TRUE，否则为FALSE<br>2） UPDATING [（column_1,column_2,…,column_x）]：当触发事件是 UPDATE 时，如果修改了 column_x 列，则取值为 TRUE，否则为 FALSE 。其中 column_x 是可选的<br>3） DELETING ：当触发事件是 DELETE 时，则取值为 TRUE ，否则为 FALSE<br><strong>解发对象</strong>：指定触发器是创建在哪个表、视图上。<br><strong>触发类型</strong>：是语句级还是行级触发器。<br><strong>触发条件</strong>：由WHEN子句指定一个逻辑表达式，只允许在行级触发器上指定触发条件，指定UPDATING后面的列的列表。</p>
<p>当触发器被触发时，要使用被插入、更新或删除的记录中的列值，有时要使用操作前、操作后列的值 :NEW 修饰符访问操作完成后列的值，:OLD 修饰符访问操作完成前列的值</p>
<table>
<thead>
<tr>
<th align="left">特性</th>
<th align="left">INSERT</th>
<th align="left">UPDATE</th>
<th align="left">DELETE</th>
</tr>
</thead>
<tbody><tr>
<td align="left">OLD</td>
<td align="left">NULL</td>
<td align="left">实际值</td>
<td align="left">实际值</td>
</tr>
<tr>
<td align="left">NEW</td>
<td align="left">实际值</td>
<td align="left">实际值</td>
<td align="left">NULL</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建立一个触发器, 当职工表 emp 表被删除一条记录时，把被删除记录写到职工表删除日志表中去</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp_his <span class="keyword">AS</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> EMP <span class="keyword">WHERE</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">TRIGGER</span> tr_del_emp</span><br><span class="line">   BEFORE <span class="keyword">DELETE</span> <span class="comment">--指定触发时机为删除操作前触发</span></span><br><span class="line">   <span class="keyword">ON</span> scott.emp</span><br><span class="line">   <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span>   <span class="comment">--说明创建的是行级触发器</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="comment">--将修改前数据插入到日志记录表 del_emp ,以供监督使用。</span></span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp_his(deptno , empno, ename , job ,mgr , sal , comm , hiredate )</span><br><span class="line">       <span class="keyword">VALUES</span>( :old.deptno, :old.empno, :old.ename , :old.job,:old.mgr, :old.sal, :old.comm, :old.hiredate );</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="keyword">DELETE</span> emp <span class="keyword">WHERE</span> empno<span class="operator">=</span><span class="number">7788</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> emp_his;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> del_emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 限制对Departments表修改（包括INSERT,DELETE,UPDATE）的时间范围，</span></span><br><span class="line"><span class="comment">-- 即不允许在非工作时间修改departments表。 </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">TRIGGER</span> tr_dept_time</span><br><span class="line">BEFORE <span class="keyword">INSERT</span> <span class="keyword">OR</span> <span class="keyword">DELETE</span> <span class="keyword">OR</span> <span class="keyword">UPDATE</span></span><br><span class="line"><span class="keyword">ON</span> departments</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"> IF (TO_CHAR(sysdate,<span class="string">&#x27;DAY&#x27;</span>) <span class="keyword">IN</span> (<span class="string">&#x27;星期六&#x27;</span>, <span class="string">&#x27;星期日&#x27;</span>)) <span class="keyword">OR</span> (TO_CHAR(sysdate, <span class="string">&#x27;HH24:MI&#x27;</span>) </span><br><span class="line">     <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="string">&#x27;08:30&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;18:00&#x27;</span>) <span class="keyword">THEN</span></span><br><span class="line">     RAISE_APPLICATION_ERROR(<span class="number">-20001</span>, <span class="string">&#x27;不是上班时间，不能修改departments表&#x27;</span>);</span><br><span class="line"> <span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 限定只对部门号为80的记录进行行触发器操作。 </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">TRIGGER</span> tr_emp_sal_comm</span><br><span class="line">BEFORE <span class="keyword">UPDATE</span> <span class="keyword">OF</span> salary, commission_pct</span><br><span class="line">       <span class="keyword">OR</span> <span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">ON</span> HR.employees</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">WHEN</span> (old.department_id <span class="operator">=</span> <span class="number">80</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"> <span class="keyword">CASE</span></span><br><span class="line">     <span class="keyword">WHEN</span> UPDATING (<span class="string">&#x27;salary&#x27;</span>) <span class="keyword">THEN</span></span><br><span class="line">        IF :NEW.salary <span class="operator">&lt;</span> :old.salary <span class="keyword">THEN</span></span><br><span class="line"> </span><br><span class="line">           RAISE_APPLICATION_ERROR(<span class="number">-20001</span>, <span class="string">&#x27;部门80的人员的工资不能降&#x27;</span>);</span><br><span class="line">        <span class="keyword">END</span> IF;</span><br><span class="line">     <span class="keyword">WHEN</span> UPDATING (<span class="string">&#x27;commission_pct&#x27;</span>) <span class="keyword">THEN</span></span><br><span class="line"> </span><br><span class="line">        IF :NEW.commission_pct <span class="operator">&lt;</span> :old.commission_pct <span class="keyword">THEN</span></span><br><span class="line">           RAISE_APPLICATION_ERROR(<span class="number">-20002</span>, <span class="string">&#x27;部门80的人员的奖金不能降&#x27;</span>);</span><br><span class="line">        <span class="keyword">END</span> IF;</span><br><span class="line">     <span class="keyword">WHEN</span> DELETING <span class="keyword">THEN</span></span><br><span class="line">          RAISE_APPLICATION_ERROR(<span class="number">-20003</span>, <span class="string">&#x27;不能删除部门80的人员记录&#x27;</span>);</span><br><span class="line">     <span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 利用行触发器实现级联更新。在修改了主表regions中的region_id之后（AFTER），</span></span><br><span class="line"><span class="comment">-- 级联的、自动的更新子表countries表中原来在该地区的国家的region_id。 </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">TRIGGER</span> tr_reg_cou</span><br><span class="line">AFTER <span class="keyword">update</span> <span class="keyword">OF</span> region_id</span><br><span class="line"><span class="keyword">ON</span> regions</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"> DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;旧的region_id值是&#x27;</span><span class="operator">||</span>:old.region_id</span><br><span class="line">                  <span class="operator">||</span><span class="string">&#x27;、新的region_id值是&#x27;</span><span class="operator">||</span>:new.region_id);</span><br><span class="line"> <span class="keyword">UPDATE</span> countries <span class="keyword">SET</span> region_id <span class="operator">=</span> :new.region_id</span><br><span class="line"> <span class="keyword">WHERE</span> region_id <span class="operator">=</span> :old.region_id;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在触发器中调用过程。 </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">PROCEDURE</span> add_job_history</span><br><span class="line"> ( p_emp_id          job_history.employee_id<span class="operator">%</span>type</span><br><span class="line">   , p_start_date      job_history.start_date<span class="operator">%</span>type</span><br><span class="line">  , p_end_date        job_history.end_date<span class="operator">%</span>type</span><br><span class="line">   , p_job_id          job_history.job_id<span class="operator">%</span>type</span><br><span class="line">   , p_department_id   job_history.department_id<span class="operator">%</span>type</span><br><span class="line">   )</span><br><span class="line"><span class="keyword">IS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> job_history (employee_id, start_date, end_date,</span><br><span class="line">                           job_id, department_id)</span><br><span class="line">  <span class="keyword">VALUES</span>(p_emp_id, p_start_date, p_end_date, p_job_id, p_department_id);</span><br><span class="line"><span class="keyword">END</span> add_job_history;</span><br><span class="line"> </span><br><span class="line"><span class="comment">--创建触发器调用存储过程...</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">TRIGGER</span> update_job_history</span><br><span class="line"> AFTER <span class="keyword">UPDATE</span> <span class="keyword">OF</span> job_id, department_id <span class="keyword">ON</span> employees</span><br><span class="line"> <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"> add_job_history(:old.employee_id, :old.hire_date, sysdate,</span><br><span class="line">                  :old.job_id, :old.department_id);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h3 id="6-7-创建替代-INSTEAD-OF-触发器"><a href="#6-7-创建替代-INSTEAD-OF-触发器" class="headerlink" title="6.7 创建替代(INSTEAD OF)触发器"></a>6.7 创建替代(INSTEAD OF)触发器</h3><p>创建替代触发器的一般语法是:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">OR</span> REPLACE] <span class="keyword">TRIGGER</span> trigger_name</span><br><span class="line">INSTEAD <span class="keyword">OF</span></span><br><span class="line">&#123;<span class="keyword">INSERT</span> <span class="operator">|</span> <span class="keyword">DELETE</span> <span class="operator">|</span> <span class="keyword">UPDATE</span> [<span class="keyword">OF</span> <span class="keyword">column</span> [, <span class="keyword">column</span> …]]&#125;</span><br><span class="line">[<span class="keyword">OR</span> &#123;<span class="keyword">INSERT</span> <span class="operator">|</span> <span class="keyword">DELETE</span> <span class="operator">|</span> <span class="keyword">UPDATE</span> [<span class="keyword">OF</span> <span class="keyword">column</span> [, <span class="keyword">column</span> …]]&#125;...]</span><br><span class="line"><span class="keyword">ON</span> [schema.] view_name <span class="comment">--只能定义在视图上</span></span><br><span class="line">[<span class="keyword">REFERENCING</span> &#123;<span class="keyword">OLD</span> [<span class="keyword">AS</span>] <span class="keyword">old</span> <span class="operator">|</span> <span class="keyword">NEW</span> [<span class="keyword">AS</span>] <span class="keyword">new</span><span class="operator">|</span> PARENT <span class="keyword">as</span> parent&#125;]</span><br><span class="line">[<span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> ] <span class="comment">--因为INSTEAD OF触发器只能在行级上触发,所以没有必要指定</span></span><br><span class="line">[<span class="keyword">WHEN</span> <span class="keyword">condition</span>]</span><br><span class="line">PL<span class="operator">/</span>SQL_block <span class="operator">|</span> <span class="keyword">CALL</span> procedure_name;</span><br></pre></td></tr></table></figure>

<ul>
<li>INSTEAD OF 选项使ORACLE激活触发器，而不执行触发事件。只能对视图和对象视图建立INSTEAD OF触发器，而不能对表、模式和数据库建立INSTEAD OF 触发器。</li>
<li>FOR EACH ROW选项说明触发器为行触发器。行触发器和语句触发器的区别表现在：行触发器要求当一个DML语句操走影响数据库中的多行数据时，对于其中的每个数据行，只要它们符合触发约束条件，均激活一次触发器；而语句触发器将整个语句操作作为触发事件，当它符合约束条件时，激活一次触发器。当省略 FOR EACH ROW 选项时，BEFORE 和AFTER 触发器为语句触发器，而INSTEAD OF 触发器则为行触发器。</li>
<li>REFERENCING 子句说明相关名称，在行触发器的PL&#x2F;SQL块和 WHEN 子句中可以使用相关名称参照当前的新、旧列值，默认的相关名称分别为 OLD 和 NEW 。触发器的PL&#x2F;SQL块中应用相关名称时，必须在它们之前加冒号:，但在WHEN子句中则不能加冒号:</li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>PL/SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS8的基本配置</title>
    <url>/2023/12/12/centos_yum/</url>
    <content><![CDATA[<h3 id="CLI指令"><a href="#CLI指令" class="headerlink" title="CLI指令"></a>CLI指令</h3><p>指令的基本含义为-设置容器名称-映射宿主机端口-挂载文件夹-设置root权限-拉取镜像名称</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -itd --name centOS8 -p 7022:22 -p 7080:80 -p 7443:443 -p 7088:8080 -v /root/cengos8:/root --privileged=<span class="literal">true</span> centos:centos8</span><br></pre></td></tr></table></figure>

<h3 id="CentOS8的基本配置"><a href="#CentOS8的基本配置" class="headerlink" title="CentOS8的基本配置"></a>CentOS8的基本配置</h3><p>使用docker安装的CentOS容器一般会遇到两个问题，一个是yum源异常导致无法安装各类软件，一个是不知道root密码，不能直接ssh连接到系统中。<br>这个时候可以先通过docker进入到CentOS的命令行，修改root密码。</p>
<h4 id="进入容器的bash"><a href="#进入容器的bash" class="headerlink" title="进入容器的bash"></a>进入容器的bash</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it centOS8 /bin/bash</span><br></pre></td></tr></table></figure>

<h4 id="修改root密码"><a href="#修改root密码" class="headerlink" title="修改root密码"></a>修改root密码</h4><p>通常使用passwd指令来直接修改登录账号的密码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">whoami</span></span><br><span class="line">passwd</span><br></pre></td></tr></table></figure>

<p>但是很不幸的一点，这个系统上可能passwd都没有 <strong>command not found: passwd</strong></p>
<h4 id="更新yum源"><a href="#更新yum源" class="headerlink" title="更新yum源"></a>更新yum源</h4><p>yum源配置文件在 <strong>&#x2F;etc&#x2F;yum.repos.d</strong> 目录下。一般需要更改的是 <strong>BaseOS.repo</strong>和<strong>AppStream.repo</strong>文件的内容。</p>
<p>这里还是推荐aliyum的源，<a href="http://mirrors.aliyun.com/repo/">源链接</a>，我试过了tencent的好多软件还是找不到。</p>
<p>备份原文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> CentOS-Linux-BaseOS.repo CentOS-Linux-BaseOS.repo.backup</span><br></pre></td></tr></table></figure>

<p>通过curl下载aliyun源的BaseOS.repo，可能wget用不起，我没试。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o CentOS-Linux-BaseOS.repo http://mirrors.aliyun.com/repo/Centos-8.repo</span><br></pre></td></tr></table></figure>

<p>所有的文件名都需要依照你的系统内的名字来更改，保持源文件名称一致很重要。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># CentOS-Base.repo</span><br><span class="line">#</span><br><span class="line"># The mirror system uses the connecting IP address of the client and the</span><br><span class="line"># update status of each mirror to pick mirrors that are updated to and</span><br><span class="line"># geographically close to the client.  You should use this for CentOS updates</span><br><span class="line"># unless you are manually picking other mirrors.</span><br><span class="line">#</span><br><span class="line"># If the mirrorlist= does not work for you, as a fall back you can try the </span><br><span class="line"># remarked out baseurl= line instead.</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"> </span><br><span class="line">[base]</span><br><span class="line">name=CentOS-$releasever - Base - mirrors.aliyun.com</span><br><span class="line">#failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/$releasever/BaseOS/$basearch/os/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos/$releasever/BaseOS/$basearch/os/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos/$releasever/BaseOS/$basearch/os/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official</span><br><span class="line"> </span><br><span class="line">#additional packages that may be useful</span><br><span class="line">[extras]</span><br><span class="line">name=CentOS-$releasever - Extras - mirrors.aliyun.com</span><br><span class="line">#failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/$releasever/extras/$basearch/os/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos/$releasever/extras/$basearch/os/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos/$releasever/extras/$basearch/os/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official</span><br><span class="line"> </span><br><span class="line">#additional packages that extend functionality of existing packages</span><br><span class="line">[centosplus]</span><br><span class="line">name=CentOS-$releasever - Plus - mirrors.aliyun.com</span><br><span class="line">#failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/$releasever/centosplus/$basearch/os/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos/$releasever/centosplus/$basearch/os/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos/$releasever/centosplus/$basearch/os/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official</span><br><span class="line"> </span><br><span class="line">[PowerTools]</span><br><span class="line">name=CentOS-$releasever - PowerTools - mirrors.aliyun.com</span><br><span class="line">#failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/$releasever/PowerTools/$basearch/os/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos/$releasever/PowerTools/$basearch/os/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos/$releasever/PowerTools/$basearch/os/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[AppStream]</span><br><span class="line">name=CentOS-$releasever - AppStream - mirrors.aliyun.com</span><br><span class="line">#failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/$releasever/AppStream/$basearch/os/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos/$releasever/AppStream/$basearch/os/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos/$releasever/AppStream/$basearch/os/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面是<strong>BaseOS.repo</strong>的文件内容。然后在更新一下<strong>AppStream.repo</strong>，把原有的配置全部注释，在将<strong>BaseOS.repo</strong>中[AppStream]相关的内容粘贴过去。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># CentOS-Linux-AppStream.repo</span><br><span class="line">#</span><br><span class="line"># The mirrorlist system uses the connecting IP address of the client and the</span><br><span class="line"># update status of each mirror to pick current mirrors that are geographically</span><br><span class="line"># close to the client.  You should use this for CentOS updates unless you are</span><br><span class="line"># manually picking other mirrors.</span><br><span class="line">#</span><br><span class="line"># If the mirrorlist does not work for you, you can try the commented out</span><br><span class="line"># baseurl line instead.</span><br><span class="line"></span><br><span class="line">#[appstream]</span><br><span class="line">#name=CentOS Linux $releasever - AppStream</span><br><span class="line">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=AppStream&amp;infra=$infra</span><br><span class="line">#baseurl=http://mirror.centos.org/$contentdir/$releasever/AppStream/$basearch/os/</span><br><span class="line">#gpgcheck=1</span><br><span class="line">#enabled=1</span><br><span class="line">#gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial</span><br><span class="line"></span><br><span class="line">#tencent</span><br><span class="line">#[AppStream]</span><br><span class="line">#name=Qcloud centos AppStream - $basearch</span><br><span class="line">#baseurl=http://mirrors.cloud.tencent.com/centos/$releasever/AppStream/$basearch/os/</span><br><span class="line">#enabled=0</span><br><span class="line">#gpgcheck=1</span><br><span class="line">#gpgkey=http://mirrors.cloud.tencent.com/centos/RPM-GPG-KEY-CentOS-Official</span><br><span class="line"></span><br><span class="line">#aliyun</span><br><span class="line">[AppStream]</span><br><span class="line">name=CentOS-$releasever - AppStream - mirrors.aliyun.com</span><br><span class="line">#failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/$releasever/AppStream/$basearch/os/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos/$releasever/AppStream/$basearch/os/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos/$releasever/AppStream/$basearch/os/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official</span><br></pre></td></tr></table></figure>

<p>配置完成后清理和再建缓存，在安装epel-release源，基本就可以了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum clean</span><br><span class="line">yum mackcache</span><br><span class="line">yum install epel-release -y</span><br></pre></td></tr></table></figure>

<p>接下来就可以愉快的安装一些必要的软件了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install zsh git passwd screen nginx <span class="comment">#...</span></span><br></pre></td></tr></table></figure>

<p>最后更改root密码，非必要。</p>
<h4 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h4><p>写了一个脚本文件来一键执行更改源的操作。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;Hello World !&quot;</span></span></span><br><span class="line">base_str=&#x27;Base&#x27;</span><br><span class="line">app_stream_str=&#x27;AppStream&#x27;</span><br><span class="line">tmp=&#x27;appstream.tmp&#x27;</span><br><span class="line">repos_path=&#x27;/etc/yum.repos.d/&#x27;</span><br><span class="line">for file in $(ls $repos_path)</span><br><span class="line">do</span><br><span class="line">    #echo $file</span><br><span class="line">    #备份并替换Base文件</span><br><span class="line">    if [[ $file = *$find_str* ]]</span><br><span class="line">    then</span><br><span class="line">    #    echo $file&#x27;包含&#x27;$find_str</span><br><span class="line">        mv $repos_path$file $repos_path$file.backup &amp;&amp; curl  -s -o $repos_path$file http://mirrors.aliyun.com/repo/Centos-8.repo</span><br><span class="line">    fi</span><br><span class="line">    #修改AppStream文件,属于是比较取巧的方案了，不建议学习。</span><br><span class="line">    if [[ $file = *$app_stream_str* ]]</span><br><span class="line">    then</span><br><span class="line">    #    echo $file&#x27;包含&#x27;$app_stream_str</span><br><span class="line">        mv $repos_path$file $repos_path$file.backup &amp;&amp; touch $repos_path$file  &amp;&amp; curl -s -o $repos_path$tmp http://mirrors.aliyun.com/repo/Centos-8.repo &amp;&amp; sed -n &quot;54,61p&quot; $repos_path$tmp &gt;&gt; $repos_path$file &amp;&amp; rm $repos_path$tmp</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line">yum clean &amp;&amp; yum makecache &amp;&amp; yum install epel-release -y </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="安装zsh和配置oh-my-zsh-更改默认shell"><a href="#安装zsh和配置oh-my-zsh-更改默认shell" class="headerlink" title="安装zsh和配置oh-my-zsh,更改默认shell"></a>安装zsh和配置oh-my-zsh,更改默认shell</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装zsh</span></span><br><span class="line">yum install zsh git util-linux-user -y</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置oh-my-zsh，执行成功与否和网络有关，可以先ping一下 raw.githubusercontent.com</span></span><br><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">更改默认shell为zsh</span></span><br><span class="line">chsh -s /bin/zsh root</span><br></pre></td></tr></table></figure>

<p>当我执行到更改默认shell这一步的时候才发现这个系统启动时候的pid进程似乎有问题，不是使用的&#x2F;sbin&#x2F;init。pid(1)居然是bash而不是systemd，导致systemd相关指令包括systemctl和reboot指令都无法执行。网上查询了一下大都是关于WSL系统的问题，和我在docker下创建的centos关系也不大，最后怀疑是在docker run的时候没有指定启动进程为&#x2F;sbin&#x2F;init有关，之后验证。</p>
<h4 id="配置JAVA和NODEJS环境"><a href="#配置JAVA和NODEJS环境" class="headerlink" title="配置JAVA和NODEJS环境"></a>配置JAVA和NODEJS环境</h4><p>在zsh的指令环境下，他的profile文件为&#x2F;etc&#x2F;zprofile，通过cat &#x2F;etc&#x2F;zprofile我们可以看到其中的配置。</p>
<figure class="highlight profile"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"># /etc/zprofile and ~/.zprofile are run for login shells</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">PATH=<span class="string">&quot;$PATH:$HOME/bin&quot;</span></span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">_src_etc_profile(<span class="string"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    #  Make /etc/profile happier, and have possible ~/.zshenv options like</span><br><span class="line">    # NOMATCH ignored.</span><br><span class="line">    #</span><br><span class="line">    emulate -L ksh</span><br><span class="line"></span><br><span class="line">    # source profile</span><br><span class="line">    if [ -f /etc/profile ]; then</span><br><span class="line">            source /etc/profile</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line">_src_etc_profile</span><br><span class="line"></span><br><span class="line">unset -f _src_etc_profile</span><br></pre></td></tr></table></figure>

<p>以root账户为例，他已经帮我们把&#x2F;root&#x2F;bin文件夹加入到了PATH变量中，意味着我们可以直接把一些可执行文件放在&#x2F;root&#x2F;bin中就可以全局执行了。</p>
<p>创建&#x2F;root&#x2F;soft&#x2F;文件夹，统一管理自定义的软件。</p>
<p>下载并解压openjdk21 [网络链接随时会更新，已实时为准]</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">md /root/soft &amp;&amp; cd /root/soft</span><br><span class="line">culr -0 jdk21.tar.gz https://download.java.net/java/GA/jdk21.0.1/415e3f918a1f4062a0074a2794853d0d/12/GPL/openjdk-21.0.1_linux-x64_bin.tar.gz</span><br><span class="line">tar -zxvf jdk21.tar.gz #tar的解压并重命名怎么那么抽象</span><br><span class="line">mv openjdk-21.0.1_linux-x64_bin jdk21</span><br></pre></td></tr></table></figure>

<p>将你所要用到的java可执行文件，link到&#x2F;root&#x2F;bin文件夹中。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">link -s /root/soft/jdk21/bin/java /root/bin/java</span><br><span class="line">link -s /root/soft/jdk21/bin/javac /root/bin/javac</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>现在你可以执行 java –version 来查看版本信息了。</p>
<p>下载并解压node20 [网络链接随时会更新，已实时为准]</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /root/soft</span><br><span class="line">curl -o nodejs20.tar.xz https://nodejs.org/dist/v20.10.0/node-v20.10.0-linux-x64.tar.xz</span><br><span class="line">tar -xvf nodejs20.tar.xz</span><br><span class="line">mv node-v20.10.0-linux-x64 node20</span><br></pre></td></tr></table></figure>

<p>将你所要用到的node可执行文件，link到&#x2F;root&#x2F;bin文件夹中。由于node&#x2F;bin下本身存在着link，所以在不太熟悉link的情况下，我选择直接link了源文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s  /root/soft/node20/bin/node /root/bin/node</span><br><span class="line">ln -s  /root/soft/node20/lib/node_modules/corepack/dist/corepack.js /root/bin/corepack</span><br><span class="line">ln -s  /root/soft/node20/lib/node_modules/npm/bin/npx-cli.js /root/bin/npx</span><br><span class="line">ln -s  /root/soft/node20/lib/node_modules/npm/bin/npm-cli.js /root/bin/npm</span><br></pre></td></tr></table></figure>

<p>现在你可以在任意未知执行node，npm等指令了。指令版本与你安装的软件版本相同。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>yum</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库表结构调整(带数据)</title>
    <url>/2023/06/05/change-table/</url>
    <content><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>数据备份 -&gt; 表删除 -&gt; 表重建 -&gt; 数据迁移 -&gt; 备份删除</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TEMPORARY <span class="keyword">TABLE</span> temp1 <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  group_number,</span><br><span class="line">  q_key,</span><br><span class="line">  q_message,</span><br><span class="line">  sender_number</span><br><span class="line"><span class="keyword">FROM</span> t_customize_message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> t_customize_message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_customize_message (</span><br><span class="line">group_number <span class="type">NUMERIC</span>,</span><br><span class="line">q_key NVARCHAR,</span><br><span class="line">q_message NVARCHAR,</span><br><span class="line">sender_number <span class="type">NUMERIC</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_customize_message</span><br><span class="line"> (group_number,</span><br><span class="line">  q_key,</span><br><span class="line">  q_message,</span><br><span class="line">  sender_number)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  group_number,</span><br><span class="line">  q_key,</span><br><span class="line">  q_message,</span><br><span class="line">  sender_number</span><br><span class="line"><span class="keyword">FROM</span> temp1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> temp1;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>SQLite</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Blog的二次开发-上传图片</title>
    <url>/2023/08/02/express01/</url>
    <content><![CDATA[<p>之前想着的是使用狼宝来上传博客图片，后来规划了一下，发现这个不是很适合使用直觉，后来问了好多次ChatGpt发现上传图片都需要有一个后端的服务器，然后就接触到了express。在ChatGpt的真实帮助下用express写了一个上传图片的客户端。</p>
<h3 id="Express介绍"><a href="#Express介绍" class="headerlink" title="Express介绍"></a>Express介绍</h3><p>Express是一个流行的Node.js Web应用程序框架，它简化了构建Web应用程序和API的过程。它提供了一组简洁而灵活的功能，使得处理HTTP请求、路由、中间件和视图模板等任务变得更加容易。</p>
<p>下面是一些Express框架的主要特点：</p>
<ol>
<li><p><strong>快速而简洁</strong>: Express具有简洁的API设计，使得构建Web应用程序变得简单而直观。它提供了一些核心功能，同时也允许开发者根据需求进行扩展。</p>
</li>
<li><p><strong>路由</strong>: Express提供了灵活的路由功能，可以根据URL路径和HTTP方法来处理请求。通过定义路由，您可以将不同的请求映射到相应的处理程序函数，使代码结构清晰且易于维护。</p>
</li>
<li><p><strong>中间件</strong>: Express的中间件是处理HTTP请求的函数。它们可以执行各种任务，例如身份验证、日志记录、错误处理等。中间件函数可以按照顺序串联起来，形成一个处理请求的管道。这种模式使得处理请求的逻辑可以被分解为可重用的组件。</p>
</li>
<li><p><strong>模板引擎</strong>: Express支持各种模板引擎，例如EJS、Pug（以前称为Jade）、Handlebars等。这些模板引擎使得在服务器端生成动态HTML变得容易，可以方便地将数据注入到模板中，生成最终的响应。</p>
</li>
<li><p><strong>中间件和路由的生态系统</strong>: Express有一个庞大的中间件和路由插件生态系统，可以帮助开发者快速集成各种功能，如身份验证、会话管理、数据库连接等。这些插件可以大大提高开发效率，并且经过了广泛的测试和使用。</p>
</li>
</ol>
<p>总的来说，Express是一个轻量级、灵活且易于使用的框架，适用于构建各种类型的Web应用程序和API。它的简单性和丰富的生态系统使得开发者可以更快地构建高性能的Web应用程序，并以可维护的方式组织和扩展代码。</p>
<p>ChatGpt就是人类之光！！！</p>
<h3 id="初始化Express项目"><a href="#初始化Express项目" class="headerlink" title="初始化Express项目"></a>初始化Express项目</h3><p>这部分是跟着教程网站的一个引导走的<a href="https://developer.mozilla.org/zh-CN/docs/Learn/Server-side/Express_Nodejs/skeleton_website">站点</a></p>
<p>首先你的有nodejs，其次使用 npm install express-generator -g 安装生成器，接着在一个空目录下使用express –view&#x3D;pug ，然后使用npm install 安装依赖，最后在使用npm run start启动项目。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install express-generator -g</span><br><span class="line">mkdir express-tutorial &amp;&amp; cd express-tutorial</span><br><span class="line">express --view=pug</span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure>

<p>浏览器中导航至 <a href="http://localhost:3000/">http://localhost:3000/</a> ，就可以访问该应用。你应该可以看到：<br>[图片]</p>
<p>目录结构</p>
<pre>/express-locallibrary-tutorial
    app.js
    /bin
        www
    package.json
    /node_modules
        [约 4,500 个子文件夹和文件]
    /public
        /images
        /javascripts
        /stylesheets
            style.css
    /routes
        index.js
        users.js
    /views
        error.pug
        index.pug
        layout.pug
</pre>

<h3 id="开始自定义"><a href="#开始自定义" class="headerlink" title="开始自定义"></a>开始自定义</h3><h4 id="修改访问端口和地址"><a href="#修改访问端口和地址" class="headerlink" title="修改访问端口和地址"></a>修改访问端口和地址</h4><p>由于整体是在服务器上开发，所有我们测试的时候需要调整端口和开启外网访问。在app.js文件中加入如下的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">listen</span>(<span class="number">17777</span>,<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server started on port 17777&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="添加整体需要的模块-x2F-依赖"><a href="#添加整体需要的模块-x2F-依赖" class="headerlink" title="添加整体需要的模块&#x2F;依赖"></a>添加整体需要的模块&#x2F;依赖</h4><p>图片上传的功能需要js-yaml、multer、sharp<br>js-yaml是用来处理上传文件后将图片信息写到博客对应的配置文件里。<br>multer是上传文件的主要模块<br>sharp是图片处理模块，把所有的图片都转化为了webp格式放到指定的位置。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install js-yaml multer sharp --save</span><br></pre></td></tr></table></figure>

<h4 id="修改router-x2F-index-js-添加上传图片的路由和功能"><a href="#修改router-x2F-index-js-添加上传图片的路由和功能" class="headerlink" title="修改router&#x2F;index.js 添加上传图片的路由和功能"></a>修改router&#x2F;index.js 添加上传图片的路由和功能</h4><p>首先还是引入依赖<br>var sharp &#x3D; require(‘sharp’);<br>var multer &#x3D; require(‘multer’);<br>var fs &#x3D; require(‘fs’);<br>var yaml &#x3D; require(‘js-yaml’);</p>
<p>设置上载的目录<br>var uploadDest &#x3D; multer({dest: ‘.&#x2F;tmp&#x2F;‘}) &#x2F;&#x2F; 其实没什么屌用因为我有sharp</p>
<p>新增上载的路由<br>router.post(‘&#x2F;upload&#x2F;:path?’,uploadDest.single(‘image’), function(req, res, next) {});</p>
<p>重命名图片名字并图片格式转化<br>const filenameNew &#x3D; new Date().getTime();<br>sharp(req.file.path)<br>  .webp({ quality: 80 })<br>  .toFile(<code>/root/file/resources/img/$&#123;req.params.path&#125;/$&#123;filenameNew&#125;.webp</code>, (err, info) &#x3D;&gt; {<br>    if (err) {<br>      console.error(err);<br>      res.status(500).send(‘Internal Server Error’);<br>    } else {<br>      console.log(info);<br>      return res.send(‘Image uploaded and converted to webp’);<br>    }<br>});</p>
<p>修改博客配置文件<br>try {<br>  const yamlData &#x3D; fs.readFileSync(‘&#x2F;root&#x2F;code&#x2F;blog&#x2F;source&#x2F;_data&#x2F;album.yml’, ‘utf8’);<br>  const parsedData &#x3D; yaml.load(yamlData);<br>  &#x2F;&#x2F; 查找path_name为&#x2F;foodPhoto的数据<br>  parsedData.find(item &#x3D;&gt; item.path_name &#x3D;&#x3D;&#x3D; <code>/$&#123;req.params.path&#125;Photo</code>).album_list[0].image.push(<code>https://resources.kagerou.top/img/$&#123;req.params.path&#125;&#123;filenameNew&#125;.webp</code>);<br>  const updatedYamlData &#x3D; yaml.dump(parsedData);<br>  fs.writeFileSync(‘&#x2F;root&#x2F;code&#x2F;blog&#x2F;source&#x2F;_data&#x2F;album.yml’, updatedYamlData, ‘utf8’);<br>  &#x2F;&#x2F;更新blog<br>  return res.send(‘seccess’);<br>}catch (err) {<br>  console.error(‘无法读取YAML文件：’, err);<br>}</p>
<p>整体index.js代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> sharp = <span class="built_in">require</span>(<span class="string">&#x27;sharp&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> yaml = <span class="built_in">require</span>(<span class="string">&#x27;js-yaml&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uploadDest = <span class="title function_">multer</span>(&#123;<span class="attr">dest</span>: <span class="string">&#x27;./tmp/&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, &#123; <span class="attr">title</span>: <span class="string">&#x27;Express&#x27;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*upload single file  */</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/upload/:path?&#x27;</span>,uploadDest.<span class="title function_">single</span>(<span class="string">&#x27;image&#x27;</span>), <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> filenameNew = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">  <span class="title function_">sharp</span>(req.<span class="property">file</span>.<span class="property">path</span>)</span><br><span class="line">    .<span class="title function_">webp</span>(&#123; <span class="attr">quality</span>: <span class="number">80</span> &#125;)</span><br><span class="line">    .<span class="title function_">toFile</span>(<span class="string">`/root/file/resources/img/<span class="subst">$&#123;req.params.path&#125;</span>/<span class="subst">$&#123;filenameNew&#125;</span>.webp`</span>, <span class="function">(<span class="params">err, info</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Internal Server Error&#x27;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(info);</span><br><span class="line">        <span class="comment">//修改blog中的album.yml</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> yamlData = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;/root/code/blog/source/_data/album.yml&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">          <span class="keyword">const</span> parsedData = yaml.<span class="title function_">load</span>(yamlData);</span><br><span class="line">          <span class="comment">// 查找path_name为/foodPhoto的数据</span></span><br><span class="line">          parsedData.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">path_name</span> === <span class="string">`/<span class="subst">$&#123;req.params.path&#125;</span>Photo`</span>).<span class="property">album_list</span>[<span class="number">0</span>].<span class="property">image</span>.<span class="title function_">push</span>(<span class="string">`https://resources.kagerou.top/img/<span class="subst">$&#123;req.params.path&#125;</span>/<span class="subst">$&#123;filenameNew&#125;</span>.webp`</span>);</span><br><span class="line">          <span class="keyword">const</span> updatedYamlData = yaml.<span class="title function_">dump</span>(parsedData);  </span><br><span class="line">          fs.<span class="title function_">writeFileSync</span>(<span class="string">&#x27;/root/code/blog/source/_data/album.yml&#x27;</span>, updatedYamlData, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">          <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&#x27;Image uploaded and converted to webp&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (err) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;无法读取YAML文件：&#x27;</span>, err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&#x27;Image uploaded and converted to webp&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure>

<h4 id="多图片上传"><a href="#多图片上传" class="headerlink" title="多图片上传"></a>多图片上传</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/uploads/:path?&#x27;</span>,uploadDest.<span class="title function_">array</span>(<span class="string">&#x27;images&#x27;</span>,<span class="number">9</span>), <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  req.<span class="property">files</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> filenameNew = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">    <span class="title function_">sharp</span>(file.<span class="property">path</span>)</span><br><span class="line">      .<span class="title function_">webp</span>(&#123; <span class="attr">quality</span>: <span class="number">80</span> &#125;)</span><br><span class="line">      .<span class="title function_">toFile</span>(<span class="string">`/usr/qibao/upload/<span class="subst">$&#123;req.params.path&#125;</span>/<span class="subst">$&#123;filenameNew&#125;</span>.webp`</span>, <span class="function">(<span class="params">err, info</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">          res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Internal Server Error&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(info);</span><br><span class="line">          res.<span class="title function_">send</span>(<span class="string">&#x27;Images uploaded and converted to webp&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="启动express"><a href="#启动express" class="headerlink" title="启动express"></a>启动express</h4><p>使用npm run start启动就好了</p>
<h3 id="上传页面（还在新建文件夹）"><a href="#上传页面（还在新建文件夹）" class="headerlink" title="上传页面（还在新建文件夹）"></a>上传页面（还在新建文件夹）</h3>]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>express</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>BI开发记录</title>
    <url>/2023/06/13/fineBI/</url>
    <content><![CDATA[<h3 id="Oracle-SQL"><a href="#Oracle-SQL" class="headerlink" title="Oracle SQL"></a>Oracle SQL</h3><h4 id="join-using-name-等于-join-on-a-name-x3D-b-name"><a href="#join-using-name-等于-join-on-a-name-x3D-b-name" class="headerlink" title="join using(name) 等于 join on a.name &#x3D; b.name"></a>join using(name) 等于 join on a.name &#x3D; b.name</h4><p>当模式设计对联接表的列采用了相同的命名样式时，就可以使用 USING 语法来简化 ON 语法，格式为：USING(column_name)。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> employee_id,last_name,department_name</span><br><span class="line"><span class="keyword">from</span> employees <span class="keyword">join</span> departments</span><br><span class="line"><span class="keyword">using</span> (department_id)</span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> employee_id,last_name,department_name</span><br><span class="line"><span class="keyword">from</span> employees <span class="keyword">join</span> departments</span><br><span class="line"><span class="keyword">on</span> employees.department_id <span class="operator">=</span> departments.department_id</span><br></pre></td></tr></table></figure>

<h4 id="Alternative-quote-operator-代替引用运算符"><a href="#Alternative-quote-operator-代替引用运算符" class="headerlink" title="Alternative quote operator 代替引用运算符"></a>Alternative quote operator 代替引用运算符</h4><p>‘employee is ‘ || last_name &#x3D;&gt; q’[employee is ]’ || last_name  使用<strong>q’[]’</strong> 这样的组合来代替 <strong>‘’</strong> 。<br>具体的使用场景，为了避免在拼接的自定义字符串中再次出现 <strong>‘</strong> 符号导致无法查询语句无法被解释。<br>例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> department_name <span class="operator">||</span> <span class="string">&#x27; Department&#x27;</span>s Manager Id: <span class="string">&#x27; || manager_id</span></span><br><span class="line"><span class="string">from departments</span></span><br></pre></td></tr></table></figure>

<p>显然由于 Department’s Manager 中含有一个 ‘ 符号，导致这个语句会出错。<br>这是我们就可以使用<strong>代替引用运算符</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> department_name <span class="operator">||</span> q<span class="string">&#x27;[ Department&#x27;</span>s Manager Id: ]<span class="string">&#x27; || manager_id</span></span><br><span class="line"><span class="string">from departments</span></span><br></pre></td></tr></table></figure>

<h3 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h3><p>介绍：SQLite是一种轻量级的关系型数据库管理系统（DBMS），它是一个开源的、零配置的、自包含的、事务性的SQL数据库引擎。</p>
<h4 id="DDL操作"><a href="#DDL操作" class="headerlink" title="DDL操作"></a>DDL操作</h4><p>创建一个Employee表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [F_Employee]</span><br><span class="line">(</span><br><span class="line">    [EmployeeId] <span class="type">INTEGER</span>  <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    [EmployeeName] NVARCHAR(<span class="number">20</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    [Phone] NVARCHAR(<span class="number">24</span>),</span><br><span class="line">    [Email] NVARCHAR(<span class="number">60</span>),</span><br><span class="line">    [HireDate]  DATETIME,</span><br><span class="line">    [JobId] <span class="type">INTEGER</span>,</span><br><span class="line">    [Salary] <span class="type">REAL</span>, <span class="comment">--单精度浮点</span></span><br><span class="line">    [CommissionPCT] <span class="type">INTEGER</span>,</span><br><span class="line">    [ManagerId] <span class="type">INTEGER</span>,</span><br><span class="line">    [DepartmentId] <span class="type">INTEGER</span>,</span><br><span class="line">    [CreateUser] NVARCHAR(<span class="number">24</span>),</span><br><span class="line">    [CreateTime] NVARCHAR(<span class="number">24</span>),</span><br><span class="line">    [UpdateUser] NVARCHAR(<span class="number">24</span>),</span><br><span class="line">    [UpdateTime] NVARCHAR(<span class="number">24</span>),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> [PK_Employee] <span class="keyword">PRIMARY</span> KEY  ([EmployeeId])</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="FineBI"><a href="#FineBI" class="headerlink" title="FineBI"></a>FineBI</h3><h4 id="获取-年-x2F-月-时间区间的天数"><a href="#获取-年-x2F-月-时间区间的天数" class="headerlink" title="获取[年&#x2F;月]时间区间的天数"></a>获取[年&#x2F;月]时间区间的天数</h4><p>获取开始时间到结束时间之间的天数，开始时间和结束时间之间为[年&#x2F;月]<br><code>DAYVALUE(MONTHDELTA($&#123;结束时间&#125;,1)) - DAYVALUE($&#123;开始时间&#125;)</code></p>
<p><code>DATEIF($&#123;结束时间&#125;,$&#123;开始时间&#125;,&#39;d&#39;)</code><br>持续更新</p>
<h3 id="FineReport"><a href="#FineReport" class="headerlink" title="FineReport"></a>FineReport</h3><h4 id="动态SQL参数"><a href="#动态SQL参数" class="headerlink" title="动态SQL参数"></a>动态SQL参数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">where</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line">$&#123;if(len(NY)<span class="operator">=</span><span class="operator">=</span><span class="number">0</span>,&quot;&quot;,&quot;and NY like &#x27;&quot;<span class="operator">+</span>NY<span class="operator">+</span>&quot;&#x27;&quot;)&#125;</span><br></pre></td></tr></table></figure>

<h4 id="导出模板按钮"><a href="#导出模板按钮" class="headerlink" title="导出模板按钮"></a>导出模板按钮</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> url=<span class="string">&quot;$&#123;servletURL&#125;?viewlet=./test.cpt&quot;</span></span><br><span class="line"><span class="keyword">var</span> config = &#123;  </span><br><span class="line">            <span class="comment">//配置默认查询参数，</span></span><br><span class="line">            <span class="attr">ny</span>:<span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">form</span>.<span class="title function_">getWidgetByName</span>(<span class="string">&quot;ny&quot;</span>).<span class="title function_">getValue</span>(),</span><br><span class="line">            <span class="attr">format</span>:<span class="string">&quot;excel&quot;</span>,</span><br><span class="line">            <span class="attr">extype</span>:<span class="string">&quot;simple&quot;</span></span><br><span class="line">              &#125;  </span><br><span class="line"><span class="variable constant_">FR</span>.<span class="title function_">doHyperlinkByPost</span>(url,config)</span><br></pre></td></tr></table></figure>

<h4 id="校验并提交按钮"><a href="#校验并提交按钮" class="headerlink" title="校验并提交按钮"></a>校验并提交按钮</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">_g</span>().<span class="title function_">verifyAndWriteReport</span>();</span><br><span class="line"><span class="comment">//校验并提交</span></span><br></pre></td></tr></table></figure>

<h4 id="Excel自定义导入按钮"><a href="#Excel自定义导入按钮" class="headerlink" title="Excel自定义导入按钮"></a>Excel自定义导入按钮</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">_g</span>().importExcel(<span class="string">&quot;customize&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="删除按钮保留最后一行"><a href="#删除按钮保留最后一行" class="headerlink" title="删除按钮保留最后一行"></a>删除按钮保留最后一行</h4><p>删除按钮控件名称为 ‘del’ , 可见设置为 true，可用设置为 false</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置最后一行删除键不可用</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;del&#x27;</span>];</span><br><span class="line">     <span class="comment">//定义需要执行事件的删除行按钮名称数组，如有多组则写法为[&#x27;sc1&#x27;,&#x27;sc2&#x27;]</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> kj = $(<span class="string">&#x27;[widgetname=&quot;&#x27;</span> + arr[i].<span class="title function_">toUpperCase</span>() + <span class="string">&#x27;&quot;]:visible&#x27;</span>);</span><br><span class="line">  <span class="comment">//获取页面上可见的删除行按钮元素</span></span><br><span class="line">  <span class="keyword">var</span> del = <span class="title function_">_g</span>().<span class="title function_">getWidgetsByName</span>(arr[i].<span class="title function_">toUpperCase</span>());</span><br><span class="line">  <span class="comment">//根据名字获取删除行按钮</span></span><br><span class="line">  <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; del.<span class="property">length</span>; j++) &#123;</span><br><span class="line">    kj.<span class="property">length</span> &lt;= <span class="number">1</span> ? del[j].<span class="title function_">setEnable</span>(<span class="literal">false</span>) : del[j].<span class="title function_">setEnable</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//当控件只剩1个时，禁用控件，否则遍历启用所有控件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="修改默认按钮的背景色"><a href="#修改默认按钮的背景色" class="headerlink" title="修改默认按钮的背景色"></a>修改默认按钮的背景色</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改默认按钮的背景色</span></span><br><span class="line">$(<span class="string">&#x27;.fr-btn-up&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;background&#x27;</span>,<span class="string">&#x27;#fff0&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="部分美化（一）"><a href="#部分美化（一）" class="headerlink" title="部分美化（一）"></a>部分美化（一）</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//隐藏查询框折叠按钮</span></span><br><span class="line">$(<span class="string">&#x27;.parameter-container-collapseimg-up&#x27;</span>).<span class="title function_">removeClass</span>(<span class="string">&#x27;parameter-container-collapseimg-up&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//隐藏选中控件边框</span></span><br><span class="line">$(<span class="string">&#x27;.fDright&#x27;</span>).<span class="title function_">removeClass</span>(<span class="string">&#x27;fDright&#x27;</span>); </span><br><span class="line">$(<span class="string">&#x27;.fDbottom&#x27;</span>).<span class="title function_">removeClass</span>(<span class="string">&#x27;fDbottom&#x27;</span>); </span><br><span class="line">$(<span class="string">&#x27;.fDtop&#x27;</span>).<span class="title function_">removeClass</span>(<span class="string">&#x27;fDtop&#x27;</span>); </span><br><span class="line">$(<span class="string">&#x27;.fDleft&#x27;</span>).<span class="title function_">removeClass</span>(<span class="string">&#x27;fDleft&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改选中控件边框颜色</span></span><br><span class="line"><span class="comment">//$(&#x27;.fDright&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;); </span></span><br><span class="line"><span class="comment">//$(&#x27;.fDbottom&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);</span></span><br><span class="line"><span class="comment">//$(&#x27;.fDtop&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;); </span></span><br><span class="line"><span class="comment">//$(&#x27;.fDleft&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//修改编辑控件时，聚焦的边框颜色</span></span><br><span class="line">$(<span class="string">&#x27;.x-editor&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;border&#x27;</span>,<span class="string">&#x27;2px solid #36d12a&#x27;</span>);</span><br><span class="line">$(<span class="string">&#x27;.fr-texteditor&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;border&#x27;</span>,<span class="string">&#x27;2px solid #36d12a&#x27;</span>);</span><br><span class="line">$(<span class="string">&#x27;.editor-transparent&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;border&#x27;</span>,<span class="string">&#x27;2px solid #36d12a&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="配置单行编辑结束后的更新时间和更新人"><a href="#配置单行编辑结束后的更新时间和更新人" class="headerlink" title="配置单行编辑结束后的更新时间和更新人"></a>配置单行编辑结束后的更新时间和更新人</h4><p>通过控件“编辑结束”事件，配置setCellValue()函数来更改指定单元格的值</p>
<p>user_name &#x3D; $fine_username<br>update_time &#x3D; FORMAT(NOW(),”yyyy-MM-dd HH:mm:ss”)<br>user_cell &#x3D; “更新人所在的单元格列号” + ROW()<br>update_time &#x3D; “更新时间所在的单元格列号” + ROW()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">_g</span>().<span class="title function_">setCellValue</span>(user_cell, user_name);</span><br><span class="line"><span class="title function_">_g</span>().<span class="title function_">setCellValue</span>(time_cell, update_time);</span><br></pre></td></tr></table></figure>

<h4 id="round-函数计算精度丢失问题"><a href="#round-函数计算精度丢失问题" class="headerlink" title="round()函数计算精度丢失问题"></a>round()函数计算精度丢失问题</h4><p>通常在使用round函数的时候会依照参数保留小数位的值并自动四舍五入，但是由于float的精度问题，可能会导致round函数的功能失效，此时在fr中的round()有第三个参数来控制是否过量计算的问题。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">round</span>(<span class="number">9999.999</span> / <span class="number">9999.99999</span>,<span class="number">2</span>,<span class="literal">true</span>) * <span class="number">100</span>; <span class="comment">// 100</span></span><br><span class="line"><span class="title function_">round</span>(<span class="number">9999.999</span> / <span class="number">9999.99999</span>,<span class="number">2</span>,<span class="literal">false</span>) * <span class="number">100</span>; <span class="comment">// 99.9999...</span></span><br></pre></td></tr></table></figure>

<p>在JS的Math.round()函数中不存在此项问题。</p>
<h4 id="气泡图分数据类型显示颜色及大小"><a href="#气泡图分数据类型显示颜色及大小" class="headerlink" title="气泡图分数据类型显示颜色及大小"></a>气泡图分数据类型显示颜色及大小</h4><p><a href="https://bbs.fanruan.com/wenda/question/30543.html">原问题链接</a></p>
<blockquote>
<p>各位大佬，我想问一下，如果我在制作帆软报表的时候，我有两个维度的内容需要呈现，第一个维度是：每个地区的销售人员数量。第二个维度是：每个地区的销售额。这个怎么在地图上显示。销售人员越多。气泡颜色越深，销售额越多，气泡越大。谢谢各位大佬。</p>
</blockquote>
<p>表模型：</p>
<table>
<thead>
<tr>
<th align="left">地区</th>
<th align="center">销售人数</th>
<th align="center">销售额</th>
</tr>
</thead>
<tbody><tr>
<td align="left">A</td>
<td align="center">18</td>
<td align="center">300</td>
</tr>
<tr>
<td align="left">B</td>
<td align="center">20</td>
<td align="center">400</td>
</tr>
<tr>
<td align="left">C</td>
<td align="center">22</td>
<td align="center">500</td>
</tr>
</tbody></table>
<p>通常在设置气泡图数据配置的时候，地区为系列，x为销售人数，y为销售额，大小为销售额,在条件显示中设置条件属性，来配置不同的x&#x2F;销售人数,y&#x2F;销售额，气泡显示的颜色及大小。</p>
<p><strong>展开说一下</strong>在点地图中的气泡图如何分数据类型显示颜色及大小</p>
<p>相较于点地图中，数据配置没有x&#x2F;y，代替的是区域名匹配或者是经纬度坐标。<br>解决方案就是表模型新增列：颜色分类，将不同的人数分组成不同的颜色</p>
<table>
<thead>
<tr>
<th align="left">地区</th>
<th align="center">销售人数</th>
<th align="center">销售额</th>
<th align="center">颜色分类</th>
</tr>
</thead>
<tbody><tr>
<td align="left">A</td>
<td align="center">18</td>
<td align="center">300</td>
<td align="center">red</td>
</tr>
<tr>
<td align="left">B</td>
<td align="center">20</td>
<td align="center">400</td>
<td align="center">green</td>
</tr>
<tr>
<td align="left">C</td>
<td align="center">22</td>
<td align="center">500</td>
<td align="center">blue</td>
</tr>
</tbody></table>
<p>使用<strong>单元格数据</strong>  第一列的<strong>系列名</strong>为 <em>D2</em> 单元格 <strong>值</strong>为 <em>C2</em> 单元格，在条件显示中设置条件属性，配置<strong>系列名称</strong> 等于 “red” 时设置气泡为红色，此时气泡的大小就会根据销售额的值变化，颜色会根据颜色分类的每一列的值为变化。</p>
<p>缺点：颜色无法根据销售人数做到无极更变，而是类似于区域显示一样的分组颜色显示。若需要提示点时，需要自定义提示内容来更变系列名显示为red值的问题。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>BI</tag>
        <tag>帆软</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS的Firewall基本使用</title>
    <url>/2023/05/09/firewall/</url>
    <content><![CDATA[<h3 id="启动-x2F-关闭-x2F-重启-x2F-状态"><a href="#启动-x2F-关闭-x2F-重启-x2F-状态" class="headerlink" title="启动&#x2F;关闭&#x2F;重启&#x2F;状态"></a>启动&#x2F;关闭&#x2F;重启&#x2F;状态</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start/stop/restart/status firewalld.service</span><br></pre></td></tr></table></figure>

<h3 id="查看已开启的端口-默认为public区域"><a href="#查看已开启的端口-默认为public区域" class="headerlink" title="查看已开启的端口(默认为public区域)"></a>查看已开启的端口(默认为public区域)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-port</span><br></pre></td></tr></table></figure>

<h3 id="查看已开启的服务"><a href="#查看已开启的服务" class="headerlink" title="查看已开启的服务"></a>查看已开启的服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-service</span><br></pre></td></tr></table></figure>

<h3 id="开启指定服务-需要已知的服务名字"><a href="#开启指定服务-需要已知的服务名字" class="headerlink" title="开启指定服务(需要已知的服务名字)"></a>开启指定服务(需要已知的服务名字)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-service=http</span><br></pre></td></tr></table></figure>

<h3 id="查看当前可用的服务名"><a href="#查看当前可用的服务名" class="headerlink" title="查看当前可用的服务名"></a>查看当前可用的服务名</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --get-services</span><br></pre></td></tr></table></figure>

<h3 id="开启自定义端口"><a href="#开启自定义端口" class="headerlink" title="开启自定义端口"></a>开启自定义端口</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=9800/tcp --permanent</span><br></pre></td></tr></table></figure>

<h3 id="开启自定义服务-端口"><a href="#开启自定义服务-端口" class="headerlink" title="开启自定义服务+端口"></a>开启自定义服务+端口</h3><p>使用配置文件的方式，创建一个自定义服务。文件位置&#x2F;usr&#x2F;lib&#x2F;firewalld&#x2F;services&#x2F;</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">short</span>&gt;</span>arai2-service<span class="tag">&lt;/<span class="name">short</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">description</span>&gt;</span>This is just an example arai2. use TCP 9800 network port.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">&quot;tcp&quot;</span> <span class="attr">port</span>=<span class="string">&quot;9800&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写好之后重载一下配置文件，再启用对应的服务名称</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br><span class="line">firewall-cmd --permanent --zone=public --add-service=arai2-service</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Firewall</tag>
      </tags>
  </entry>
  <entry>
    <title>帆软交付认证模拟题FR1101</title>
    <url>/2023/09/21/fr1101/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>题目要求</p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1101-0.webp" alt="题目要求"><br>模板要求</p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1101-1.webp" alt="模板要求"></p>
<h3 id="处理数据集"><a href="#处理数据集" class="headerlink" title="处理数据集"></a>处理数据集</h3><p>通过分析题目，发现需要三个数据集，分别是：<br>    - 产品类别<br>    - 产品名称<br>    - 主数据</p>
<h4 id="产品类别"><a href="#产品类别" class="headerlink" title="产品类别"></a>产品类别</h4><p>产品类别数据来源于产品类别表，为顶层查询，无参数影响，可以直接查询，</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> x.类别名称,x.类别ID</span><br><span class="line"><span class="keyword">FROM</span> 产品类别 x</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h4 id="产品名称"><a href="#产品名称" class="headerlink" title="产品名称"></a>产品名称</h4><p>产品名称数据来源于产品表，为一级查询，查询条件受产品类别影响，需要使用产品类别参数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT x.产品名称</span><br><span class="line">FROM 产品 x</span><br><span class="line">WHERE 1 = 1</span><br><span class="line">$&#123;if(len(com_prod_type)==0,&quot;&quot;,&quot;and x.类别ID in (&#x27;&quot;+com_prod_type+&quot;&#x27;)&quot;)&#125;</span><br></pre></td></tr></table></figure>

<p>其中<strong>com_prod_type</strong>为产品类别的实际值：<strong>类别ID</strong></p>
<h3 id="主数据集"><a href="#主数据集" class="headerlink" title="主数据集"></a>主数据集</h3><p>主数据集主要统计销售数据量，即查询出个产品的销售数量即可。同时主数据集受<strong>产品类别</strong>，<strong>产品名称</strong>查询影响。由于不允许在单元格上计算，所以在数据集中直接连表查询出结果并汇总计算。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(x.数量) &quot;总数量&quot;,y.产品名称 ,z.类别名称 </span><br><span class="line"><span class="keyword">FROM</span> 订单明细 x,产品 y,产品类别 z</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">AND</span> X.产品ID <span class="operator">=</span> Y.产品ID </span><br><span class="line"><span class="keyword">AND</span> Y.类别ID <span class="operator">=</span> Z.类别ID </span><br><span class="line">$&#123;if(len(com_prod_type)<span class="operator">=</span><span class="operator">=</span><span class="number">0</span>,&quot;&quot;,&quot;and y.类别ID in (&#x27;&quot;<span class="operator">+</span>com_prod_type<span class="operator">+</span>&quot;&#x27;)&quot;)&#125;</span><br><span class="line">$&#123;if(len(com_prod_name)<span class="operator">=</span><span class="operator">=</span><span class="number">0</span>,&quot;&quot;,&quot;and y.产品名称 in (&#x27;&quot;<span class="operator">+</span>com_prod_name<span class="operator">+</span>&quot;&#x27;)&quot;)&#125;</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> y.产品名称 ,z.类别名称 </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> z.类别ID ,y.产品ID </span><br></pre></td></tr></table></figure>

<h3 id="查询框设计"><a href="#查询框设计" class="headerlink" title="查询框设计"></a>查询框设计</h3><p>为两个lab框，两个复选框，一个查询按钮</p>
<h4 id="com-prod-type复选框"><a href="#com-prod-type复选框" class="headerlink" title="com_prod_type复选框"></a>com_prod_type复选框</h4><p>数据字典：</p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1101-2.webp"></p>
<p>控件设置：</p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1101-3.webp"></p>
<h4 id="com-prod-name复选框"><a href="#com-prod-name复选框" class="headerlink" title="com_prod_name复选框"></a>com_prod_name复选框</h4><p>数据字典：</p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1101-4.webp"><br>控件设置：</p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1101-5.webp"></p>
<h3 id="主表设计"><a href="#主表设计" class="headerlink" title="主表设计"></a>主表设计</h3><p><img src="https://resources.kagerou.top/img/blog/fr-1101-6.webp"></p>
<h4 id="表头"><a href="#表头" class="headerlink" title="表头"></a>表头</h4><p>背景为深蓝色，字体为白色、微软雅黑、12号，全黑色边框</p>
<h4 id="表体"><a href="#表体" class="headerlink" title="表体"></a>表体</h4><p>字体为黑色、微软雅黑、10号，全黑色边框</p>
<h4 id="隔行换色"><a href="#隔行换色" class="headerlink" title="隔行换色"></a>隔行换色</h4><p>给产品名称和销售数量设置条件属性，添加条件-背景-选择淡蓝色-设置公式为<strong>rwo()%2&#x3D;&#x3D;0</strong></p>
<h4 id="销售数量大于1000显示红色"><a href="#销售数量大于1000显示红色" class="headerlink" title="销售数量大于1000显示红色"></a>销售数量大于1000显示红色</h4><p>给销售数量设置条件属性，添加条件-字体-选择微软雅黑&#x2F;加粗&#x2F;10号&#x2F;红色-设置条件为 大于1000</p>
<h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h3><p><img src="https://resources.kagerou.top/img/blog/fr-1101-7.webp">
       </p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>帆软</tag>
        <tag>题目</tag>
      </tags>
  </entry>
  <entry>
    <title>帆软交付认证模拟题FR1102</title>
    <url>/2023/09/21/fr1102/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>题目要求</p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1102-0.webp"></p>
<p>模板要求</p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1102-1.webp"><br><img src="https://resources.kagerou.top/img/blog/fr-1102-2.webp"></p>
<h3 id="处理数据集"><a href="#处理数据集" class="headerlink" title="处理数据集"></a>处理数据集</h3><p>通过分析题目，发现需要四个数据集，分别是：<br>    - 班级成绩汇总表<br>    - 班级成绩明细表<br>    - 各科平均成绩对比<br>    - 男女生平均成绩对比</p>
<h4 id="班级成绩汇总表"><a href="#班级成绩汇总表" class="headerlink" title="班级成绩汇总表"></a>班级成绩汇总表</h4><p>班级成绩汇总表数据来源于STSCORE表，无参数影响，可以直接查询，以班级为分组，对总成绩汇总求和。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.CLASSNO,<span class="built_in">SUM</span>(s.GRADE) <span class="keyword">AS</span> GRADE</span><br><span class="line"><span class="keyword">FROM</span> STSCORE s </span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s.CLASSNO</span><br></pre></td></tr></table></figure>

<h4 id="班级成绩明细表"><a href="#班级成绩明细表" class="headerlink" title="班级成绩明细表"></a>班级成绩明细表</h4><p>班级成绩明细表数据来源于STSCORE表，存在联动，需要参数classno来过滤结果。<br>表中性别字段实际值为F&#x2F;M，在明细表展示时需要做一下处理。将F判断为女，其余为男。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.<span class="operator">*</span>,</span><br><span class="line">	   <span class="keyword">CASE</span> s.SEX <span class="keyword">WHEN</span> <span class="string">&#x27;F&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">ElSE</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">END</span> SEX_CN </span><br><span class="line"><span class="keyword">FROM</span> STSCORE s </span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">$&#123;if(len(classno)<span class="operator">=</span><span class="operator">=</span><span class="number">0</span>,&quot;&quot;,&quot;AND s.classno =&#x27;&quot;<span class="operator">+</span>classno<span class="operator">+</span>&quot;&#x27;&quot;)&#125;</span><br></pre></td></tr></table></figure>

<h4 id="各科平均成绩对比"><a href="#各科平均成绩对比" class="headerlink" title="各科平均成绩对比"></a>各科平均成绩对比</h4><p>班级成绩明细表数据来源于STSCORE表，存在联动，需要参数classno来过滤结果。<br>以科目为分组，对总成绩汇总平均。同时处理性别字段的显示值。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.COURSE COURSE </span><br><span class="line">	  ,round(<span class="built_in">avg</span>(s.GRADE),<span class="number">2</span>) GRADE</span><br><span class="line"><span class="keyword">FROM</span> STSCORE s </span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">$&#123;if(len(classno)<span class="operator">=</span><span class="operator">=</span><span class="number">0</span>,&quot;&quot;,&quot;AND s.classno =&#x27;&quot;<span class="operator">+</span>classno<span class="operator">+</span>&quot;&#x27;&quot;)&#125;</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s.COURSE</span><br></pre></td></tr></table></figure>

<h4 id="男女生平均成绩对比"><a href="#男女生平均成绩对比" class="headerlink" title="男女生平均成绩对比"></a>男女生平均成绩对比</h4><p>班级成绩明细表数据来源于STSCORE表，存在联动，需要参数classno来过滤结果。<br>以性别为分组，对总成绩汇总平均。同时处理性别字段的显示值。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span> s.SEX <span class="keyword">WHEN</span> <span class="string">&#x27;F&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">ElSE</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">END</span> SEX </span><br><span class="line">	  ,round(<span class="built_in">avg</span>(s.GRADE),<span class="number">2</span>) GRADE</span><br><span class="line"><span class="keyword">FROM</span> STSCORE s </span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">$&#123;if(len(classno)<span class="operator">=</span><span class="operator">=</span><span class="number">0</span>,&quot;&quot;,&quot;AND s.classno =&#x27;&quot;<span class="operator">+</span>classno<span class="operator">+</span>&quot;&#x27;&quot;)&#125;</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s.SEX</span><br></pre></td></tr></table></figure>

<h3 id="主表设计"><a href="#主表设计" class="headerlink" title="主表设计"></a>主表设计</h3><h4 id="成绩汇总饼图"><a href="#成绩汇总饼图" class="headerlink" title="成绩汇总饼图"></a>成绩汇总饼图</h4><p>插入图表-饼图</p>
<p>设置数据<br>    - 数据集：班级成绩汇总表<br>    - 分类：无<br>    - 系列名：classno<br>    - 值：grade<br>设置样式<br>    - 标题-文本：’各班级成绩汇总’<br>    - 标签：启动标签<br>    - 系列<br>      - 渐变风格：开<br>      - 配色方案：新特性<br>设置特效<br>    - 交互属性-添加连接-动态参数：classno为系列名称</p>
<h4 id="男女生平均成绩柱状图"><a href="#男女生平均成绩柱状图" class="headerlink" title="男女生平均成绩柱状图"></a>男女生平均成绩柱状图</h4><p>插入图表-柱状图</p>
<p>设置数据<br>    - 数据集：男女生平均成绩对比<br>    - 分类：SEX<br>    - 系列名：无<br>    - 值：GRADE</p>
<p>设置样式<br>    - 标题-文本：&#x3D;$classno+’男女生平均成绩对比’<br>其他略</p>
<h4 id="各科平均成绩条形图"><a href="#各科平均成绩条形图" class="headerlink" title="各科平均成绩条形图"></a>各科平均成绩条形图</h4><p>插入图表-条形图</p>
<p>设置数据<br>    - 数据集：各科平均成绩对比<br>    - 分类：COURSE<br>    - 系列名：无<br>    - 值：GRADE</p>
<p>设置样式<br>    - 标题-文本：&#x3D;$classno+’各科平均成绩对比’<br>其他略</p>
<h4 id="学生成绩明细表"><a href="#学生成绩明细表" class="headerlink" title="学生成绩明细表"></a>学生成绩明细表</h4><p>表体：</p>
<table>
<thead>
<tr>
<th align="center">班级</th>
<th align="center">学号</th>
<th align="center">姓名</th>
<th align="center">性别</th>
<th align="center">明细表.COURSE</th>
</tr>
</thead>
<tbody><tr>
<td align="center">明细表.CLASSNO</td>
<td align="center">明细表.STUDENTNO</td>
<td align="center">明细表.NAME</td>
<td align="center">明细表.SEX_CN</td>
<td align="center">明细表.GRADE</td>
</tr>
</tbody></table>
<p>如图：</p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1102-3.webp"></p>
<p>其中<strong>明细表.COURSE</strong> 扩展方式为横向扩展。</p>
<p>整体列宽调整为35</p>
<p>表头背景为深蓝色，字体为白色、微软雅黑、12号，全黑色边框</p>
<p>表体字体为黑色、微软雅黑、10号，全黑色边框</p>
<p>学号、姓名、性别和明细表.COURSE设置条件属性，添加条件-背景-选择淡蓝色-设置公式为<strong>rwo()%2&#x3D;&#x3D;0</strong></p>
<p>明细表.GRADE设置条件属性，添加条件-字体-选择微软雅黑&#x2F;加粗&#x2F;10号&#x2F;红色-设置条件为 <strong>小于60</strong></p>
<h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h3><p><img src="https://resources.kagerou.top/img/blog/fr-1102-4.webp"></p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1102-5.webp"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>帆软</tag>
        <tag>题目</tag>
      </tags>
  </entry>
  <entry>
    <title>帆软交付认证模拟题FR1103</title>
    <url>/2023/09/27/fr1103/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>题目要求</p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1103-0.webp"></p>
<p>模板要求</p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1103-1.webp"></p>
<h3 id="处理数据集"><a href="#处理数据集" class="headerlink" title="处理数据集"></a>处理数据集</h3><p>此题主要是使用sql来处理销售量的同比环比问题。这里的同期为一个月份</p>
<p>同比：（今年同期 - 去年同期）&#x2F; 去年同期 * 100%</p>
<p>环比： （同期 - 上期） &#x2F; 上期 * 100%</p>
<p>同比的计算分别需要今年和上年的按月汇总数据，所以需要做一次表关联。</p>
<p>环比的计算使用lag()函数取到按月份排序的上一条数据即可。</p>
<p>年月销售数据表具体sql:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> sum_table <span class="keyword">as</span>(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CAST</span>(substr(s.订购日期,<span class="number">1</span>,<span class="number">4</span>) <span class="keyword">AS</span> <span class="type">INTEGER</span>) years</span><br><span class="line">	   ,<span class="built_in">CAST</span>(substr(s.订购日期,<span class="number">6</span>,<span class="number">2</span>) <span class="keyword">AS</span> <span class="type">INTEGER</span>) months</span><br><span class="line">	   ,substr(s.订购日期,<span class="number">1</span>,<span class="number">7</span>) &quot;年月&quot;</span><br><span class="line">		,<span class="built_in">sum</span>(t.数量) &quot;当月销售&quot;</span><br><span class="line"><span class="keyword">FROM</span> 订单 s ,订单明细 t </span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">AND</span> s.订单ID <span class="operator">=</span> t.订单ID </span><br><span class="line"><span class="keyword">AND</span> substr(s.订购日期,<span class="number">1</span>,<span class="number">4</span>) <span class="keyword">BETWEEN</span>  <span class="string">&#x27;$&#123;years - 1&#125;&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;$&#123;years&#125;&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> substr(s.订购日期,<span class="number">1</span>,<span class="number">4</span>),substr(s.订购日期,<span class="number">6</span>,<span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> b.年月,b.当月销售,b.同比增长率,b.环比增长率</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">(</span><br><span class="line">	<span class="keyword">SELECT</span> a.<span class="operator">*</span></span><br><span class="line">	       ,ROUND((a.当月销售 <span class="operator">-</span> b.当月销售) <span class="operator">/</span> b.当月销售 <span class="operator">*</span> <span class="number">100</span>,<span class="number">1</span>)<span class="operator">||</span><span class="string">&#x27;%&#x27;</span> &quot;同比增长率&quot;</span><br><span class="line">	       ,ROUND((a.当月销售 <span class="operator">-</span> <span class="built_in">LAG</span>(a.当月销售,<span class="number">1</span>) <span class="keyword">OVER</span> ( <span class="keyword">ORDER</span> <span class="keyword">BY</span> a.years,a.months)) <span class="operator">/</span> <span class="built_in">LAG</span>(a.当月销售,<span class="number">1</span>) <span class="keyword">OVER</span> ( <span class="keyword">ORDER</span> <span class="keyword">BY</span> a.years,a.months) <span class="operator">*</span> <span class="number">100</span>,<span class="number">1</span>) <span class="operator">||</span> <span class="string">&#x27;%&#x27;</span>  &quot;环比增长率&quot;</span><br><span class="line">	<span class="keyword">from</span> sum_table a</span><br><span class="line">		<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> sum_table b </span><br><span class="line">		<span class="keyword">ON</span>  a.months <span class="operator">=</span> b.months</span><br><span class="line">		<span class="keyword">AND</span> a.years <span class="operator">=</span> b.years <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">	<span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">)b</span><br><span class="line"><span class="keyword">WHERE</span> b.years <span class="operator">=</span> $&#123;years&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：由于FRDemo使用的是SQLite数据库，所以sql中存在一些SQLite特性的方法。</p>
</blockquote>
<h3 id="查询控件"><a href="#查询控件" class="headerlink" title="查询控件"></a>查询控件</h3><p>日期控件：<br>    格式为 <strong>yyyy</strong><br>    返回值的类型为<strong>字符串</strong>   </p>
<h3 id="主表设计"><a href="#主表设计" class="headerlink" title="主表设计"></a>主表设计</h3><p>主表主要用于展示数据，比较简单。</p>
<p>表头： $years + ‘年销售同比环比数据’</p>
<p>表体：</p>
<table>
<thead>
<tr>
<th align="center">年月</th>
<th align="center">当月销售</th>
<th align="center">同比增长率</th>
<th align="center">环比增长率</th>
</tr>
</thead>
<tbody><tr>
<td align="center">年月销售数据.年月</td>
<td align="center">年月销售数据.当月销售</td>
<td align="center">年月销售数据.同比增长率</td>
<td align="center">年月销售数据.环比增长率</td>
</tr>
</tbody></table>
<p>风格： 与前几题相似。</p>
<h3 id="成果预览"><a href="#成果预览" class="headerlink" title="成果预览"></a>成果预览</h3><p><img src="https://resources.kagerou.top/img/blog/fr-1103-2.webp"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>帆软</tag>
        <tag>题目</tag>
      </tags>
  </entry>
  <entry>
    <title>帆软交付认证模拟题FR1104</title>
    <url>/2023/09/27/fr1104/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>题目要求</p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1104-0.webp"></p>
<p>模板要求</p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1104-1.webp"></p>
<h3 id="处理数据集"><a href="#处理数据集" class="headerlink" title="处理数据集"></a>处理数据集</h3><p>数据集为<br>    - 控件数据集-分公司名称<br>    - 主表数据集-Equipment<br>    - 附表数据集-EquipmentDetail</p>
<h4 id="分公司名称"><a href="#分公司名称" class="headerlink" title="分公司名称"></a>分公司名称</h4><p>用于查询控件数据字典</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.Company</span><br><span class="line"><span class="keyword">FROM</span> Equipment e</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h4 id="Equipment"><a href="#Equipment" class="headerlink" title="Equipment"></a>Equipment</h4><p>用于表主体展示数据，同时由分公司参数控制</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Equipment e</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">$&#123;if(len(com_comp_name)<span class="operator">=</span><span class="operator">=</span><span class="number">0</span>,&quot;&quot;,&quot;and e.Company = &#x27;&quot;<span class="operator">+</span>com_comp_name<span class="operator">+</span>&quot;&#x27;&quot;)&#125;</span><br></pre></td></tr></table></figure>

<h4 id="EquipmentDetail"><a href="#EquipmentDetail" class="headerlink" title="EquipmentDetail"></a>EquipmentDetail</h4><p>用于表子表展示数据，同时由分公司参数控制，按照ID排序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ed.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> EquipmentDetail ed,Equipment e</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">AND</span> ed.CompanyID <span class="operator">=</span> e.CompanyID</span><br><span class="line">$&#123;if(len(com_comp_name)<span class="operator">=</span><span class="operator">=</span><span class="number">0</span>,&quot;&quot;,&quot;and e.Company = &#x27;&quot;<span class="operator">+</span>com_comp_name<span class="operator">+</span>&quot;&#x27;&quot;)&#125;</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">CAST</span>(ed.EquipmentID <span class="keyword">AS</span> <span class="type">INTEGER</span>)</span><br></pre></td></tr></table></figure>

<h3 id="查询控件"><a href="#查询控件" class="headerlink" title="查询控件"></a>查询控件</h3><p>分公司查询框为下拉框控件，数据字典为<strong>分公司</strong>名字数据集，控件名称为<strong>com_comp_name</strong></p>
<h3 id="主表设计"><a href="#主表设计" class="headerlink" title="主表设计"></a>主表设计</h3><p>按照题目效果格式设置报表样式，效果如下：<br><img src="https://resources.kagerou.top/img/blog/fr-1104-2.webp"></p>
<p>为每一个需要填报的单元格设置好对应的文本、数字或者按钮控件，并放入对应的数据集查询结果字段。</p>
<p>设置第8行子表隔行显示。</p>
<p>增加按钮为插入行按钮，指定单元格为<strong>A8</strong></p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1104-3.webp"></p>
<p>删除按钮为按钮控件，基本设置如下图：</p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1104-4.webp"></p>
<p>同时设置点击事件-javascript脚本，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cell = <span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">location</span>;</span><br><span class="line"><span class="comment">//获取当前控件所在单元格的编号</span></span><br><span class="line"><span class="variable constant_">FR</span>.<span class="property">Msg</span>.<span class="title function_">confirm</span>(<span class="string">&quot;警告&quot;</span>, <span class="string">&quot;确定要删除吗？&quot;</span>, <span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> (value) &#123;</span><br><span class="line">		<span class="title function_">_g</span>().<span class="title function_">deleteReportRC</span>(cell);</span><br><span class="line">		<span class="comment">//删除当前行</span></span><br><span class="line">		<span class="title function_">_g</span>().<span class="title function_">verifyAndWriteReport</span>();</span><br><span class="line">		<span class="comment">//校验并提交</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">_g</span>().<span class="title function_">refreshAllSheets</span>()</span><br></pre></td></tr></table></figure>

<h3 id="模板设置"><a href="#模板设置" class="headerlink" title="模板设置"></a>模板设置</h3><h4 id="填报属性设置"><a href="#填报属性设置" class="headerlink" title="填报属性设置"></a>填报属性设置</h4><p>主表数据修改，其中<strong>J3</strong>，为隐藏单元格<strong>CompanyID</strong>，仅用于填报提交。配置如下图：</p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1104-5.webp"></p>
<p>子表数据修改</p>
<p><img src="https://resources.kagerou.top/img/blog/fr-1104-6.webp"></p>
<h4 id="填报页面设置"><a href="#填报页面设置" class="headerlink" title="填报页面设置"></a>填报页面设置</h4><p>为填报页面添加一个加载结束事件，来增加删除按钮，最后一行不可删除的功能。<br>事件代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;del&#x27;</span>];</span><br><span class="line">     <span class="comment">//定义需要执行事件的删除行按钮名称数组，如有多组则写法为[&#x27;sc1&#x27;,&#x27;sc2&#x27;]</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">	<span class="keyword">var</span> kj = $(<span class="string">&#x27;[widgetname=&quot;&#x27;</span> + arr[i].<span class="title function_">toUpperCase</span>() + <span class="string">&#x27;&quot;]:visible&#x27;</span>);</span><br><span class="line">	<span class="comment">//获取页面上可见的删除行按钮元素</span></span><br><span class="line">	<span class="keyword">var</span> del = <span class="title function_">_g</span>().<span class="title function_">getWidgetsByName</span>(arr[i].<span class="title function_">toUpperCase</span>());</span><br><span class="line">	<span class="comment">//根据名字获取删除行按钮</span></span><br><span class="line">	<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; del.<span class="property">length</span>; j++) &#123;</span><br><span class="line">		kj.<span class="property">length</span> &lt;= <span class="number">1</span> ? del[j].<span class="title function_">setEnable</span>(<span class="literal">false</span>) : del[j].<span class="title function_">setEnable</span>(<span class="literal">true</span>);</span><br><span class="line">		<span class="comment">//当控件只剩1个时，禁用控件，否则遍历启用所有控件</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="成果预览"><a href="#成果预览" class="headerlink" title="成果预览"></a>成果预览</h3><p><img src="https://resources.kagerou.top/img/blog/fr-1104-7.webp"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>帆软</tag>
        <tag>题目</tag>
      </tags>
  </entry>
  <entry>
    <title>geojson文件简介和基本示例</title>
    <url>/2023/11/16/geojson/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>如果你看完文章没有得到你想要的内容，请回来点击原文链接<a href="https://zhuanlan.zhihu.com/p/141554586">Geojson规范</a>,<a href="https://datatracker.ietf.org/doc/html/rfc7946">rfc7946</a></p>
<h3 id="geojson简介"><a href="#geojson简介" class="headerlink" title="geojson简介"></a>geojson简介</h3><p>简单来说geojson是用来描述地理特征的基于 JSON 的地理空间数据交换格式。GeoJSON RFC定义了 GeoJSON 对象可以表示的 7 种几何形状“类型” 。它们是“Point”、“MultiPoint”、“LineString”、“MultiLineString”、“Polygon”、“MultiPolygon”和“GeometryCollection”。</p>
<h3 id="geojson对象"><a href="#geojson对象" class="headerlink" title="geojson对象"></a>geojson对象</h3><h4 id="Point"><a href="#Point" class="headerlink" title="Point"></a>Point</h4><p>0维点对象，”type”为”Point”,”coordinates”为经纬度。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Point&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;coordinates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">0.0</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="MultiPoints"><a href="#MultiPoints" class="headerlink" title="MultiPoints"></a>MultiPoints</h4><p>0维多点对象，”type”为”MultiPoints”,”coordinates”为经纬度数组。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MultiPoints&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;coordinates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">0.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">50.0</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">]</span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="LineStrings"><a href="#LineStrings" class="headerlink" title="LineStrings"></a>LineStrings</h4><p>一维线对象，”type”为”LineString”,”coordinates”为经纬度数组。线形与经纬度数组顺序相关。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LineStrings&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;coordinates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">0.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">30.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">50.0</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">]</span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="MultiLineString"><a href="#MultiLineString" class="headerlink" title="MultiLineString"></a>MultiLineString</h4><p>一维多线对象，”type”为”MultiLineString”,”coordinates”为”LineStrings”数组。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MultiLineString&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;coordinates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">0.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">[</span><span class="number">101.0</span><span class="punctuation">,</span> <span class="number">1.0</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">[</span><span class="number">102.0</span><span class="punctuation">,</span> <span class="number">2.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">[</span><span class="number">103.0</span><span class="punctuation">,</span> <span class="number">3.0</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="Polygon"><a href="#Polygon" class="headerlink" title="Polygon"></a>Polygon</h4><p>二维面&#x2F;多边形对象，”type”为”Polygon”,”coordinates”为”linear ring”数组。面形与数组顺序相关且数组第一个点和最后一个点必须相同。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Polygon&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;coordinates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">0.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">[</span><span class="number">101.0</span><span class="punctuation">,</span> <span class="number">0.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">[</span><span class="number">101.0</span><span class="punctuation">,</span> <span class="number">1.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">1.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">0.0</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="MultiPolygon"><a href="#MultiPolygon" class="headerlink" title="MultiPolygon"></a>MultiPolygon</h4><p>二维多面对象，”type”为”MultiPolygon”,”coordinates”为”Polygon”数组。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MultiPolygon&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;coordinates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">102.0</span><span class="punctuation">,</span> <span class="number">2.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">103.0</span><span class="punctuation">,</span> <span class="number">2.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">103.0</span><span class="punctuation">,</span> <span class="number">3.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">102.0</span><span class="punctuation">,</span> <span class="number">3.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">102.0</span><span class="punctuation">,</span> <span class="number">2.0</span><span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//下面这个是带孔的面数组</span></span><br><span class="line">    <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">0.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">101.0</span><span class="punctuation">,</span> <span class="number">0.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">101.0</span><span class="punctuation">,</span> <span class="number">1.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">1.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">0.0</span><span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">100.2</span><span class="punctuation">,</span> <span class="number">0.2</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">100.2</span><span class="punctuation">,</span> <span class="number">0.8</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">100.8</span><span class="punctuation">,</span> <span class="number">0.8</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">100.8</span><span class="punctuation">,</span> <span class="number">0.2</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">100.2</span><span class="punctuation">,</span> <span class="number">0.2</span><span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="GeometryCollections"><a href="#GeometryCollections" class="headerlink" title="GeometryCollections"></a>GeometryCollections</h4><p>Geometrycollection 的”Geometr”数组中的每个元素都是上面描述的几何对象之一:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GeometryCollection&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;geometries&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Point&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;coordinates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">0.0</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LineString&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;coordinates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">101.0</span><span class="punctuation">,</span> <span class="number">0.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span><span class="number">102.0</span><span class="punctuation">,</span> <span class="number">1.0</span><span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Polygon&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;coordinates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">0.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">[</span><span class="number">101.0</span><span class="punctuation">,</span> <span class="number">0.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">[</span><span class="number">101.0</span><span class="punctuation">,</span> <span class="number">1.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">1.0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">[</span><span class="number">100.0</span><span class="punctuation">,</span> <span class="number">0.0</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="Antimeridian-Cutting"><a href="#Antimeridian-Cutting" class="headerlink" title="Antimeridian Cutting"></a>Antimeridian Cutting</h4><p>他不是一种形状对象，只是在提示当你的形状要跨过180°经度的时候，需要注意基本的地理描述问题。</p>
<h4 id="Feature-Object"><a href="#Feature-Object" class="headerlink" title="Feature Object"></a>Feature Object</h4><p>叫做特征或者要素对象，其包含了一个基本形状对象(geometry)及其基本信息(properties)。</p>
<p>‘properties’ 是一个普通的json对象，可以自定义形状相关的属性。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Feature&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;geometry&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Polygon&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;coordinates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">[</span></span><br><span class="line">                    <span class="number">103.94760106</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="number">30.661278365</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">                <span class="punctuation">[</span></span><br><span class="line">                    <span class="number">103.921334867</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="number">30.669621744</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">[</span></span><br><span class="line">                    <span class="number">103.94760106</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="number">30.661278365</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;OBJECTID&quot;</span><span class="punctuation">:</span> <span class="number">2229</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;双流区&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;adcode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;510116&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;adcode_s&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5101&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;adcode_si&quot;</span><span class="punctuation">:</span> <span class="string">&quot;51&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;JC&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ORIG_FID&quot;</span><span class="punctuation">:</span> <span class="number">3232</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Shape_Leng&quot;</span><span class="punctuation">:</span> <span class="number">1.76486274549</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Shape_Area&quot;</span><span class="punctuation">:</span> <span class="number">0.100061005347</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;双流区&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<h4 id="FeatureCollection-Object"><a href="#FeatureCollection-Object" class="headerlink" title="FeatureCollection Object"></a>FeatureCollection Object</h4><p>一组Feature的合集，也是通常使用较多的geojson文件内容。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;成都市&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FeatureCollection&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;features&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Feature&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;geometry&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Polygon&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;coordinates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">[</span></span><br><span class="line">                        <span class="punctuation">[</span></span><br><span class="line">                            <span class="number">103.55857416</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="number">30.3350250600001</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="comment">// ...</span></span><br><span class="line">                        <span class="punctuation">[</span></span><br><span class="line">                            <span class="number">103.55216094</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="number">30.341370645</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="punctuation">[</span></span><br><span class="line">                            <span class="number">103.55857416</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="number">30.3350250600001</span></span><br><span class="line">                        <span class="punctuation">]</span></span><br><span class="line">                    <span class="punctuation">]</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;OBJECTID&quot;</span><span class="punctuation">:</span> <span class="number">2115</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;蒲江县&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;adcode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;510131&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;adcode_s&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5101&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;adcode_si&quot;</span><span class="punctuation">:</span> <span class="string">&quot;51&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;JC&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;ORIG_FID&quot;</span><span class="punctuation">:</span> <span class="number">3261</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Shape_Leng&quot;</span><span class="punctuation">:</span> <span class="number">1.3293374479</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Shape_Area&quot;</span><span class="punctuation">:</span> <span class="number">0.0543842925464</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;dname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;蒲江县&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Feature&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;geometry&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Polygon&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;coordinates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">[</span></span><br><span class="line">                        <span class="punctuation">[</span></span><br><span class="line">                            <span class="number">103.80576362</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="number">30.524076135</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="punctuation">[</span></span><br><span class="line">                            <span class="number">103.806736421</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="number">30.5239680460001</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="punctuation">[</span></span><br><span class="line">                            <span class="number">103.816888125</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="number">30.522840079</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="comment">//...</span></span><br><span class="line">                        <span class="punctuation">[</span></span><br><span class="line">                            <span class="number">103.802673479</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="number">30.5271662750001</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="punctuation">[</span></span><br><span class="line">                            <span class="number">103.80576362</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="number">30.524076135</span></span><br><span class="line">                        <span class="punctuation">]</span></span><br><span class="line">                    <span class="punctuation">]</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;OBJECTID&quot;</span><span class="punctuation">:</span> <span class="number">2162</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;新津区&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;adcode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;510118&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;adcode_s&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5101&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;adcode_si&quot;</span><span class="punctuation">:</span> <span class="string">&quot;51&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;JC&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;ORIG_FID&quot;</span><span class="punctuation">:</span> <span class="number">3241</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Shape_Leng&quot;</span><span class="punctuation">:</span> <span class="number">0.830260507587</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Shape_Area&quot;</span><span class="punctuation">:</span> <span class="number">0.0306366445471</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;dname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;新津区&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h3><p>提供两个标准的成都市行政区区块划分和各市重心点的json文件作为参考。<br><a href="https://resources.kagerou.top/share/chengdu-area.json">chengdu-area.json</a><br><a href="https://resources.kagerou.top/share/chengdu-point.json">chengdu-point.json</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>geojson</tag>
        <tag>地理信息</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/05/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<p><a href="https://www.imgbed.com/image/iMuo4"><img src="https://s1.imgbed.xyz/2023/03/21/iMuo4.png" alt="iMuo4.png"></a></p>
<!-- <div style="text-align: center" >
    <img src="https://i.imgur.com/Rwm7rzB.jpeg" width="50%" height="50%">
</div>  -->]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>主题</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo文章排序和自定义排序</title>
    <url>/2023/11/14/hexo_post_order/</url>
    <content><![CDATA[<h4 id="按照创建时间或更新时间排序"><a href="#按照创建时间或更新时间排序" class="headerlink" title="按照创建时间或更新时间排序"></a>按照创建时间或更新时间排序</h4><p>此部分配置需要在_config.yml文件中配置index_generator项</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">9</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-updated</span> <span class="comment"># -:倒序 updated:更新时间 date:创建时间(默认)</span></span><br></pre></td></tr></table></figure>

<h4 id="自定义排序"><a href="#自定义排序" class="headerlink" title="自定义排序"></a>自定义排序</h4><p>通过index_generator查找文件时发现了 .&#x2F;node_modules&#x2F;hexo-generator-index&#x2F;lib&#x2F;generator.js 文件.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pagination = <span class="built_in">require</span>(<span class="string">&#x27;hexo-pagination&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span>(<span class="params">locals</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> config = <span class="variable language_">this</span>.<span class="property">config</span>;</span><br><span class="line">  <span class="keyword">const</span> posts = locals.<span class="property">posts</span>.<span class="title function_">sort</span>(config.<span class="property">index_generator</span>.<span class="property">order_by</span>);</span><br><span class="line"></span><br><span class="line">  posts.<span class="property">data</span>.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (b.<span class="property">sticky</span> || <span class="number">0</span>) - (a.<span class="property">sticky</span> || <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> paginationDir = config.<span class="property">pagination_dir</span> || <span class="string">&#x27;page&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> path = config.<span class="property">index_generator</span>.<span class="property">path</span> || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">pagination</span>(path, posts, &#123;</span><br><span class="line">    <span class="attr">perPage</span>: config.<span class="property">index_generator</span>.<span class="property">per_page</span>,</span><br><span class="line">    <span class="attr">layout</span>: [<span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;archive&#x27;</span>],</span><br><span class="line">    <span class="attr">format</span>: paginationDir + <span class="string">&#x27;/%d/&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">__index</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>其中sort的内容除了config.index_generator.order_by 上面配置的 -updated 外，还有一个是post.data.sticky<br>所以在文章头部中配置sticky的值，文章将会sticky大小来进行自定义的排序。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo文章排序和自定义排序</span><br><span class="line">tags: [Hexo, 主题]</span><br><span class="line"><span class="section">sticky: 100</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>主题</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin对于常见的properties和yaml配置文件操作</title>
    <url>/2023/05/26/kotlin-file/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>为了配合MiraiBot机器人，对于一些本地持久化的数据读取，本来是想依照狼宝项目使用Redis来做整体的持久化的，但是又怕有服务器迁移之类的问题，所有就摆烂直接使用本地文件IO来做了。</p>
<h3 id="properties文件"><a href="#properties文件" class="headerlink" title="properties文件"></a>properties文件</h3><p>由于properties文件是纯键值对的关系，所有比较好处理。主要使用的也就是 java.util.Properties 类</p>
<h4 id="操作properties文件"><a href="#操作properties文件" class="headerlink" title="操作properties文件"></a>操作properties文件</h4><p>prop.load(it) 和 prop.getProperty(“groupId”)</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> file = File(<span class="string">&quot;src/main/resources/group.properties&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> prop = Properties()</span><br><span class="line"><span class="comment">//读取文件</span></span><br><span class="line">FileInputStream(file).use &#123; prop.load(it) &#125;</span><br><span class="line"><span class="comment">//添加/修改属性</span></span><br><span class="line">prop.setProperty(<span class="string">&quot;group.name&quot;</span>,<span class="string">&quot;abcd&quot;</span>)</span><br><span class="line"><span class="comment">//获取属性</span></span><br><span class="line">println(prop.getProperty(<span class="string">&quot;group.id&quot;</span>)?.toString())</span><br><span class="line"><span class="comment">//修改属性</span></span><br><span class="line">prop.replace(<span class="string">&quot;group.id&quot;</span>,<span class="string">&quot;85234298761&quot;</span>)</span><br><span class="line"><span class="comment">//删除属性</span></span><br><span class="line">prop.remove(<span class="string">&quot;group.name&quot;</span>)</span><br><span class="line"><span class="comment">//保存</span></span><br><span class="line">FileOutputStream(file).use &#123; prop.store(it, <span class="string">&quot;some comment&quot;</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印所有属性</span></span><br><span class="line">prop.stringPropertyNames()</span><br><span class="line">    .associateWith &#123; prop.getProperty(it) &#125;</span><br><span class="line">    .forEach &#123; println(it) &#125;</span><br></pre></td></tr></table></figure>

<h3 id="yaml文件"><a href="#yaml文件" class="headerlink" title="yaml文件"></a>yaml文件</h3><p>yaml文件能使用到主要分为两种情况，一种也是纯粹的键值对，另一种就是含有list的数据。</p>
<p>使用的是snakeyaml:2.0库来处理yaml文件</p>
<h4 id="键值对"><a href="#键值对" class="headerlink" title="键值对"></a>键值对</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> file2 = File(<span class="string">&quot;src/main/resources/test1.yml&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> yaml = Yaml()</span><br><span class="line">FileInputStream(file2).use &#123;</span><br><span class="line">    <span class="keyword">val</span> map = yaml.load(it) <span class="keyword">as</span> Map&lt;String, Any&gt;</span><br><span class="line">    println(map[<span class="string">&quot;groupId&quot;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>test1.yml文件内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">groupId:</span> <span class="number">9037486</span></span><br></pre></td></tr></table></figure>

<h4 id="含list"><a href="#含list" class="headerlink" title="含list"></a>含list</h4><p>当groupId存在多个的时候，通常在写yaml配置的时候回用 - 来表示多各相同的数据</p>
<p>group.yml文件内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">groupName:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="number">1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">momo</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">混吃等死</span></span><br><span class="line"><span class="attr">groupId:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="number">18860951634</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">25161460112</span></span><br></pre></td></tr></table></figure>

<p>这种情况就要用List来其中的内容了。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> file2 = File(<span class="string">&quot;src/main/resources/group.yml&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> yaml = Yaml()</span><br><span class="line">FileInputStream(file2).use &#123;</span><br><span class="line">    <span class="keyword">val</span> map = yaml.load(it) <span class="keyword">as</span> Map&lt;String, List&lt;Any&gt;&gt;</span><br><span class="line">    <span class="keyword">val</span> listGroupName = map[<span class="string">&quot;groupName&quot;</span>]</span><br><span class="line">    listGroupName?.forEach &#123; println(it) &#125;</span><br><span class="line">    <span class="keyword">val</span> listGroupId = map[<span class="string">&quot;groupId&quot;</span>] <span class="keyword">as</span> List&lt;<span class="built_in">Long</span>&gt;</span><br><span class="line">    listGroupId?.forEach&#123;</span><br><span class="line">        <span class="keyword">if</span> (it == <span class="number">25161460112L</span>) println(<span class="string">&quot;存在群号<span class="variable">$it</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="进阶：读取yaml文件到Java类"><a href="#进阶：读取yaml文件到Java类" class="headerlink" title="进阶：读取yaml文件到Java类"></a>进阶：读取yaml文件到Java类</h4><p>这一部分搞了好久，java中的使用和kotlin还是有较大的区别，由于学艺不精，导致花费的不少时间，依然存在部分问题。</p>
<p>java类，对，真的就成功解析到了java的类里面，原打算是使用Kotlin的Data类做数据的接收，结果一直出错，换成java类便能成功。简直离谱，还得花上不少的时间来看看两者的区别了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不写get和set方法会报错</span></span><br><span class="line">    <span class="comment">//没有测试Lombok注解</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGroupName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> groupName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGroupName</span><span class="params">(String groupName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.groupName = groupName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getGroupID</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> groupID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGroupID</span><span class="params">(Long groupID)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.groupID = groupID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRegisterDate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> registerDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRegisterDate</span><span class="params">(String registerDate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.registerDate = registerDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Long&gt; <span class="title function_">getMemberInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> memberInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMemberInfo</span><span class="params">(List&lt;Long&gt; memberInfo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.memberInfo = memberInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;UserInfo1&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;groupName=&#x27;&quot;</span> + groupName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, groupID=&quot;</span> + groupID +</span><br><span class="line">                <span class="string">&quot;, registerDate=&#x27;&quot;</span> + registerDate + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, memberInfo=&quot;</span> + memberInfo +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String groupName;</span><br><span class="line">    <span class="keyword">private</span> Long groupID;</span><br><span class="line">    <span class="keyword">private</span> String registerDate;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Long&gt; memberInfo;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>yaml文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">groupName:</span> <span class="string">abd</span></span><br><span class="line"><span class="attr">groupID:</span> <span class="number">12351</span></span><br><span class="line"><span class="attr">registerDate:</span> <span class="number">20230529</span></span><br><span class="line"><span class="attr">memberInfo:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">9823476</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">9812360</span></span><br></pre></td></tr></table></figure>

<p>Java版测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testFun</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Constructor</span>(UserInfo1.class,<span class="keyword">new</span> <span class="title class_">LoaderOptions</span>());</span><br><span class="line">    <span class="type">Yaml</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>(constructor);</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/main/resources/test.yml&quot;</span>);</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">    <span class="type">UserInfo1</span> <span class="variable">userInfo1</span> <span class="operator">=</span> yaml.load(fileInputStream);</span><br><span class="line">    System.out.println(userInfo1.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>kotlin版测试代码</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> file3 = File(<span class="string">&quot;src/main/resources/test.yml&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> cons = Constructor(UserInfo1::<span class="keyword">class</span>.java, LoaderOptions())</span><br><span class="line">        <span class="keyword">val</span> yaml = Yaml(cons)</span><br><span class="line">        FileInputStream(file3).use &#123; it -&gt;</span><br><span class="line">            <span class="keyword">val</span> all  = yaml.load(it) <span class="keyword">as</span> UserInfo1</span><br><span class="line">            println(all.toString())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="淦哦"><a href="#淦哦" class="headerlink" title="淦哦"></a>淦哦</h3><p>搞到最后还是选用的数据库的方案来持久化一些基本信息，用配置文件写感觉太傻逼了，为了避免像前项目一样，网络问题导致数据库访问效率很低的问题，这次就选用了SQLite数据库。</p>
<p>还有一句Kotlin的实体类似乎是使用 interface 来继承Entity&lt;&gt;类的。后续的数据库开发的文章会写到mirai的下一片里面了。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>配置文件</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统的用户管理常用命令</title>
    <url>/2023/05/09/linux-user-manegement/</url>
    <content><![CDATA[<h4 id="添加一个新的用户"><a href="#添加一个新的用户" class="headerlink" title="添加一个新的用户"></a>添加一个新的用户</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adduser qibao</span><br></pre></td></tr></table></figure>

<h4 id="给新的用户设置密码"><a href="#给新的用户设置密码" class="headerlink" title="给新的用户设置密码"></a>给新的用户设置密码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd qibao</span><br></pre></td></tr></table></figure>

<h4 id="切换到指定账户"><a href="#切换到指定账户" class="headerlink" title="切换到指定账户"></a>切换到指定账户</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su qibao</span><br></pre></td></tr></table></figure>

<h4 id="查看当前账户id信息"><a href="#查看当前账户id信息" class="headerlink" title="查看当前账户id信息"></a>查看当前账户id信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">whoami</span></span><br><span class="line"><span class="built_in">id</span> [<span class="built_in">id</span>] <span class="comment">#id qibao</span></span><br></pre></td></tr></table></figure>

<h4 id="查看账户id的用户组"><a href="#查看账户id的用户组" class="headerlink" title="查看账户id的用户组"></a>查看账户id的用户组</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">groups</span> [<span class="built_in">id</span>] <span class="comment">#id不填默认为当前用户的用户组</span></span><br></pre></td></tr></table></figure>

<h4 id="查看所有账户id和用户组"><a href="#查看所有账户id和用户组" class="headerlink" title="查看所有账户id和用户组"></a>查看所有账户id和用户组</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/passwd</span><br><span class="line"><span class="built_in">cat</span> /etc/group</span><br></pre></td></tr></table></figure>

<h4 id="赋予用户sudo权限"><a href="#赋予用户sudo权限" class="headerlink" title="赋予用户sudo权限"></a>赋予用户sudo权限</h4><p>修改&#x2F;etc&#x2F;sudoers 文件赋予新用户权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Allow qibao to run any commands anywhere</span></span><br><span class="line">qibao   ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure>

<p>或者赋予新用户所在的组权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Allows people in group qibao to run all commands</span></span><br><span class="line">%qibao  ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>User</tag>
      </tags>
  </entry>
  <entry>
    <title>基于MiraiBot的简单开发(基础配置)</title>
    <url>/2023/05/11/miraibot01/</url>
    <content><![CDATA[<h3 id="MiraiBot简介"><a href="#MiraiBot简介" class="headerlink" title="MiraiBot简介"></a>MiraiBot简介</h3><div align="center">
   <img width="160" src="https://resources.kagerou.top/img/blog/mirai.png" alt="logo"></br>

   <img width="95" src="https://resources.kagerou.top/img/blog/mirai.svg" alt="title">

<p><img src="https://badges.gitter.im/mamoe/mirai.svg" alt="Gitter"><img src="https://img.shields.io/badge/post-on%20MiraiForum-yellow" alt="MiraiForum"></p>
<p><a href = "https://github.com/mamoe/mirai">mirai</a> 是一个在全平台下运行，提供 QQ Android 协议支持的高效率机器人库</p>
<p>这个项目的名字来源于<br>     <p><a href = "http://www.kyotoanimation.co.jp/">京都动画</a>作品<a href = "https://zh.moegirl.org.cn/zh-hans/%E5%A2%83%E7%95%8C%E7%9A%84%E5%BD%BC%E6%96%B9">《境界的彼方》</a>的<a href = "https://zh.moegirl.org.cn/zh-hans/%E6%A0%97%E5%B1%B1%E6%9C%AA%E6%9D%A5">栗山未来(Kuriyama <b>mirai</b>)</a></p><br>     <p><a href = "https://www.crypton.co.jp/">CRYPTON</a>以<a href = "https://www.crypton.co.jp/miku_eng">初音未来</a>为代表的创作与活动<a href = "https://magicalmirai.com/2019/index_en.html">(Magical <b>mirai</b>)</a></p><br>图标以及形象由画师<a href = "https://github.com/DazeCake">DazeCake</a>绘制</p>
</div>

<h3 id="Mairi项目"><a href="#Mairi项目" class="headerlink" title="Mairi项目"></a>Mairi项目</h3><h4 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h4><p>使用IEDA创建一个新的gradl项目</p>
<p><img src="https://resources.kagerou.top/img/blog/newGradle.webp" alt="gralde"></p>
<p>请修改<font color=red>红色</font>标签处的信息</p>
<p>项目目录如下图</p>
<p><img src="https://resources.kagerou.top/img/blog/gradleTree.webp" alt="gradleTree"></p>
<h4 id="build-gradle-kts配置"><a href="#build-gradle-kts配置" class="headerlink" title="build.gradle.kts配置"></a>build.gradle.kts配置</h4><p>主要引进mirai-core-jvm库和增加仓库地址<a href="https://jitpack.io/">https://jitpack.io</a></p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.jetbrains.kotlin.gradle.tasks.KotlinCompile</span><br><span class="line"></span><br><span class="line">plugins &#123;</span><br><span class="line">    kotlin(<span class="string">&quot;jvm&quot;</span>) version <span class="string">&quot;1.8.21&quot;</span></span><br><span class="line">    application</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">group</span> = <span class="string">&quot;top.kagerou&quot;</span></span><br><span class="line">version = <span class="string">&quot;1.0-dev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">    maven &#123; url = uri(<span class="string">&quot;https://jitpack.io&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    testImplementation(kotlin(<span class="string">&quot;test&quot;</span>))</span><br><span class="line">    <span class="comment">// https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp</span></span><br><span class="line">    implementation(<span class="string">&quot;com.squareup.okhttp3:okhttp:4.11.0&quot;</span>)</span><br><span class="line">    <span class="comment">// https://mvnrepository.com/artifact/net.mamoe/mirai-core-jvm</span></span><br><span class="line">    implementation(<span class="string">&quot;net.mamoe:mirai-core-jvm:2.15.0-M1&quot;</span>)</span><br><span class="line">    <span class="comment">// https://mvnrepository.com/artifact/com.alibaba.fastjson2/fastjson2</span></span><br><span class="line">    implementation(<span class="string">&quot;com.alibaba.fastjson2:fastjson2:2.0.31&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasks.test &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasks.withType&lt;KotlinCompile&gt; &#123;</span><br><span class="line">    kotlinOptions.jvmTarget = <span class="string">&quot;19&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">application &#123;</span><br><span class="line">    mainClass.set(<span class="string">&quot;MainKt&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="StratBot文件代码"><a href="#StratBot文件代码" class="headerlink" title="StratBot文件代码"></a>StratBot文件代码</h4><p>在main文件夹下创建一个启动文件StratBot.kt 代码如下</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.kagerou</span><br><span class="line"><span class="comment">//省略import 信息</span></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//设置qq号码</span></span><br><span class="line">    <span class="keyword">val</span> qqNumber: <span class="built_in">Long</span> = <span class="number">9548751264L</span></span><br><span class="line">    <span class="comment">//创建Bot登录实例 使用的是2.15.0-M1的扫码登录，密码登录的滑动验证总是有点问题。</span></span><br><span class="line">    <span class="keyword">val</span> bot = BotFactory.newBot(qqNumber, BotAuthorization.byQRCode())&#123;</span><br><span class="line">        fileBasedDeviceInfo(<span class="string">&quot;device.json&quot;</span>)</span><br><span class="line">        loginSolver = LoginSolver.Default</span><br><span class="line">        protocol = BotConfiguration.MiraiProtocol.ANDROID_WATCH</span><br><span class="line">    &#125;</span><br><span class="line">    bot.login()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//基础监听消息示例 subscribeGroupMessages 监听群消息</span></span><br><span class="line">    bot.eventChannel.subscribeGroupMessages &#123;</span><br><span class="line">        <span class="string">&quot;-test1&quot;</span> &#123;</span><br><span class="line">            subject.sendMessage(<span class="string">&quot;这是一个示例的文本消息&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bot.join()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动main函数，bot登录时会在控制台请求扫描二维码，用手机QQ在同一网络下扫描二维码即可登录成功。</p>
<h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><p>在任意bot所在的群里发送 “-test1” 指令，bot即回复 “这是一个示例的文本消息” 信息。</p>
<p><img src="https://resources.kagerou.top/img/blog/test1.webp" alt="test1"></p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>由于使用的时OpenJDK19在于IDEA默认的Gradle版本可能会发生冲突，最好的方案是使用较低的OpenJDK版本，比如15。</p>
<p>或者自定义Gradle版本为gradle-8.1.1。 </p>
<p>首先删除项目文件夹下 .gradle&#x2F;里面的所有内容。</p>
<p>然后修改项目文件夹下 gradle&#x2F;wrapper&#x2F;gradle-wrapper.properties 文件中 distributionUrl&#x3D;https:&#x2F;&#x2F;services.gradle.org&#x2F;distributions&#x2F;gradle-8.1.1-bin.zip</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">distributionBase</span>=<span class="string">GRADLE_USER_HOME</span></span><br><span class="line"><span class="attr">distributionPath</span>=<span class="string">wrapper/dists</span></span><br><span class="line"><span class="attr">distributionUrl</span>=<span class="string">https\://services.gradle.org/distributions/gradle-8.1.1-bin.zip</span></span><br><span class="line"><span class="attr">zipStoreBase</span>=<span class="string">GRADLE_USER_HOME</span></span><br><span class="line"><span class="attr">zipStorePath</span>=<span class="string">wrapper/dists</span></span><br></pre></td></tr></table></figure>

<p>最后重新构建项目。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>MiraiBot</tag>
      </tags>
  </entry>
  <entry>
    <title>基于MiraiBot的简单开发(消息类型)</title>
    <url>/2023/05/16/miraibot02/</url>
    <content><![CDATA[<h3 id="MiraiBot简介"><a href="#MiraiBot简介" class="headerlink" title="MiraiBot简介"></a>MiraiBot简介</h3><div align="center">
   <img width="160" src="https://resources.kagerou.top/img/blog/mirai.png" alt="logo"></br>

   <img width="95" src="https://resources.kagerou.top/img/blog/mirai.svg" alt="title">

<p><img src="https://badges.gitter.im/mamoe/mirai.svg" alt="Gitter"><img src="https://img.shields.io/badge/post-on%20MiraiForum-yellow" alt="MiraiForum"></p>
<p><a href = "https://github.com/mamoe/mirai">mirai</a> 是一个在全平台下运行，提供 QQ Android 协议支持的高效率机器人库</p>
<p>这个项目的名字来源于<br>     <p><a href = "http://www.kyotoanimation.co.jp/">京都动画</a>作品<a href = "https://zh.moegirl.org.cn/zh-hans/%E5%A2%83%E7%95%8C%E7%9A%84%E5%BD%BC%E6%96%B9">《境界的彼方》</a>的<a href = "https://zh.moegirl.org.cn/zh-hans/%E6%A0%97%E5%B1%B1%E6%9C%AA%E6%9D%A5">栗山未来(Kuriyama <b>mirai</b>)</a></p><br>     <p><a href = "https://www.crypton.co.jp/">CRYPTON</a>以<a href = "https://www.crypton.co.jp/miku_eng">初音未来</a>为代表的创作与活动<a href = "https://magicalmirai.com/2019/index_en.html">(Magical <b>mirai</b>)</a></p><br>图标以及形象由画师<a href = "https://github.com/DazeCake">DazeCake</a>绘制</p>
</div>

<h3 id="Mairi-消息类型"><a href="#Mairi-消息类型" class="headerlink" title="Mairi 消息类型"></a>Mairi 消息类型</h3><p>各类型消息元素及其 contentToString() 如下表格所示。</p>
<table>
<thead>
<tr>
<th align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/SingleMessage.kt">MessageContent</a> 类型</th>
<th align="left">解释</th>
<th align="left">contentToString()</th>
<th align="center">最低支持的版本</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/PlainText.kt">PlainText</a></td>
<td align="left">纯文本</td>
<td align="left"><code>$content</code></td>
<td align="center">2.0</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/Image.kt">Image</a></td>
<td align="left">自定义图片</td>
<td align="left"><code>[图片]</code></td>
<td align="center">2.0</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/At.kt">At</a></td>
<td align="left">提及某人</td>
<td align="left"><code>@$target</code></td>
<td align="center">2.0</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/AtAll.kt">AtAll</a></td>
<td align="left">提及全体成员</td>
<td align="left"><code>@全体成员</code></td>
<td align="center">2.0</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/Face.kt">Face</a></td>
<td align="left">原生表情</td>
<td align="left"><code>[表情对应的中文名]</code></td>
<td align="center">2.0</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/FlashImage.kt">FlashImage</a></td>
<td align="left">闪照</td>
<td align="left"><code>[闪照]</code></td>
<td align="center">2.0</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/PokeMessage.kt">PokeMessage</a></td>
<td align="left">戳一戳消息（消息非动作）</td>
<td align="left"><code>[戳一戳]</code></td>
<td align="center">2.0</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/VipFace.kt">VipFace</a></td>
<td align="left">VIP 表情</td>
<td align="left"><code>[$&#123;kind.name&#125;]x$count</code></td>
<td align="center">2.0</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/RichMessage.kt">LightApp</a></td>
<td align="left">小程序</td>
<td align="left"><code>$content</code></td>
<td align="center">2.0</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/Voice.kt">Voice</a></td>
<td align="left">语音（已弃用）</td>
<td align="left"><code>[语音消息]</code></td>
<td align="center">2.0  <em><sup>(3)</sup></em></td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/MarketFace.kt">MarketFace</a></td>
<td align="left">商城表情</td>
<td align="left"><code>[表情对应的中文名]</code></td>
<td align="center">2.0</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/ForwardMessage.kt">ForwardMessage</a></td>
<td align="left">合并转发</td>
<td align="left"><code>[转发消息]</code></td>
<td align="center">2.0  <em><sup>(1)</sup></em></td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/RichMessage.kt">SimpleServiceMessage</a></td>
<td align="left">（不稳定）服务消息</td>
<td align="left"><code>$content</code></td>
<td align="center">2.0</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/MusicShare.kt">MusicShare</a></td>
<td align="left">音乐分享</td>
<td align="left"><code>[分享]曲名</code></td>
<td align="center">2.1</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/Dice.kt">Dice</a></td>
<td align="left">魔法表情骰子</td>
<td align="left"><code>[骰子:$value]</code></td>
<td align="center">2.5</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/RockPaperScissors.kt">RockPaperScissors</a></td>
<td align="left">魔法表情猜拳</td>
<td align="left"><code>[石头]</code>&#x2F;<code>[剪刀]</code>&#x2F;<code>[布]</code></td>
<td align="center">2.14</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/FileMessage.kt">FileMessage</a></td>
<td align="left">文件消息</td>
<td align="left"><code>[文件]文件名称</code></td>
<td align="center">2.5</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/mamoe/mirai/blob/dev/mirai-core-api/src/commonMain/kotlin/message/data/Audio.kt">Audio</a></td>
<td align="left">语音</td>
<td align="left"><code>[语音消息]</code></td>
<td align="center">2.7</td>
</tr>
</tbody></table>
<h4 id="PlainText示例"><a href="#PlainText示例" class="headerlink" title="PlainText示例"></a>PlainText示例</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基础监听消息示例 subscribeGroupMessages 监听群消息</span></span><br><span class="line">    bot.eventChannel.subscribeGroupMessages &#123;</span><br><span class="line">        <span class="string">&quot;-test1&quot;</span> &#123;</span><br><span class="line">            <span class="keyword">val</span> newMessages = <span class="string">&quot;这是一个实列的文本消息，支持\n \t 来进行文字排版，空格在这里 \t 似乎不太好用&quot;</span></span><br><span class="line">            subject.sendMessage(newMessages)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// mirai的sendMessage方法可以直接放入一个String的字符串来进行文本发送如上，也可以使用 PlainText(&quot;Hello!&quot;)来构建一个 MessageContent</span></span><br><span class="line">        <span class="string">&quot;文本信息&quot;</span> &#123;</span><br><span class="line">            subject.sendMessage(PlainText(<span class="string">&quot;Hello!&quot;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="Image示例"><a href="#Image示例" class="headerlink" title="Image示例"></a>Image示例</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基础监听消息示例 subscribeGroupMessages 监听群消息</span></span><br><span class="line">    bot.eventChannel.subscribeGroupMessages &#123;</span><br><span class="line">        <span class="comment">// 发送图片 有两种方式</span></span><br><span class="line">        <span class="comment">// 1.使用图片的MiraiCode;MiraiCode的获取可以从Bot的消息日志中，查看到图片消息的原始消息，其中包含图片的MiraiCode</span></span><br><span class="line">        <span class="string">&quot;Image1&quot;</span> &#123;</span><br><span class="line">            subject.sendMessage(Image.fromId(<span class="string">&quot;&#123;E9A7782B-9F53-5F4A-9E41-FA53AA122707&#125;.gif&quot;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.本地上传并发送图片</span></span><br><span class="line">        <span class="string">&quot;Image2&quot;</span> &#123;</span><br><span class="line">            <span class="keyword">val</span> imageFile = File(<span class="string">&quot;src/main/resources/mirai.png&quot;</span>)</span><br><span class="line">            subject.sendImage(imageFile)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="AT示例"><a href="#AT示例" class="headerlink" title="AT示例"></a>AT示例</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基础监听消息示例 subscribeGroupMessages 监听群消息</span></span><br><span class="line">    bot.eventChannel.subscribeGroupMessages &#123;</span><br><span class="line">        <span class="string">&quot;At&quot;</span>&#123;</span><br><span class="line">            <span class="comment">//这是AT@所有人,遵循QQ规则，每天只能10次</span></span><br><span class="line">            subject.sendMessage(AtAll + <span class="string">&quot;起床啦！&quot;</span>)</span><br><span class="line">            <span class="comment">//AT@一个指定的QQ号</span></span><br><span class="line">            subject.sendMessage(At(<span class="number">98347293478L</span>) + <span class="string">&quot;睡觉啦！&quot;</span>)</span><br><span class="line">            <span class="comment">//AT@发送指令的人</span></span><br><span class="line">            subject.sendMessage(At(sender.id) + <span class="string">&quot;是你在召唤我？！&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="Face示例"><a href="#Face示例" class="headerlink" title="Face示例"></a>Face示例</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基础监听消息示例 subscribeGroupMessages 监听群消息</span></span><br><span class="line">    bot.eventChannel.subscribeGroupMessages &#123;</span><br><span class="line">        <span class="comment">// 表情ID:5是流泪的意思，更多ID对应的表情可以点进Face查看源码</span></span><br><span class="line">        <span class="string">&quot;表情&quot;</span>&#123;</span><br><span class="line">            subject.sendMessage(Face(<span class="number">5</span>) + <span class="string">&quot;哭哭&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="FlashImage示例"><a href="#FlashImage示例" class="headerlink" title="FlashImage示例"></a>FlashImage示例</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基础监听消息示例 subscribeGroupMessages 监听群消息</span></span><br><span class="line">    bot.eventChannel.subscribeGroupMessages &#123;</span><br><span class="line">         <span class="comment">// 发送闪照和发送图片一样的</span></span><br><span class="line">        <span class="string">&quot;闪照&quot;</span>&#123;</span><br><span class="line">            <span class="comment">//subject.sendMessage(FlashImage(Image.fromId(&quot;&#123;E9A7782B-9F53-5F4A-9E41-FA53AA122707&#125;.gif&quot;)))</span></span><br><span class="line">            <span class="keyword">val</span> imageFile = File(<span class="string">&quot;src/main/resources/mirai.png&quot;</span>)</span><br><span class="line">            <span class="keyword">val</span> uploadImage = subject.uploadImage(imageFile.toExternalResource())</span><br><span class="line">            subject.sendMessage(FlashImage(uploadImage))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="PokeMessage示例"><a href="#PokeMessage示例" class="headerlink" title="PokeMessage示例"></a>PokeMessage示例</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基础监听消息示例 subscribeGroupMessages 监听群消息</span></span><br><span class="line">    bot.eventChannel.subscribeGroupMessages &#123;</span><br><span class="line">        <span class="comment">//似乎没什么用，有一个拍了拍的事件</span></span><br><span class="line">        <span class="string">&quot;戳一戳&quot;</span>&#123;</span><br><span class="line">            subject.sendMessage(PokeMessage(<span class="string">&quot;比心&quot;</span>,<span class="number">2</span>,-<span class="number">1</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="LightApp示例"><a href="#LightApp示例" class="headerlink" title="LightApp示例"></a>LightApp示例</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基础监听消息示例 subscribeGroupMessages 监听群消息</span></span><br><span class="line">    bot.eventChannel.subscribeGroupMessages &#123;</span><br><span class="line">        <span class="comment">//LightApp 目前只会天气应用这一种。</span></span><br><span class="line">        <span class="string">&quot;小程序&quot;</span>&#123;</span><br><span class="line">            <span class="keyword">val</span> json = <span class="string">&quot;&#123;\&quot;app\&quot;:\&quot;com.tencent.weather\&quot;,\&quot;desc\&quot;:\&quot;天气\&quot;,\&quot;view\&quot;:\&quot;RichInfoView\&quot;,\&quot;ver\&quot;:\&quot;0.0.0.1\&quot;,\&quot;prompt\&quot;:\&quot;[应用]天气\&quot;,\&quot;meta\&quot;:&#123;\&quot;richinfo\&quot;:&#123;\&quot;adcode\&quot;:\&quot;\&quot;,\&quot;air\&quot;:\&quot;151\&quot;,\&quot;city\&quot;:\&quot;成都 \&quot;,\&quot;date\&quot;:\&quot; 2023-05-12 \&quot;,\&quot;max\&quot;:\&quot;26\&quot;,\&quot;min\&quot;:\&quot;18\&quot;,\&quot;ts\&quot;:\&quot;15158613\&quot;,\&quot;type\&quot;:\&quot;201\&quot;,\&quot;wind\&quot;:\&quot;\&quot;&#125;&#125;&#125;&quot;</span></span><br><span class="line">            subject.sendMessage(LightApp(json))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="MusicShare示例"><a href="#MusicShare示例" class="headerlink" title="MusicShare示例"></a>MusicShare示例</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基础监听消息示例 subscribeGroupMessages 监听群消息</span></span><br><span class="line">    bot.eventChannel.subscribeGroupMessages &#123;</span><br><span class="line">        <span class="string">&quot;点歌514&quot;</span>&#123;</span><br><span class="line">                <span class="keyword">val</span> musicShare = MusicShare(</span><br><span class="line">                    kind = MusicKind.NeteaseCloudMusic,</span><br><span class="line">                    title = <span class="string">&quot;514&quot;</span>,</span><br><span class="line">                    summary = <span class="string">&quot;Maritumix&quot;</span>,</span><br><span class="line">                    brief = <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    jumpUrl = <span class="string">&quot;http://music.163.com/song/72709841&quot;</span>,</span><br><span class="line">                    pictureUrl = <span class="string">&quot;https://p1.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg&quot;</span>,</span><br><span class="line">                    musicUrl = <span class="string">&quot;http://music.163.com/song/media/outer/url?id=72709841&quot;</span></span><br><span class="line">                )</span><br><span class="line">                subject.sendMessage(musicShare)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="Audio示例"><a href="#Audio示例" class="headerlink" title="Audio示例"></a>Audio示例</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基础监听消息示例 subscribeGroupMessages 监听群消息</span></span><br><span class="line">    bot.eventChannel.subscribeGroupMessages &#123;</span><br><span class="line">        <span class="string">&quot;语音&quot;</span>&#123;</span><br><span class="line">            <span class="keyword">val</span> audioFile = File(<span class="string">&quot;src/main/resources/mirai.amr&quot;</span>)</span><br><span class="line">            <span class="keyword">val</span> audio = group.uploadAudio(audioFile.toExternalResource())</span><br><span class="line">            subject.sendMessage(audio)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>MiraiBot</tag>
      </tags>
  </entry>
  <entry>
    <title>基于MiraiBot的简单开发（扩展监听方式）</title>
    <url>/2023/06/02/miraibot03/</url>
    <content><![CDATA[<h3 id="MiraiBot-简介"><a href="#MiraiBot-简介" class="headerlink" title="MiraiBot 简介"></a>MiraiBot 简介</h3><p>不写了</p>
<h3 id="监听的方式"><a href="#监听的方式" class="headerlink" title="监听的方式"></a>监听的方式</h3><p>虽然StartBot.kt里面的main函数中可以直接使用 <code>bot.eventChannel.subscribeGroupMessages</code> 来监听到bot的消息事件，但是为了更好的开发或者说监听类型分类，我们可以自定义LintenerHost，通过<code>bot.eventChannel.registerListenerHost</code>方法来注册到Bot的监听频道中。</p>
<h4 id="自定义ListenerHost"><a href="#自定义ListenerHost" class="headerlink" title="自定义ListenerHost"></a>自定义ListenerHost</h4><p>下面的例子说明了一个简单的群消息监听和文本回复，更多可以监听的事件可以查看Mirai的原文档：<a href="https://github.com/mamoe/mirai/blob/dev/docs/EventList.md">事件列表一览</a></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">object</span> BotListenerEvents : SimpleListenerHost( <span class="comment">/* override coroutineContext here */</span> ) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//GroupMessageEvent 普通的群消息</span></span><br><span class="line">    <span class="comment">//FriendMessageEvent 好友消息</span></span><br><span class="line">    <span class="comment">//GroupRecall 群撤回</span></span><br><span class="line">    <span class="comment">//NudgeEvent 戳一戳</span></span><br><span class="line">    <span class="comment">//GroupNameChangeEvent 群名改变</span></span><br><span class="line">    <span class="comment">//MemberJoinEvent 群成员加入</span></span><br><span class="line">    <span class="comment">//MemberLeaveEvent 群成员离开</span></span><br><span class="line">    <span class="meta">@EventHandler</span></span><br><span class="line">    <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> GroupMessageEvent.<span class="title">onMessage</span><span class="params">()</span></span>: ListeningStatus &#123; </span><br><span class="line">        <span class="comment">// 可以抛出任何异常, 将在 handleException 处理</span></span><br><span class="line">        <span class="comment">// 事件触发后 在此处编写对应的逻辑处理</span></span><br><span class="line">        <span class="comment">// 例如监听 群消息 “狼宝菜单” 。 当有人在群里发送“狼宝菜单”时，机器人会对应回复响应的文本消息。 </span></span><br><span class="line">        <span class="keyword">val</span> msg = message.contentToString()</span><br><span class="line">        <span class="keyword">when</span>&#123;</span><br><span class="line">                msg == <span class="string">&quot;狼宝菜单&quot;</span> -&gt;&#123;</span><br><span class="line">                    <span class="keyword">val</span> menuMessages = <span class="string">&quot;狼宝是一个个人开发的QQ机器人，当前版本0.1.5 \n当前功能：\n \t1.自定义消息：有人发[文本]你回[文本/图片] \n \t2.chatGpt: #chat[内容] \n \t3.漂流瓶：扔漂流瓶[内容]/捡漂流瓶 \n \t4.二次元图片：来张[关键词]涩图 \n狼宝使用过程中可能会收集部分信息，包含丘丘号码，昵称等，同时请勿利用狼宝发布平台违禁内容。\n如果你同意以上规范，可以输入[你好，狼宝！]来狼宝认识你。&quot;</span></span><br><span class="line">                    <span class="keyword">this</span>.group.sendMessage(menuMessages)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">     	<span class="keyword">return</span> ListeningStatus.LISTENING</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">handleException</span><span class="params">(context: <span class="type">CoroutineContext</span>, exception: <span class="type">Throwable</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.handleException(context, exception)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="注册自定义监听类"><a href="#注册自定义监听类" class="headerlink" title="注册自定义监听类"></a>注册自定义监听类</h4><p>编写好了<code>自定义监听类</code>之后还需要将其注册到Bot的eventChannel中。在StartBot.kt文件中添加下列代码</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">bot.eventChannel.registerListenerHost(BotGroupEvents)</span><br></pre></td></tr></table></figure>

<p><img src="https://resources.kagerou.top/img/blog/stratbot_events.webp" alt="StartBot.kt"></p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>接下来应该就是应该就是用户信息和权限管理相关的内容了，数据的持久化选用的是sqlite数据库。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>MiraiBot</tag>
      </tags>
  </entry>
  <entry>
    <title>基于MiraiBot的简单开发（权限管理）</title>
    <url>/2023/06/05/miraibot04/</url>
    <content><![CDATA[<h3 id="MiraiBot-简介"><a href="#MiraiBot-简介" class="headerlink" title="MiraiBot 简介"></a>MiraiBot 简介</h3><p>不写了</p>
<h3 id="功能构想"><a href="#功能构想" class="headerlink" title="功能构想"></a>功能构想</h3><p>最初简单的构想只是用来管理bot会响应那些群的消息，响应那些群员的消息，然后在赋予群内bot管理员，来管理那些群员可以被禁止和bot交互。</p>
<p>这部分并没有设计成 指令的管理，比如开启&#x2F;关闭某个指令。根本原因是我没有想好怎么实现方便一些。</p>
<h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><p>群在注册的时候获取到群的各项信息并保存起来，同时给出一个属性<code>open</code>来判断bot是否响应群内消息&#x2F;事件。</p>
<p>为了方便数据入库，使用的Kotlin ORM 框架是 <code>Ktorm</code> <a href="https://www.ktorm.org/zh-cn/">使用说明</a> <a href="https://github.com/kotlin-orm/ktorm">仓库链接</a></p>
<h4 id="QQ群实体的设计"><a href="#QQ群实体的设计" class="headerlink" title="QQ群实体的设计"></a>QQ群实体的设计</h4><p>字段： name(群名),number(群号码),open(bot是否响应),registryTime(注册时间)</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//top.kagerou.data.Group.kt</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Group</span> : <span class="type">Entity</span>&lt;<span class="type">Group</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> : Entity.Factory&lt;Group&gt;()</span><br><span class="line">    <span class="keyword">val</span> number: <span class="built_in">Long</span></span><br><span class="line">    <span class="keyword">val</span> name: String</span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">open</span>: String</span><br><span class="line">    <span class="keyword">val</span> registryTime :String</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="QQ群表对象的实现"><a href="#QQ群表对象的实现" class="headerlink" title="QQ群表对象的实现"></a>QQ群表对象的实现</h4><p>在表对象中，将数据库的表名和表字段名和程序设计的类中的各字段名一一绑定起来。下面代码中<code>引号</code>中的内容为数据库对应名称</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//top.kagerou.data.Groups.kt</span></span><br><span class="line"><span class="keyword">object</span> Groups : Table&lt;Group&gt;(<span class="string">&quot;t_group&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">val</span> number = long(<span class="string">&quot;group_number&quot;</span>).bindTo &#123; it.number &#125;</span><br><span class="line">    <span class="keyword">val</span> name = varchar(<span class="string">&quot;name&quot;</span>).bindTo &#123; it.name &#125;</span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">open</span> = varchar(<span class="string">&quot;is_open&quot;</span>).bindTo &#123; it.<span class="keyword">open</span> &#125;</span><br><span class="line">    <span class="keyword">val</span> registryTime = varchar(<span class="string">&quot;registry_time&quot;</span>).bindTo &#123; it.registryTime &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="QQ群数据表的创建"><a href="#QQ群数据表的创建" class="headerlink" title="QQ群数据表的创建"></a>QQ群数据表的创建</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_group</span><br><span class="line">(</span><br><span class="line">group_number <span class="type">NUMERIC</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">is_open <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">registry_time <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line"><span class="keyword">primary</span> key(group_number)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="QQ群数据操作对象的实现"><a href="#QQ群数据操作对象的实现" class="headerlink" title="QQ群数据操作对象的实现"></a>QQ群数据操作对象的实现</h4><p>根据业务简单的实现了部分方法,后续有新的群信息获取的地方可以再此继续添加对应逻辑。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">object</span> GroupService &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化配置信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> database = Database.connect(<span class="string">&quot;jdbc:sqlite:src/test/resources/Chinook.db&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">save</span><span class="params">(name:<span class="type">String</span>,number: <span class="type">Long</span>)</span></span>&#123;</span><br><span class="line">        database.insert(Groups)&#123;</span><br><span class="line">            <span class="keyword">set</span>(it.number,number)</span><br><span class="line">            <span class="keyword">set</span>(it.name,name)</span><br><span class="line">            <span class="keyword">set</span>(it.<span class="keyword">open</span>,<span class="string">&quot;open&quot;</span>)</span><br><span class="line">            <span class="keyword">set</span>(it.registryTime, LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyyMMdd&quot;</span>)))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">open</span><span class="params">(number: <span class="type">Long</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.change(number,<span class="string">&quot;open&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">close</span><span class="params">(number: <span class="type">Long</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.change(number,<span class="string">&quot;close&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">change</span><span class="params">(number: <span class="type">Long</span>, <span class="keyword">open</span>:<span class="type">String</span>)</span></span>&#123;</span><br><span class="line">        database.update(Groups)&#123;</span><br><span class="line">            <span class="keyword">set</span>(it.<span class="keyword">open</span>,<span class="keyword">open</span>)</span><br><span class="line">            <span class="keyword">where</span> &#123; it.number eq number &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">exist</span><span class="params">(number: <span class="type">Long</span>)</span></span>:<span class="built_in">Boolean</span>&#123;</span><br><span class="line">        <span class="keyword">val</span> groupNumber = database</span><br><span class="line">            .from(Groups)</span><br><span class="line">            .select(Groups.number)</span><br><span class="line">            .<span class="keyword">where</span>((Groups.number eq number) and (Groups.<span class="keyword">open</span> eq <span class="string">&quot;open&quot;</span>))</span><br><span class="line">            .map &#123; row -&gt; Groups.createEntity(row) &#125;</span><br><span class="line">        <span class="keyword">return</span> groupNumber.isNotEmpty()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="在自定义监听类中添加if判断"><a href="#在自定义监听类中添加if判断" class="headerlink" title="在自定义监听类中添加if判断"></a>在自定义监听类中添加if判断</h4><p>添加了if增加判断群是否已经注册了bot并且状态为open，bot才会对应响应对应的指令功能。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EventHandler</span></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> GroupMessageEvent.<span class="title">NormalMessage</span><span class="params">()</span></span>: ListeningStatus&#123;</span><br><span class="line">    <span class="keyword">val</span> msg = message.contentToString()</span><br><span class="line">    <span class="comment">//相比较，添加了if增加判断群是否已经注册了bot并且状态为open，bot才会对应响应对应的指令功能。</span></span><br><span class="line">    <span class="keyword">if</span> ( GroupService.exist(group.id)) &#123;</span><br><span class="line">        <span class="keyword">when</span>&#123;</span><br><span class="line">            msg == <span class="string">&quot;狼宝菜单&quot;</span> -&gt;&#123;</span><br><span class="line">                <span class="keyword">val</span> menuMessages = <span class="string">&quot;狼宝是一个个人开发的QQ机器人，当前版本0.1.5 \n当前功能：\n \t1.自定义消息：有人发[文本]你回[文本/图片] \n \t2.chatGpt: #chat[内容] \n \t3.漂流瓶：扔漂流瓶[内容]/捡漂流瓶 \n \t4.二次元图片：来张[关键词]涩图 \n狼宝使用过程中可能会收集部分信息，包含丘丘号码，昵称等，同时请勿利用狼宝发布平台违禁内容。\n如果你同意以上规范，可以输入[你好，狼宝！]来狼宝认识你。&quot;</span></span><br><span class="line">                <span class="keyword">this</span>.group.sendMessage(menuMessages)</span><br><span class="line">            &#125;</span><br><span class="line">            msg == <span class="string">&quot;你好，狼宝！&quot;</span> -&gt;&#123;</span><br><span class="line">                <span class="comment">//todo 个人群成员注册</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ListeningStatus.LISTENING</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>QQ群的权限管理比简单和单一，之后不出意外还会有对QQ群员的更细致的一个权限管理体系的设计和开发，因为重来没有对用户系统的设计和开发经验，这一块真的脑壳疼😣</p>
<p>下一章应该是实用的一些Bot功能的实现了。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>MiraiBot</tag>
      </tags>
  </entry>
  <entry>
    <title>基于MiraiBot的简单开发（自定义消息）</title>
    <url>/2023/06/27/miraibot05/</url>
    <content><![CDATA[<h3 id="MiraiBot-简介"><a href="#MiraiBot-简介" class="headerlink" title="MiraiBot 简介"></a>MiraiBot 简介</h3><p>不写了</p>
<h3 id="功能构想"><a href="#功能构想" class="headerlink" title="功能构想"></a>功能构想</h3><p>群员可以自定义一些关键词和消息内容，当机器人检测到该关键词时回自动回复关键词对应的消息内容。</p>
<h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><p>构建一个自定义消息类，来保存关键字和消息内容等信息。监听每一条群消息并与表中关键字匹配，如匹配则查询出自定义内容，发送到对应群内。若群消息与狼宝内置关键词匹配，则优先执行狼宝对应功能，否则不予理会。</p>
<p>为了方便数据入库，使用的Kotlin ORM 框架是 <code>Ktorm</code> <a href="https://www.ktorm.org/zh-cn/">使用说明</a> <a href="https://github.com/kotlin-orm/ktorm">仓库链接</a></p>
<h4 id="自定义消息实体的设计"><a href="#自定义消息实体的设计" class="headerlink" title="自定义消息实体的设计"></a>自定义消息实体的设计</h4><p>字段： group(群号),kwy(关键词),message(自定义消息),sender(发送者号码)</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//top.kagerou.data.CustomizeMessage.kt</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">CustomizeMessage</span> : <span class="type">Entity</span>&lt;<span class="type">CustomizeMessage</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> : Entity.Factory&lt;CustomizeMessage&gt;()</span><br><span class="line">    <span class="keyword">val</span> group: <span class="built_in">Long</span></span><br><span class="line">    <span class="keyword">val</span> key: String</span><br><span class="line">    <span class="keyword">val</span> message: String</span><br><span class="line">    <span class="keyword">val</span> sender :<span class="built_in">Long</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="自定义消息表对象的实现"><a href="#自定义消息表对象的实现" class="headerlink" title="自定义消息表对象的实现"></a>自定义消息表对象的实现</h4><p>在表对象中，将数据库的表名和表字段名和程序设计的类中的各字段名一一绑定起来。下面代码中<code>引号</code>中的内容为数据库对应名称</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//top.kagerou.data.CustomizeMessages.kt</span></span><br><span class="line"><span class="keyword">object</span> CustomizeMessages : Table&lt;CustomizeMessage&gt;(<span class="string">&quot;t_customize_message&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">val</span> group = long(<span class="string">&quot;group_number&quot;</span>).primaryKey().bindTo &#123; it.group &#125;</span><br><span class="line">    <span class="keyword">val</span> key = varchar(<span class="string">&quot;q_key&quot;</span>).bindTo &#123; it.key &#125;</span><br><span class="line">    <span class="keyword">val</span> message = varchar(<span class="string">&quot;q_message&quot;</span>).bindTo &#123; it.message &#125;</span><br><span class="line">    <span class="keyword">val</span> sender = long(<span class="string">&quot;sender_number&quot;</span>).bindTo &#123; it.sender &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="自定义消息数据表的创建"><a href="#自定义消息数据表的创建" class="headerlink" title="自定义消息数据表的创建"></a>自定义消息数据表的创建</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_customize_message</span><br><span class="line">(</span><br><span class="line">group_number <span class="type">NUMERIC</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">q_key <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">q_message <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">sender_number <span class="type">NUMERIC</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="自定义消息数据操作对象的实现"><a href="#自定义消息数据操作对象的实现" class="headerlink" title="自定义消息数据操作对象的实现"></a>自定义消息数据操作对象的实现</h4><p>根据业务简单的实现了部分方法</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义消息数据持久化的操作对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaohuliqibao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/6/25 15:38</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">object</span> CustomizeMessagesService &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化配置信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> database = Database.connect(<span class="string">&quot;jdbc:sqlite:src/test/resources/Chinook.db&quot;</span>)</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *描述: 保存自定义消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> group 群号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 关键词</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 自定义消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sender 发送人ID</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">save</span><span class="params">(group: <span class="type">Long</span>,key: <span class="type">String</span>,message: <span class="type">String</span>,sender: <span class="type">Long</span>)</span></span>&#123;</span><br><span class="line">        database.insert(CustomizeMessages)&#123;</span><br><span class="line">            <span class="comment">//set(it.id,1)</span></span><br><span class="line">            <span class="keyword">set</span>(it.group,group)</span><br><span class="line">            <span class="keyword">set</span>(it.key,key)</span><br><span class="line">            <span class="keyword">set</span>(it.message,message)</span><br><span class="line">            <span class="keyword">set</span>(it.sender, sender)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述: 通过关键词和群号查找对应的自定义消息，可能会查询不到，返回空字符串。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> group 群号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 关键词</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">findByKey</span><span class="params">(group: <span class="type">Long</span>, key: <span class="type">String</span>)</span></span>: String? &#123;</span><br><span class="line">        <span class="keyword">val</span> messageList = database.from(CustomizeMessages).select()</span><br><span class="line">            .<span class="keyword">where</span> &#123; (CustomizeMessages.group eq group) and (CustomizeMessages.key eq key) &#125;</span><br><span class="line">            .map &#123; row -&gt; CustomizeMessages.createEntity(row) &#125;</span><br><span class="line">        <span class="keyword">return</span> messageList.first()?.message</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述: 通过群号和关键词更新自定义消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> group 群号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 关键词</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 自定义消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sender 发送人ID</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">update</span><span class="params">(group: <span class="type">Long</span>,key: <span class="type">String</span>,message: <span class="type">String</span>,sender: <span class="type">Long</span>)</span></span>&#123;</span><br><span class="line">        database.update(CustomizeMessages)&#123;</span><br><span class="line">            <span class="keyword">set</span>(it.message,message)</span><br><span class="line">            <span class="keyword">set</span>(it.sender, sender)</span><br><span class="line">            <span class="keyword">where</span> &#123; (it.group eq group) and (it.key eq key) &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述: 判断是否存在关键词消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> group 群号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 关键词</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">exist</span><span class="params">(group: <span class="type">Long</span>, key: <span class="type">String</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> messageList = database.from(CustomizeMessages).select()</span><br><span class="line">            .<span class="keyword">where</span> &#123; (CustomizeMessages.group eq group) and (CustomizeMessages.key eq key) &#125;</span><br><span class="line">            .map &#123; row -&gt; CustomizeMessages.createEntity(row) &#125;</span><br><span class="line">        <span class="keyword">return</span> messageList.isNotEmpty()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述: 存在了-&gt; update,不存在-&gt; save</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> save</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> update</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">savePlus</span><span class="params">(group: <span class="type">Long</span>,key: <span class="type">String</span>,message: <span class="type">String</span>,sender: <span class="type">Long</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.exist(group,key))&#123;</span><br><span class="line">            <span class="keyword">this</span>.update(group, key, message, sender)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.save(group, key, message, sender)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述:删除自定义消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> group 群号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oldKey 要删除的关键词</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">delete</span><span class="params">(group: <span class="type">Long</span>, oldKey: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        database.delete(CustomizeMessages)&#123;</span><br><span class="line">            (it.group eq group) and (it.key eq oldKey)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="在QQ群事件监听类中添加一个单独的消息事件监听"><a href="#在QQ群事件监听类中添加一个单独的消息事件监听" class="headerlink" title="在QQ群事件监听类中添加一个单独的消息事件监听"></a>在QQ群事件监听类中添加一个单独的消息事件监听</h4><p>设置的增加监听的关键词为“有人发key你回message”,删除监听的关键词为“不再回复key”<br>以下市具体实现</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EventHandler</span></span><br><span class="line">    <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> GroupMessageEvent.<span class="title">CustomizeMessage</span><span class="params">()</span></span>: ListeningStatus&#123;</span><br><span class="line">        <span class="keyword">val</span> msg = message.contentToString()</span><br><span class="line">        <span class="keyword">if</span> ( GroupService.exist(group.id)) &#123;</span><br><span class="line">            <span class="keyword">when</span> &#123;</span><br><span class="line">                msg.startsWith(<span class="string">&quot;有人发&quot;</span>) &amp;&amp; msg.contains(<span class="string">&quot;你回&quot;</span>) -&gt; &#123;</span><br><span class="line">                    <span class="keyword">val</span> split = msg.subSequence(<span class="number">3</span>,msg.length).split(<span class="string">&quot;你回&quot;</span>)</span><br><span class="line">                    <span class="keyword">val</span> newKey = split[<span class="number">0</span>]</span><br><span class="line">                    <span class="keyword">val</span> newMessage = split[<span class="number">1</span>]</span><br><span class="line">                    CustomizeMessagesService.savePlus(group.id,newKey,newMessage,sender.id)</span><br><span class="line">                    <span class="keyword">this</span>.group.sendMessage(<span class="string">&quot;好的，狼宝记住了&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                msg.startsWith(<span class="string">&quot;不再回复&quot;</span>) -&gt; &#123;</span><br><span class="line">                    <span class="keyword">val</span> oldKey = msg.substring(<span class="number">4</span>,msg.length)</span><br><span class="line">                    CustomizeMessagesService.delete(group.id,oldKey)</span><br><span class="line">                    <span class="keyword">this</span>.group.sendMessage(<span class="string">&quot;好的，已经没有[<span class="variable">$oldKey</span>]&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                !msg.startsWith(<span class="string">&quot;不再回复&quot;</span>) || !msg.startsWith(<span class="string">&quot;有人发&quot;</span>) || !msg.contains(<span class="string">&quot;你回&quot;</span>) -&gt;&#123;</span><br><span class="line">                    <span class="keyword">val</span> customizeMessage = CustomizeMessagesService.findByKey(group.id, msg)</span><br><span class="line">                    <span class="keyword">if</span> (customizeMessage != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="comment">//todo 实现回复自定义图片</span></span><br><span class="line">                        <span class="keyword">this</span>.group.sendMessage(customizeMessage)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ListeningStatus.LISTENING</span><br><span class="line">    &#125;    </span><br></pre></td></tr></table></figure>

<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>自定义消息的实现，是机器人监听功能和数据库交互的一个简单的例子。其中&#x2F;&#x2F;todo 还可以实现回复自定义的图片等其他非简单文本的消息，可以继续探索Mirai的消息系统来实现。</p>
<p>下一章应该是对网络api服务使用和实现了。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>MiraiBot</tag>
      </tags>
  </entry>
  <entry>
    <title>基于MiraiBot的简单开发（网易云点歌）</title>
    <url>/2023/06/29/miraibot06/</url>
    <content><![CDATA[<h3 id="MiraiBot-简介"><a href="#MiraiBot-简介" class="headerlink" title="MiraiBot 简介"></a>MiraiBot 简介</h3><p>不写了</p>
<h3 id="功能构想"><a href="#功能构想" class="headerlink" title="功能构想"></a>功能构想</h3><p>群员可以通过发送“点歌[歌名]”指令让狼宝回复对应歌曲卡片内容。</p>
<h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><p>识别指令后，获取到歌名之后，根据API构建OKHTTP3.request，一般包含[url]，[param]，[header]。然后创建OKHTTP3.client，来向API请求request中的请求，最后将获取OKHTTP3.response，使用alibaba.fastjson2从中提取出需要的[songName]，[songId]，[artisName]，[albumPicUrl]，最后构建音乐卡片信息发送到群内。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gm=&gt;operation: 获取歌名</span><br><span class="line">cr=&gt;operation: 创建request</span><br><span class="line">cc=&gt;operation: 创建client并执行</span><br><span class="line">gr=&gt;operation: 获取response</span><br><span class="line">pr=&gt;operation: 解析response获取歌曲信息</span><br><span class="line">cmc=&gt;operation: 创建音乐卡片</span><br><span class="line">sg=&gt;operation: 发送群内</span><br><span class="line">gm-&gt;cr-&gt;cc-&gt;gr-&gt;pr-&gt;cmc-&gt;sg</span><br></pre></td></tr></table></figure>

<h4 id="获取歌名"><a href="#获取歌名" class="headerlink" title="获取歌名"></a>获取歌名</h4><p>截取消息除点歌外后面信息</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">msg.startsWith(<span class="string">&quot;点歌&quot;</span>) -&gt; &#123;</span><br><span class="line">    <span class="comment">//获取歌名</span></span><br><span class="line">    <span class="keyword">val</span> song = msg.substring(<span class="number">2</span>,msg.length)</span><br><span class="line">    println(song)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="创建request"><a href="#创建request" class="headerlink" title="创建request"></a>创建request</h4><p>分别构建httpUrl，headers并将param加入到httpUrl中。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置API信息</span></span><br><span class="line"><span class="keyword">val</span> CLOUDMUSICAPI = <span class="string">&quot;http://music.163.com/api/search/pc&quot;</span></span><br><span class="line"><span class="keyword">val</span> params = mutableMapOf&lt;String, String&gt;(<span class="string">&quot;s&quot;</span> to song, <span class="string">&quot;type&quot;</span> to <span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> headers = Headers.headersOf(</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>,</span><br><span class="line">    <span class="string">&quot;NMTID=00OROY9zyHPYl3__EqTgjOOsH0yh2sAAAGA1axg4Q&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">val</span> httpUrl = CLOUDMUSICAPI.toHttpUrl().newBuilder()</span><br><span class="line"><span class="keyword">if</span> (params != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (param <span class="keyword">in</span> params)&#123;</span><br><span class="line">        httpUrl.addQueryParameter(param.key,param.value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> request = Request.Builder().url(httpUrl.build()).headers(headers).build();</span><br></pre></td></tr></table></figure>

<h4 id="创建client后执行request并获取response"><a href="#创建client后执行request并获取response" class="headerlink" title="创建client后执行request并获取response"></a>创建client后执行request并获取response</h4><p>创建client后通过newCall(request).execute()来获取到响应的response实例，然后再获取到实际的响应data放置在responseStr中，最后关闭response。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建client</span></span><br><span class="line"><span class="keyword">val</span> client = OkHttpClient()</span><br><span class="line"><span class="keyword">var</span> responseStr = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> response = client.newCall(request).execute()</span><br><span class="line">    responseStr =  response.body!!.string()</span><br><span class="line">    <span class="keyword">if</span>(response.body != <span class="literal">null</span>) &#123;</span><br><span class="line">        response.body!!.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span> (e: IOException)&#123;</span><br><span class="line">    log.info(<span class="string">&quot;Get Request Error!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="解析response获取-songName-，-songId-，-artisName-，-albumPicUrl"><a href="#解析response获取-songName-，-songId-，-artisName-，-albumPicUrl" class="headerlink" title="解析response获取[songName]，[songId]，[artisName]，[albumPicUrl]"></a>解析response获取[songName]，[songId]，[artisName]，[albumPicUrl]</h4><p>解析response的data数据，具体怎么写，可以学习alibaba.fastjson。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//处理查询结果，获取想要的数据</span></span><br><span class="line"><span class="keyword">val</span> songsJsonArray = JSON.parseObject(responseStr).getJSONObject(<span class="string">&quot;result&quot;</span>).getJSONArray(<span class="string">&quot;songs&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> songJsonObject = songsJsonArray.getJSONObject(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">val</span> songName = songJsonObject.getString(<span class="string">&quot;name&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> songId = songJsonObject.getLong(<span class="string">&quot;id&quot;</span>).toString()</span><br><span class="line"><span class="keyword">val</span> artisName = songJsonObject.getJSONArray(<span class="string">&quot;artists&quot;</span>).getJSONObject(<span class="number">0</span>).getString(<span class="string">&quot;name&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> albumPicUrl = songJsonObject.getJSONObject(<span class="string">&quot;album&quot;</span>).getString(<span class="string">&quot;picUrl&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="创建音乐卡片并发送到群内"><a href="#创建音乐卡片并发送到群内" class="headerlink" title="创建音乐卡片并发送到群内"></a>创建音乐卡片并发送到群内</h4><p>创建音乐卡片，配置内容：</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">内容</th>
</tr>
</thead>
<tbody><tr>
<td align="center">kind</td>
<td align="center">音乐卡片类型</td>
</tr>
<tr>
<td align="center">title</td>
<td align="center">歌名</td>
</tr>
<tr>
<td align="center">summary</td>
<td align="center">专辑名</td>
</tr>
<tr>
<td align="center">brief</td>
<td align="center">忘了</td>
</tr>
<tr>
<td align="center">jumpUrl</td>
<td align="center">歌曲链接</td>
</tr>
<tr>
<td align="center">pictureUrl</td>
<td align="center">封面图片链接</td>
</tr>
<tr>
<td align="center">musicUrl</td>
<td align="center">歌曲播放链接</td>
</tr>
</tbody></table>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配饰音乐卡片消息并发送</span></span><br><span class="line"><span class="keyword">val</span> musicShare = MusicShare(</span><br><span class="line">        kind = MusicKind.NeteaseCloudMusic,</span><br><span class="line">        title = songName,</span><br><span class="line">        summary = artisName,</span><br><span class="line">        brief = <span class="string">&quot;&quot;</span>,</span><br><span class="line">        jumpUrl = CLOUDMUSICJUMPURL + songId,</span><br><span class="line">        pictureUrl = albumPicUrl,</span><br><span class="line">        musicUrl = CLOUDMUSICURL + songId</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">this</span>.group.sendMessage(musicShare)</span><br></pre></td></tr></table></figure>

<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>一个简单的对公共网络API的调用和音乐卡片的消息类型的实践。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>MiraiBot</tag>
      </tags>
  </entry>
  <entry>
    <title>基于MiraiBot的开发（自定义回复图片）</title>
    <url>/2023/07/07/miraibot07/</url>
    <content><![CDATA[<h3 id="MiraiBot-简介"><a href="#MiraiBot-简介" class="headerlink" title="MiraiBot 简介"></a>MiraiBot 简介</h3><p>不写了</p>
<h3 id="功能差异"><a href="#功能差异" class="headerlink" title="功能差异"></a>功能差异</h3><p>这部分属于前篇<a href="https://blog.kagerou.top/2023/06/27/miraibot05/">自定义消息</a>中的拓展开发，自定义回复图片内容。之前是回复的消息都是简单的文本消息，可以从单个MessageChain中获取到完成的key和value属性，同时在发送消息的时候可以直接发送简单文本。<br>而自定义图片的区别的在于，文本消息和图片消息在两个顺序的MessageChain中，并且在发送消息的时候需要去构建的Image类型的消息。难点构建一个完整的Image消息。</p>
<h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><h4 id="修改mgs的获取方式"><a href="#修改mgs的获取方式" class="headerlink" title="修改mgs的获取方式"></a>修改mgs的获取方式</h4><p>前篇中我们使用了message.contentToString()来简单的获取文本消息，在Message.kt的源码中写出了方法的介绍<code>转为接近官方格式的字符串, 即 &quot;内容&quot;.</code>也就是说转化之后的msg，在接受到每一张图片都是“图片”文本字符。为了获取到详细的图片的信息，我们这里需要使用message.toString()来取得最原始的消息信息。Message中包含了MessageMetadata 消息元数据 和 MessageContent 含内容的消息。这里我们暂时不用消息元数据，需要过滤掉。获得完整的含内容的消息。</p>
<p><img src="https://resources.kagerou.top/img/blog/Message01.webp" alt="message01"></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> messageContent = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span>.message.size - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    messageContent += message[i].toString()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> msg = messageContent</span><br></pre></td></tr></table></figure>

<h4 id="回复自定义图片内容"><a href="#回复自定义图片内容" class="headerlink" title="回复自定义图片内容"></a>回复自定义图片内容</h4><p>按照2.15.0-M1版本来看，储存到数据库的图片消息应该是“[mirai:image:{BD4394DD-E387-7E36-E0CD-E24F4A0403E1}.jpg, width&#x3D;453, height&#x3D;560, size&#x3D;112256, type&#x3D;JPG, isEmoji&#x3D;false]”这个内容。<br>若是普通的jpg或者png格式的静态图片，使用图片ID,通过Image.fromId(“{BD4394DD-E387-7E36-E0CD-E24F4A0403E1}.jpg”)，即可以构造简单的图片消息；<br>但是在测试的时候，发现动态的gif图片，Image.fromId() 构建后发送，图片就不动了。所有使用另一种图片的构建方式：InternalImageProtocol.instance.createImage()</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@OptIn(MiraiInternalApi::class)</span> <span class="comment">//方法上添加注解，IDEA会提示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//done 实现回复自定义图片</span></span><br><span class="line"><span class="keyword">if</span> (customizeMessage.contains(<span class="string">&quot;mirai:image&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//构建图片 原数据[mirai:image:&#123;BD4394DD-E387-7E36-E0CD-E24F4A0403E1&#125;.jpg, width=453, height=560, size=112256, type=JPG, isEmoji=false]</span></span><br><span class="line">    <span class="comment">//解析过程有点抽象，建议封装</span></span><br><span class="line">    <span class="keyword">val</span> map: MutableMap&lt;String,String&gt; = mutableMapOf()</span><br><span class="line">    <span class="keyword">val</span> split = customizeMessage.split(<span class="string">&quot;, &quot;</span>.toRegex())</span><br><span class="line">    map[<span class="string">&quot;imageId&quot;</span>] = split[<span class="number">0</span>].substring(<span class="number">13</span>,split[<span class="number">0</span>].length)</span><br><span class="line">    Arrays.stream(split.dropLastWhile &#123; it.isEmpty() &#125;.toTypedArray())</span><br><span class="line">          .filter &#123; kv: String -&gt; kv.contains(<span class="string">&quot;=&quot;</span>) &#125;</span><br><span class="line">          .map &#123; kv: String -&gt; kv.split(<span class="string">&quot;=&quot;</span>.toRegex()).dropLastWhile &#123; it.isEmpty() &#125;.toTypedArray() &#125;</span><br><span class="line">          .forEach&#123; array: Array&lt;String&gt; -&gt; map[array[<span class="number">0</span>]] = array[<span class="number">1</span>] &#125;</span><br><span class="line">    <span class="keyword">val</span> image = InternalImageProtocol.instance.createImage(map[<span class="string">&quot;imageId&quot;</span>].toString(),map[<span class="string">&quot;size&quot;</span>].toString().toLong(),ImageType.match(map[<span class="string">&quot;type&quot;</span>].toString()),map[<span class="string">&quot;width&quot;</span>].toString().toInt(),map[<span class="string">&quot;height&quot;</span>].toString().toInt(),<span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">this</span>.group.sendMessage(image)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.group.sendMessage(customizeMessage)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>若是简单的发送静态图片，可以试试下面比较简单方式。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//done 实现回复自定义图片</span></span><br><span class="line"><span class="keyword">if</span> (customizeMessage.contains(<span class="string">&quot;mirai:image&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//构建图片 原数据[mirai:image:&#123;BD4394DD-E387-7E36-E0CD-E24F4A0403E1&#125;.jpg, width=453, height=560, size=112256, type=JPG, isEmoji=false]</span></span><br><span class="line">    <span class="comment">//只需要获取到图片ID</span></span><br><span class="line">    <span class="keyword">val</span> map: MutableMap&lt;String,String&gt; = mutableMapOf()</span><br><span class="line">    <span class="keyword">val</span> split = customizeMessage.split(<span class="string">&quot;, &quot;</span>.toRegex())</span><br><span class="line">    <span class="keyword">val</span> image = Image.fromId(split[<span class="number">0</span>].substring(<span class="number">13</span>,split[<span class="number">0</span>].length))</span><br><span class="line">    <span class="keyword">this</span>.group.sendMessage(image)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.group.sendMessage(customizeMessage)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>把之前挖的肯填上了，用户的权限和积分系统还在摸鱼，摸不出来啊，总觉得写法很笨拙，也没有这方面经验，恼火。总想着用注解来写。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>MiraiBot</tag>
      </tags>
  </entry>
  <entry>
    <title>基于MiraiBot的开发（定时推送新闻消息）</title>
    <url>/2023/07/19/miraibot08/</url>
    <content><![CDATA[<h4 id="Kotlin定时任务"><a href="#Kotlin定时任务" class="headerlink" title="Kotlin定时任务"></a>Kotlin定时任务</h4><p>Kotlin的定时任务主要通过Timer().schedule()和TimerTask()来实现</p>
<p>schedule()需要三个参数 可执行的方法、开始时间、执行间隔时间(毫秒)，参考源码获取更多Timer().schedule()的信息</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Timer().schedule(</span><br><span class="line">        <span class="keyword">object</span>: TimerTask()&#123;</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">                println(<span class="string">&quot;每1秒钟打印一次，Date()表示立刻开始&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, Date(),<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="获取每日新闻图片"><a href="#获取每日新闻图片" class="headerlink" title="获取每日新闻图片"></a>获取每日新闻图片</h4><p>这一部分属于简单的API调用操作。分为 请求API-&gt;解析结果-&gt;获取资源链接-&gt;下载资源。主要使用的工具类OKhttp4和Alibaba JSON2</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取新闻图片url</span></span><br><span class="line"><span class="keyword">val</span> DAILYNEWSAPI = <span class="string">&quot;https://v2.alapi.cn/api/zaobao&quot;</span></span><br><span class="line"><span class="keyword">val</span> APITOKEN = <span class="string">&quot;**************&quot;</span></span><br><span class="line"><span class="keyword">val</span> params = mutableMapOf(<span class="string">&quot;token&quot;</span> to APITOKEN,<span class="string">&quot;format&quot;</span> to <span class="string">&quot;json&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> headers = Headers.headersOf(<span class="string">&quot;Content-Type&quot;</span> , <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> result = OkHttpClientUtil.getHttpRespondToString(DAILYNEWSAPI, params, headers)</span><br><span class="line"><span class="keyword">val</span> imageUrl = JSON.parseObject(result).getJSONObject(<span class="string">&quot;data&quot;</span>).getString(<span class="string">&quot;image&quot;</span>)</span><br><span class="line">println(imageUrl)</span><br><span class="line"><span class="keyword">var</span> imagePath: String</span><br><span class="line"><span class="comment">//判断系统适配下载路径</span></span><br><span class="line"><span class="keyword">if</span> (System.getProperty(<span class="string">&quot;os.name&quot;</span>).lowercase().contains(<span class="string">&quot;linux&quot;</span>)) &#123; imagePath = <span class="string">&quot;/root/file/resources/img/mirai/&quot;</span> &#125;<span class="keyword">else</span>&#123; imagePath = <span class="string">&quot;./&quot;</span> &#125;</span><br><span class="line"><span class="comment">//下载图片文件到本地</span></span><br><span class="line"><span class="keyword">val</span> imageTitle: String = LocalDate.now().toString()</span><br><span class="line"><span class="keyword">val</span> imageFile: File = OkHttpClientUtil.saveImageFile(imagePath,imageUrl,imageTitle,<span class="string">&quot;.png&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>OkHttpClientUtil.kt</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">object</span> OkHttpClientUtil &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> client = OkHttpClient()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getHttpRespondToString</span><span class="params">(url: <span class="type">String</span>,params: <span class="type">MutableMap</span>&lt;<span class="type">String</span>,String&gt;,headers: <span class="type">Headers</span>)</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">val</span> httpUrl = url.toHttpUrl().newBuilder()</span><br><span class="line">        <span class="keyword">var</span> responseStr = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (params != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (param <span class="keyword">in</span> params)&#123;</span><br><span class="line">                httpUrl.addQueryParameter(param.key,param.value)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> request = Request.Builder().url(httpUrl.build()).headers(headers).build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">val</span> response = client.newCall(request).execute()</span><br><span class="line">            responseStr =  response.body!!.string()</span><br><span class="line">            <span class="keyword">if</span>(response.body != <span class="literal">null</span>) &#123;</span><br><span class="line">                response.body!!.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (e: IOException)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Get Request Error!&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> responseStr</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在网络上下载图片到本地，使用的是okhttp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imageUrl 图片链接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imageTitle 图片标题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imageFormat 图片文件后缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imagePath 保存地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> File</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException IO异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">saveImageFile</span><span class="params">(imagePath: <span class="type">String</span>,imageUrl: <span class="type">String</span>,imageTitle: <span class="type">String</span>,imageFormat: <span class="type">String</span>)</span></span>: File&#123;</span><br><span class="line">        <span class="keyword">val</span> imageFile = File(imagePath + imageTitle + imageFormat)</span><br><span class="line">        <span class="keyword">val</span> request = Request.Builder().url(imageUrl).build();</span><br><span class="line">        <span class="keyword">val</span> fos: FileOutputStream</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fos = FileOutputStream(imageFile)</span><br><span class="line">            <span class="keyword">val</span> response: Response = client.newCall(request).execute()</span><br><span class="line">            Objects.requireNonNull(response.body)?.bytes()?.let &#123; fos.write(it) &#125;</span><br><span class="line">            fos.close()</span><br><span class="line">            response.close()</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: IOException) &#123;</span><br><span class="line">            e.printStackTrace()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  imageFile</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="狼宝应用实际开发"><a href="#狼宝应用实际开发" class="headerlink" title="狼宝应用实际开发"></a>狼宝应用实际开发</h4><p>这段代码放在了StartBot.kt中 bot.login()之后 bot.join()之前的位置。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//明早9点</span></span><br><span class="line"><span class="keyword">val</span> date = LocalDateTime.parse(<span class="string">&quot;<span class="subst">$&#123;LocalDate.now().plusDays(<span class="number">1</span>)&#125;</span>090000&quot;</span>, DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-ddHHmmss&quot;</span>))</span><br><span class="line">        .atZone(ZoneId.systemDefault()).toInstant()</span><br><span class="line">Timer().schedule(</span><br><span class="line">    <span class="keyword">object</span>: TimerTask()&#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">            <span class="comment">//获取open的群列表</span></span><br><span class="line">            <span class="keyword">val</span> groupList = GroupService.getOpenGroups()</span><br><span class="line">            <span class="comment">//获取新闻图片url</span></span><br><span class="line">            <span class="keyword">val</span> DAILYNEWSAPI = <span class="string">&quot;https://v2.alapi.cn/api/zaobao&quot;</span></span><br><span class="line">            <span class="keyword">val</span> APITOKEN = <span class="string">&quot;vpu5ehavLNShzQ5a&quot;</span></span><br><span class="line">            <span class="keyword">val</span> params = mutableMapOf(<span class="string">&quot;token&quot;</span> to APITOKEN,<span class="string">&quot;format&quot;</span> to <span class="string">&quot;json&quot;</span>)</span><br><span class="line">            <span class="keyword">val</span> headers = Headers.headersOf(<span class="string">&quot;Content-Type&quot;</span> , <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line">            <span class="keyword">val</span> result = OkHttpClientUtil.getHttpRespondToString(DAILYNEWSAPI, params, headers)</span><br><span class="line">            <span class="keyword">val</span> imageUrl = JSON.parseObject(result).getJSONObject(<span class="string">&quot;data&quot;</span>).getString(<span class="string">&quot;image&quot;</span>)</span><br><span class="line">            println(imageUrl)</span><br><span class="line">            <span class="keyword">var</span> imagePath: String</span><br><span class="line">            <span class="comment">//判断系统适配下载路径</span></span><br><span class="line">            <span class="keyword">if</span> (System.getProperty(<span class="string">&quot;os.name&quot;</span>).lowercase().contains(<span class="string">&quot;linux&quot;</span>)) &#123; imagePath = <span class="string">&quot;/root/file/resources/img/mirai/&quot;</span> &#125;<span class="keyword">else</span>&#123; imagePath = <span class="string">&quot;./&quot;</span> &#125;</span><br><span class="line">            <span class="comment">//下载图片文件到本地</span></span><br><span class="line">            <span class="keyword">val</span> imageTitle: String = LocalDate.now().toString()</span><br><span class="line">            <span class="keyword">val</span> imageFile: File = OkHttpClientUtil.saveImageFile(imagePath,imageUrl,imageTitle,<span class="string">&quot;.png&quot;</span>)</span><br><span class="line">            groupList.forEach &#123; group: Group -&gt;</span><br><span class="line">                println(group.number)</span><br><span class="line">                bot.getGroup(group.number)?.sendImage(imageFile)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, Date.from(date),<span class="number">86400000</span>) <span class="comment">//开始于明早9点，间隔24小时执行一次</span></span><br></pre></td></tr></table></figure>

<h4 id="实际效果和结语"><a href="#实际效果和结语" class="headerlink" title="实际效果和结语"></a>实际效果和结语</h4><p>稳定上线了再说吧。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>MiraiBot</tag>
      </tags>
  </entry>
  <entry>
    <title>基于MiraiBot的开发（接入ChatGPT）</title>
    <url>/2023/08/02/miraibot09/</url>
    <content><![CDATA[<p>摸鱼太久没写博客已经不知道怎么写了。</p>
<h4 id="Kotlin使用okhttp3对OpenAI的API的调用示例"><a href="#Kotlin使用okhttp3对OpenAI的API的调用示例" class="headerlink" title="Kotlin使用okhttp3对OpenAI的API的调用示例"></a>Kotlin使用okhttp3对OpenAI的API的调用示例</h4><p>先在这里放一个<a href="https://platform.openai.com/docs/api-reference/introduction">官方文档</a></p>
<p>我们需要关注的三个关键参数是： API的地址、API的KEY、构建的消息块</p>
<p><a href="https://api.openai.com/v1/chat/completions">https://api.openai.com/v1/chat/completions</a></p>
<p>Bearer sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gpt-3.5-turbo&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Say this is a test!&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;temperature&quot;</span><span class="punctuation">:</span> <span class="number">0.7</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>原始的curl示例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://api.openai.com/v1/chat/completions </span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> </span><br><span class="line">  -H <span class="string">&quot;Authorization: Bearer <span class="variable">$OPENAI_API_KEY</span>&quot;</span> </span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">     &quot;model&quot;: &quot;gpt-3.5-turbo&quot;,</span></span><br><span class="line"><span class="string">     &quot;messages&quot;: [&#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Say this is a test!&quot;&#125;],</span></span><br><span class="line"><span class="string">     &quot;temperature&quot;: 0.7</span></span><br><span class="line"><span class="string">   &#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>先使用Headers.headersOf()构建一个Header信息，把‘Content-Type’和‘Authorization’的内容放进去</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> headers = Headers.headersOf(<span class="string">&quot;Authorization&quot;</span>,<span class="string">&quot;Bearer sk-xxxxxx&quot;</span>,<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/json;charset=utf-8&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>在使用fastjson2来构建要发送的消息体，其中包含提问的模型信息和交流的问题等各类参数。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> chatMsgInfo = JSONArray.of(JSONObject.of(<span class="string">&quot;role&quot;</span>, <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>, <span class="string">&quot;Say this is a test!&quot;</span>))</span><br><span class="line"><span class="keyword">var</span> chatInfo = JSONObject.of(<span class="string">&quot;model&quot;</span>, <span class="string">&quot;gpt-3.5-turbo&quot;</span>, <span class="string">&quot;messages&quot;</span>, chatMsgInfo)</span><br></pre></td></tr></table></figure>

<p>构建request请求体，选择POST方式把URL,Header和param放入请求体中。为JSONObject类型的chatInfo需要转化一下类型：chatInfo.toString().toRequestBody(“application&#x2F;json;charset&#x3D;utf-8”.toMediaType())</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> request = Request.Builder().url(<span class="string">&quot;https://api.openai.com/v1/chat/completions&quot;</span>).headers(headers).post(chatInfo.toString().toRequestBody(<span class="string">&quot;application/json;charset=utf-8&quot;</span>.toMediaType())).build()</span><br></pre></td></tr></table></figure>

<p>构建请求客户端，与通常不同的是由于网络因素，需要配置代理和请求超时等。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> client = OkHttpClient.Builder() <span class="comment">//设置代理 .proxy(Proxy(Proxy.Type.SOCKS, InetSocketAddress(&quot;127.0.0.1&quot;, 8080)))</span></span><br><span class="line">            .connectTimeout(<span class="number">60L</span>, TimeUnit.SECONDS) <span class="comment">//连接超时</span></span><br><span class="line">            .readTimeout(<span class="number">60L</span>, TimeUnit.SECONDS) <span class="comment">//读超时</span></span><br><span class="line">            .writeTimeout(<span class="number">60L</span>, TimeUnit.SECONDS) <span class="comment">//写超时</span></span><br><span class="line">            .build()</span><br></pre></td></tr></table></figure>

<p>发起请求和解析返回的消息体，client.newCall(request).execute()直接请求，返回的格式体如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;chatcmpl-xxxxxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;chat.completion&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">1690959173</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gpt-3.5-turbo-0613&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;choices&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;This is a test!&quot;</span></span><br><span class="line">               <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;finish_reason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;stop&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">     <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;usage&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;prompt_tokens&quot;</span><span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;completion_tokens&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;total_tokens&quot;</span><span class="punctuation">:</span> <span class="number">18</span></span><br><span class="line">     <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>需要的内容为choices.message.content 里面的内容。解析过程如下</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> response = client.newCall(request).execute()</span><br><span class="line">    <span class="keyword">var</span> content = JSONObject.parseObject(response.body!!.string()).getJSONArray(<span class="string">&quot;choices&quot;</span>).getJSONObject(<span class="number">0</span>)</span><br><span class="line">        .getJSONObject(<span class="string">&quot;message&quot;</span>).getString(<span class="string">&quot;content&quot;</span>).toString()</span><br><span class="line">    println(content)</span><br><span class="line">    <span class="keyword">if</span>(response.body != <span class="literal">null</span>) &#123;</span><br><span class="line">        response.body!!.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span> (e: IOException)&#123;</span><br><span class="line">    println(e.message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上就是使用okhttp简单的访问OpenAPI的过程。</p>
<h4 id="接入miraibot"><a href="#接入miraibot" class="headerlink" title="接入miraibot"></a>接入miraibot</h4><p>贴代码吧，没什么区别。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">msg.startsWith(<span class="string">&quot;#chat&quot;</span>) -&gt;&#123;</span><br><span class="line">    <span class="keyword">val</span> chatMsg = msg.substring(<span class="number">5</span>, msg.length)</span><br><span class="line">    <span class="keyword">val</span> OPENAPI = <span class="string">&quot;https://api.openai.com/v1/chat/completions&quot;</span></span><br><span class="line">    <span class="keyword">val</span> headers = Headers.headersOf(<span class="string">&quot;Authorization&quot;</span>,<span class="string">&quot;Bearer sk-xxx&quot;</span>,<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/json;charset=utf-8&quot;</span>)</span><br><span class="line">    <span class="comment">//val localhostProxy: Proxy = Proxy(Proxy.Type.SOCKS, InetSocketAddress(&quot;127.0.0.1&quot;, 10808))</span></span><br><span class="line">    <span class="comment">// &quot;&#123; &quot;model&quot;: &quot;gpt-3.5-turbo&quot;,&quot;messages&quot;: [&#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Hello!&quot;&#125;] &#125;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> chatMsgInfo = JSONArray.of(JSONObject.of(<span class="string">&quot;role&quot;</span>, <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>, chatMsg))</span><br><span class="line">    <span class="keyword">var</span> chatInfo = JSONObject.of(<span class="string">&quot;model&quot;</span>, <span class="string">&quot;gpt-3.5-turbo&quot;</span>, <span class="string">&quot;messages&quot;</span>, chatMsgInfo)</span><br><span class="line">    println(chatInfo.toString())</span><br><span class="line">    <span class="keyword">val</span> request = Request.Builder().url(OPENAPI).headers(headers).post(chatInfo.toString().toRequestBody(<span class="string">&quot;application/json;charset=utf-8&quot;</span>.toMediaType())).build()</span><br><span class="line">    <span class="keyword">var</span> client = OkHttpClient.Builder() <span class="comment">//设置代理</span></span><br><span class="line">        .connectTimeout(<span class="number">60L</span>, TimeUnit.SECONDS) <span class="comment">//连接超时</span></span><br><span class="line">        .readTimeout(<span class="number">60L</span>, TimeUnit.SECONDS) <span class="comment">//读取超时</span></span><br><span class="line">        .writeTimeout(<span class="number">60L</span>, TimeUnit.SECONDS) <span class="comment">//写超时</span></span><br><span class="line">        .build()</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> response = client.newCall(request).execute()</span><br><span class="line">        <span class="keyword">var</span> content = JSONObject.parseObject(response.body!!.string()).getJSONArray(<span class="string">&quot;choices&quot;</span>).getJSONObject(<span class="number">0</span>)</span><br><span class="line">            .getJSONObject(<span class="string">&quot;message&quot;</span>).getString(<span class="string">&quot;content&quot;</span>).toString()</span><br><span class="line">        <span class="keyword">this</span>.group.sendMessage(message.quote() + At(sender.id) + content  )</span><br><span class="line">        <span class="comment">//LangBaoServer.updateMoney(sender.id,-1,sender.id)</span></span><br><span class="line">        <span class="keyword">if</span>(response.body != <span class="literal">null</span>) &#123;</span><br><span class="line">            response.body!!.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (e: IOException)&#123;</span><br><span class="line">        println(e.message)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里是at机器人触发所以是机器人的qq号</span></span><br><span class="line">msg.startsWith(<span class="string">&quot;@22&quot;</span>) -&gt;&#123;</span><br><span class="line">    <span class="comment">//用redis来缓存prompt数据</span></span><br><span class="line">    <span class="keyword">val</span> jedis: Jedis = Jedis(<span class="string">&quot;xxx.xxx.xxx.xxx&quot;</span>,<span class="number">6379</span>)</span><br><span class="line">    jedis.auth(<span class="string">&quot;xxxxxx&quot;</span>)</span><br><span class="line">    <span class="comment">//Todo 存在Bug 当Redis数据库没有数据时 get方法会抛出异常， 处理方案 1.判断并使用set赋予初始值[-]; 2.在用户注册时同时初始化Redis数据库; 3.设置指令初始化账户 也可用于prompt数据</span></span><br><span class="line">    <span class="keyword">val</span> prompt = jedis.<span class="keyword">get</span>(group.id.toString()+<span class="string">&quot;-&quot;</span>+ sender.id.toString()).substring(<span class="number">1</span>).dropLast(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">//这里的substring(11, msg.length)的11是因为前面有10位都是QQ号</span></span><br><span class="line">    <span class="keyword">val</span> chatMsg = prompt + msg.substring(<span class="number">11</span>, msg.length)</span><br><span class="line">    <span class="keyword">val</span> context = prompt.split(<span class="string">&quot;,&quot;</span>).toMutableList()</span><br><span class="line">    <span class="comment">// prompt 设置为5，表示缓存的上下文长度为5条消息</span></span><br><span class="line">    <span class="keyword">if</span> (context.size &lt; <span class="number">5</span>) &#123;</span><br><span class="line">        context.add(msg.substring(<span class="number">11</span>, msg.length))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        context.removeAt(<span class="number">0</span>)</span><br><span class="line">        context.add(msg.substring(<span class="number">11</span>, msg.length))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> OPENAPI = <span class="string">&quot;https://api.openai.com/v1/completions&quot;</span></span><br><span class="line">    <span class="keyword">val</span> headers = Headers.headersOf(<span class="string">&quot;Authorization&quot;</span>,<span class="string">&quot;Bearer sk-xxxxxxxx&quot;</span>,<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/json;charset=utf-8&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> localhostProxy: Proxy = Proxy(Proxy.Type.SOCKS, InetSocketAddress(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>))</span><br><span class="line">    <span class="keyword">var</span> chatInfo = JSONObject.of(<span class="string">&quot;model&quot;</span>, <span class="string">&quot;text-davinci-003&quot;</span>, <span class="string">&quot;prompt&quot;</span>, chatMsg,<span class="string">&quot;max_tokens&quot;</span>,<span class="number">500</span>)</span><br><span class="line">    println(chatInfo.toString())</span><br><span class="line">    <span class="keyword">val</span> request = Request.Builder().url(OPENAPI).headers(headers).post(chatInfo.toString().toRequestBody(<span class="string">&quot;application/json;charset=utf-8&quot;</span>.toMediaType())).build()</span><br><span class="line">    <span class="keyword">var</span> client = OkHttpClient.Builder()<span class="comment">//.proxy(localhostProxy) //设置代理</span></span><br><span class="line">        .connectTimeout(<span class="number">60L</span>, TimeUnit.SECONDS) <span class="comment">//连接超时</span></span><br><span class="line">        .readTimeout(<span class="number">60L</span>, TimeUnit.SECONDS) <span class="comment">//读取超时</span></span><br><span class="line">        .writeTimeout(<span class="number">60L</span>, TimeUnit.SECONDS) <span class="comment">//写超时</span></span><br><span class="line">        .build()</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> response = client.newCall(request).execute()</span><br><span class="line">        <span class="keyword">var</span> content = JSONObject.parseObject(response.body!!.string()).getJSONArray(<span class="string">&quot;choices&quot;</span>).getJSONObject(<span class="number">0</span>).getString(<span class="string">&quot;text&quot;</span>).toString()</span><br><span class="line">        <span class="keyword">this</span>.group.sendMessage(message.quote() + At(sender.id) + content.replace(<span class="string">&quot;/n&quot;</span>,<span class="string">&quot; &quot;</span>)  )</span><br><span class="line">        <span class="comment">//LangBaoServer.updateMoney(sender.id,-1,sender.id)</span></span><br><span class="line">        <span class="comment">// prompt 设置为5，表示缓存的上下文长度为5条消息</span></span><br><span class="line">        <span class="keyword">if</span> (context.size &lt; <span class="number">5</span>) &#123;</span><br><span class="line">            context.add(content)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            context.removeAt(<span class="number">0</span>)</span><br><span class="line">            context.add(content)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(response.body != <span class="literal">null</span>) &#123;</span><br><span class="line">            response.body!!.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (e: IOException)&#123;</span><br><span class="line">        println(e.message)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将新一轮的prompt存入数据库</span></span><br><span class="line">    jedis.<span class="keyword">set</span>(group.id.toString()+<span class="string">&quot;-&quot;</span>+ sender.id.toString(),context.toString()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清空prompt，过长的prompt会导致token的快速消耗</span></span><br><span class="line">msg == <span class="string">&quot;#update prompt&quot;</span> -&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> jedis: Jedis = Jedis(<span class="string">&quot;...&quot;</span>,<span class="number">6379</span>)</span><br><span class="line">    jedis.auth(<span class="string">&quot;Xxxx&quot;</span>)</span><br><span class="line">    jedis.<span class="keyword">set</span>(group.id.toString()+<span class="string">&quot;-&quot;</span>+ sender.id.toString(),<span class="string">&quot;[-]&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>MiraiBot</tag>
      </tags>
  </entry>
  <entry>
    <title>手动安装nodejs并配置环境变量(zsh个人版)</title>
    <url>/2023/05/10/nodejs-install/</url>
    <content><![CDATA[<h3 id="NodeJS简介"><a href="#NodeJS简介" class="headerlink" title="NodeJS简介"></a>NodeJS简介</h3><p>&#x2F;&#x2F;todo</p>
<h3 id="下载Nodejs程序包"><a href="#下载Nodejs程序包" class="headerlink" title="下载Nodejs程序包"></a>下载Nodejs程序包</h3><p>请根据时间使用最新或者指定的nodejs版本链接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">md /root/soft &amp;&amp; <span class="built_in">cd</span> /root/soft</span><br><span class="line">wget https://nodejs.org/dist/v18.16.0/node-v18.16.0-linux-x64.tar.xz </span><br></pre></td></tr></table></figure>

<h3 id="解压tar-xz压缩包"><a href="#解压tar-xz压缩包" class="headerlink" title="解压tar.xz压缩包"></a>解压tar.xz压缩包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xf node-v18.16.0-linux-x64.tar.xz </span><br><span class="line"><span class="built_in">mv</span> node-v18.16.0-linux-x64 node18</span><br><span class="line"><span class="built_in">rm</span> node-v18.16.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>

<h3 id="配置环境变量-x2F-etc-x2F-zprofile"><a href="#配置环境变量-x2F-etc-x2F-zprofile" class="headerlink" title="配置环境变量&#x2F;etc&#x2F;.zprofile"></a>配置环境变量&#x2F;etc&#x2F;.zprofile</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># /etc/zprofile and ~/.zprofile are run for login shells</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"></span></span><br><span class="line">export NODE_HOME=/root/soft/node18</span><br><span class="line">PATH=&quot;$PATH:$HOME/bin:$NODE_HOME/bin&quot;</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">_src_etc_profile()</span><br><span class="line">&#123;</span><br><span class="line">    #  Make /etc/profile happier, and have possible ~/.zshenv options like</span><br><span class="line">    # NOMATCH ignored.</span><br><span class="line">    #</span><br><span class="line">    emulate -L ksh</span><br><span class="line"></span><br><span class="line">    # source profile</span><br><span class="line">    if [ -f /etc/profile ]; then</span><br><span class="line">	    source /etc/profile</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line">_src_etc_profile</span><br><span class="line"></span><br><span class="line">unset -f _src_etc_profile</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>最后使用source &#x2F;etc&#x2F;zprofile 来使配置生效。</p>
<h3 id="检查配置结果"><a href="#检查配置结果" class="headerlink" title="检查配置结果"></a>检查配置结果</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line"><span class="comment">#v18.16.0</span></span><br><span class="line">npm -v</span><br><span class="line"><span class="comment">#9.5.1</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库中的tnsnames.ora文件及网络配置</title>
    <url>/2023/07/12/oracle-tns/</url>
    <content><![CDATA[<h3 id="tnsnames-ora文件"><a href="#tnsnames-ora文件" class="headerlink" title="tnsnames.ora文件"></a>tnsnames.ora文件</h3><p>在上一篇文章中讲到了 <code>$ORACLE_HOME/network/admin</code> 目录下的 tnsnames.ora 文件，我们通过toad软件来完成了一个链接的配置。配置之后的文件内容大致为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">QIBAO =  //QIBAO 是此链接的别名</span><br><span class="line">  (DESCRIPTION = </span><br><span class="line">    (ADDRESS = </span><br><span class="line">      (PROTOCOL = TCP) //协议方式默认为TCP</span><br><span class="line">      (HOST = 10.11.34.89) //数据库地址，也可以是主机名，但需要能正常解析到</span><br><span class="line">      (PORT = 1521) //数据库监听端口，需要和服务端listener.ora中配置一样，默认为1521</span><br><span class="line">    )</span><br><span class="line">    (CONNECT_DATA = </span><br><span class="line">      (SERVER = default) </span><br><span class="line">      (SERVICE_NAME = NEWDATABASE) // 链接的Schema名称，也可以成为具体的数据库库名称</span><br><span class="line">    )</span><br><span class="line">  )</span><br></pre></td></tr></table></figure>

<p>TNS配置链接常用的使用方法是在sqlplus中使用命令行直接链接数据库，如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlplus username/password@QIBAO </span><br></pre></td></tr></table></figure>

<p>@后面接的就是在TNSNAMES.ORA文件中配置的链接的别名。一些数据管理软件也可以通过读取本地Oracle client的tns配置来进行数据库链接，比如Toad for Oracle。</p>
<h3 id="什么是TNS-ADMIN变量"><a href="#什么是TNS-ADMIN变量" class="headerlink" title="什么是TNS_ADMIN变量"></a>什么是TNS_ADMIN变量</h3><p>TNS_ADMIN 一般配置为tnsnames.ora文件所在的目录。如<code>$ORACLE_HOME/network/admin</code>。<br>他的作用是当你的计算机上存在多份tnsnames.ora配置文件的时候，手动更改TNS_ADMIN变量，来灵活的切换Oracle client优先选择的tnsnames.ora配置文件。TNS_ADMIN系统环境变量的优先级高于注册表，如果设置了环境变量，那么就会忽略注册表的值。</p>
<h3 id="sqlnet-ora文件"><a href="#sqlnet-ora文件" class="headerlink" title="sqlnet.ora文件"></a>sqlnet.ora文件</h3><p>sqlnet.ora文件中我们通常配置：连接数据库的认证方式和连接地址解析方式。通过Toad配置出来的sqlnet.ora文件如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SQLNET.AUTHENTICATION_SERVICES= (NTS) </span><br><span class="line">NAMES.DIRECTORY_PATH=(TNSNAME,EZCONNECT)</span><br><span class="line">LOG_DIRECTORY_CLIENT=C:\Users\93031\AppData\Roaming\Quest Software\Toad for Oracle\16.1\User Files\LOG</span><br><span class="line">SQLNET.EXPIRE_TIME=0</span><br><span class="line">TRACE_FILELEN_CLIENT=100</span><br><span class="line">TRACE_FILENO_CLIENT=3</span><br><span class="line">TRACE_LEVEL_CLIENT=OFF</span><br><span class="line">TRACE_TIMESTAMP_CLIENT=ON</span><br><span class="line">TRACE_UNIQUE_CLIENT=ON</span><br><span class="line">USE_DEDICATED_SERVER=OFF</span><br></pre></td></tr></table></figure>

<p>SQLNET.AUTHENTICATION_SERVICES 指定启动一个或多个认证服务<br>    - NONE: 不允许通过OS系统用户登录数据库，需要提供用户名及密码<br>    - ALL: 允许所有的登录方式<br>    - NTS: 允许本地操作系统用户认证</p>
<p>NAMES.DIRECTORY_PATH 指定CLIENT NAME解析方法的次序<br>    - TNSNAME：从tnsnames.ora开始解析地址     sqlplus username&#x2F;password@QIBAO<br>    - EZCONNECT：可以使用简单的方式连接Oracle  CONNECT username&#x2F;password@host[:port][&#x2F;service_name][&#x2F;instance_name]  </p>
<p>如果你是使用Toad中Direct的方式连接数据库，也记得在NAMES.DIRECTORY_PATH中添加上EZCONNECT。</p>
<h3 id="listener-ora文件"><a href="#listener-ora文件" class="headerlink" title="listener.ora文件"></a>listener.ora文件</h3><p>服务器端的，不写了，用不上。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据表的透视函数Pivot（行转列）</title>
    <url>/2023/06/28/oracle_pivot/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>行转列，依照实际的业务需求，在Oracle数据库中创建相应的透视&#x2F;交叉表。推荐阅读官方文档 <a href="https://www.oracle.com/cn/technical-resources/articles/database/sql-11g-pivot.html">透视和逆透视</a></p>
<h3 id="透视（行转列）"><a href="#透视（行转列）" class="headerlink" title="透视（行转列）"></a>透视（行转列）</h3><p>原查询语句为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> p.Prod_date,p.INDEX_NAME ,p.ITEM_VALUE </span><br><span class="line"><span class="keyword">FROM</span> PC_SPL_REPORT_INDEX_ITEM p</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">AND</span> p.REPORT_ID <span class="operator">=</span> <span class="string">&#x27;16673814706151363&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> p.INDEX_NAME <span class="keyword">IN</span> (<span class="string">&#x27;商品量&#x27;</span>,<span class="string">&#x27;工业产量&#x27;</span>,<span class="string">&#x27;销售量&#x27;</span>) </span><br><span class="line"><span class="keyword">AND</span> to_char(p.Prod_date,<span class="string">&#x27;yyyy&#x27;</span>) <span class="operator">=</span> to_char(sysdate,<span class="string">&#x27;yyyy&#x27;</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> p.Prod_date,p.INDEX_NAME</span><br></pre></td></tr></table></figure>

<p>查询结果为：</p>
<p>| Prod_date  | INDEX_NAME  |  ITEM_VALUE  |<br>| :—-：   | :—-:  | :—-:  |<br>| 2023-01-01 | 商品量   |   6154086  |<br>| 2023-01-01 | 工业产量 |   6308353  |<br>| 2023-01-01 | 销售量   |   7632859  |<br>| 2023-01-02 | 商品量   |   6260378  |<br>| 2023-01-02 | 工业产量 |   6341415  |<br>| 2023-01-02 | 销售量   |   7293744  |<br>| 2023-01-03 | 商品量   |   6396051  |<br>| 2023-01-03 | 工业产量 |   6350111  |<br>| 2023-01-03 | 销售量   |   7571332  |</p>
<p>我们需要把Index_Name字段横行排列，形成新的交叉表，以方便我们在后续的报表上使用，这个时候就要使用到pivot函数。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> p.Prod_date,p.INDEX_NAME ,p.ITEM_VALUE </span><br><span class="line">	<span class="keyword">FROM</span> PC_SPL_REPORT_INDEX_ITEM p</span><br><span class="line">	<span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">	<span class="keyword">AND</span> p.REPORT_ID <span class="operator">=</span> <span class="string">&#x27;16673814706151363&#x27;</span></span><br><span class="line">	<span class="keyword">AND</span> p.INDEX_NAME <span class="keyword">IN</span> (<span class="string">&#x27;商品量&#x27;</span>,<span class="string">&#x27;工业产量&#x27;</span>,<span class="string">&#x27;销售量&#x27;</span>) </span><br><span class="line">	<span class="keyword">AND</span> to_char(p.Prod_date,<span class="string">&#x27;yyyy&#x27;</span>) <span class="operator">=</span> to_char(sysdate,<span class="string">&#x27;yyyy&#x27;</span>)</span><br><span class="line">	<span class="keyword">ORDER</span> <span class="keyword">BY</span> p.Prod_date,p.INDEX_NAME</span><br><span class="line">)PIVOT</span><br><span class="line">(</span><br><span class="line"><span class="built_in">SUM</span>(ITEM_VALUE) <span class="keyword">AS</span> <span class="keyword">VALUE</span> <span class="keyword">FOR</span> INDEX_NAME <span class="keyword">IN</span> (<span class="string">&#x27;商品量&#x27;</span> <span class="keyword">AS</span> SPL,<span class="string">&#x27;工业产量&#x27;</span> <span class="keyword">AS</span> GYCL,<span class="string">&#x27;销售量&#x27;</span> <span class="keyword">AS</span> XSL )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>查询后的结果为：</p>
<p>| Prod_date  | SPL_VALUE  |  GYCL_VALUE  |  XSL_VALUE |<br>| :—-：   | :—-:  | :—-:  | :—-:  |<br>| 2023-01-01 |6154086	|6308353 |	7632859 |<br>| 2023-01-02 |6260378	|6341415 |	7293744 |<br>| 2023-01-03 |6396051	|6350111 |	7571332 |</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>除了透视pivot函数Oracle 11g还提供了反透视unpivot函数，可以将列转换为行。具体的使用还得看实际的业务场景了。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库的缓存管理机制</title>
    <url>/2023/08/02/oracledatabase-sga/</url>
    <content><![CDATA[<p>在之前的学习中，有幸学习过有关SGA的一些内容，但都是简单的介绍了其中的模块和对应的作用，当时也是刚接触到Oracle数据库，所以听下来都是一知半解，最近又接触到GPT之后，才想着用机器人来检索一下这方面的知识。</p>
<h3 id="Oracle的缓存管理机制"><a href="#Oracle的缓存管理机制" class="headerlink" title="Oracle的缓存管理机制"></a>Oracle的缓存管理机制</h3><p>Oracle数据库的内存管理机制是基于SGA（System Global Area，系统全局区域）和PGA（Program Global Area，程序全局区域）的概念。</p>
<ol>
<li><p>SGA（System Global Area）：<br>SGA是Oracle数据库实例在内存中分配的一块共享内存区域，用于存储全局的数据和结构。SGA包括以下关键组件：</p>
<ul>
<li>数据缓冲区（Data Buffer Cache）：用于缓存数据库块（数据和索引）的内存区域，减少磁盘I&#x2F;O操作。</li>
<li>共享池（Shared Pool）：存储共享的SQL和PL&#x2F;SQL代码、数据字典缓存和共享游标等，提高SQL执行效率。</li>
<li>重做日志缓冲区（Redo Log Buffer）：用于缓存事务的重做日志信息，以支持数据库的恢复和故障恢复。</li>
<li>大池（Large Pool）：存储较大的内存块，用于处理特定的操作，如备份和并行查询等。</li>
<li>Java池（Java Pool）：用于存储Java对象和Java执行环境相关的内存结构。</li>
<li>其他组件：包括SGA目标、缓冲区管理器等。</li>
</ul>
<p>Oracle数据库管理员可以通过参数调整来配置SGA的大小和组件的分配比例，以满足特定的性能需求。</p>
</li>
<li><p>PGA（Program Global Area）：<br>PGA是每个Oracle进程（如Server进程和后台进程）独立分配的内存区域，用于存储会话级别的数据和结构。PGA包括以下关键组件：</p>
<ul>
<li>排序区（Sort Area）：用于排序操作的内存区域。</li>
<li>连接区（Session Memory）：存储会话级别的变量、游标和会话状态等信息。</li>
<li>临时表区（Temporary Table Area）：用于存储临时表的数据。</li>
<li>其他组件：包括SQL Work Area、PL&#x2F;SQL表和游标等。</li>
</ul>
<p>PGA的大小和分配是由Oracle自动管理的，但管理员可以通过参数调整来影响PGA的行为和资源分配。</p>
</li>
</ol>
<p>通过合理配置和管理SGA和PGA，可以优化Oracle数据库的性能和资源利用率。管理员可以根据系统的负载、应用程序的需求和硬件资源的限制来进行调整，并监控内存使用情况以及性能指标，以确保数据库的稳定和高效运行。</p>
<h3 id="什么是SGA"><a href="#什么是SGA" class="headerlink" title="什么是SGA"></a>什么是SGA</h3><p>SGA（System Global Area）是Oracle数据库实例在内存中分配的一块共享内存区域，包括多个组件，每个组件都有不同的作用和功能。以下是SGA中每个组件的详细介绍：</p>
<ol>
<li><p>数据缓冲区（Data Buffer Cache）：<br>数据缓冲区是SGA中最重要的组件之一，用于缓存数据库块（数据和索引）的内存区域。它的主要作用是减少磁盘I&#x2F;O操作，提高数据库的读取性能。当用户请求数据时，Oracle首先在数据缓冲区中查找数据块，如果找到则直接返回给用户，避免了磁盘读取的开销。</p>
</li>
<li><p>共享池（Shared Pool）：<br>共享池存储了共享的SQL和PL&#x2F;SQL代码、数据字典缓存和共享游标等。它的主要作用是提高SQL执行的效率和共享可重用的内存结构。当用户提交SQL语句时，Oracle首先检查共享池中是否存在相同的SQL语句，如果存在则直接使用已编译的执行计划，避免了重复的解析和优化过程。</p>
</li>
<li><p>重做日志缓冲区（Redo Log Buffer）：<br>重做日志缓冲区用于缓存事务的重做日志信息。在每个事务提交时，相关的重做日志记录会被写入重做日志缓冲区，然后由后台进程将其刷新到磁盘上的重做日志文件中。重做日志缓冲区的作用是支持数据库的恢复和故障恢复，确保事务的持久性和数据的一致性。</p>
</li>
<li><p>大池（Large Pool）：<br>大池是一个可选的组件，用于存储较大的内存块，主要用于处理特定的操作，如备份和并行查询等。大池的作用是提供额外的内存空间，以减轻SGA的压力，特别是在执行复杂操作时需要更多的临时内存空间。</p>
</li>
<li><p>Java池（Java Pool）：<br>Java池用于存储Java对象和Java执行环境相关的内存结构，主要用于支持Oracle数据库中的Java应用程序和Java虚拟机（JVM）。Java池的作用是提供Java执行所需的内存资源，包括Java类定义、Java堆栈和Java对象等。</p>
</li>
</ol>
<p>除了上述主要组件之外，SGA还包括其他一些辅助组件，如SGA目标（SGA Target）、缓冲区管理器（Buffer Cache Manager）等。SGA目标是一种自动管理机制，用于根据系统负载和资源需求动态调整SGA的大小。缓冲区管理器负责管理数据缓冲区的内容和替换策略，以保证高效的数据访问和存储。</p>
<p>通过合理配置和调整SGA的大小和组件的分配比例，可以根据系统的需求和资源限制来优化Oracle数据库的性能和资源利用率。管理员可以根据实际情况进行监控和调整，以确保SGA的稳定和高效运行。</p>
<h4 id="什么是数据缓冲区"><a href="#什么是数据缓冲区" class="headerlink" title="什么是数据缓冲区"></a>什么是数据缓冲区</h4><p>数据缓冲区（Data Buffer Cache）是Oracle数据库SGA（System Global Area）中的一个组件，用于缓存数据库块（数据和索引）的内存区域。数据缓冲区主要存储以下类型的数据：</p>
<ol>
<li><p>数据块（Data Blocks）：<br>数据块是Oracle数据库中最基本的存储单位，用于存储表、索引和簇等对象的数据。当用户请求读取或修改表中的数据时，相关的数据块会被加载到数据缓冲区中。数据块的大小通常是Oracle数据库块大小的整数倍（通常为8KB），并且数据块是按需读取和写入的。</p>
</li>
<li><p>索引块（Index Blocks）：<br>索引块用于存储数据库索引的数据。索引是一种数据结构，用于加快对表数据的访问速度。当用户执行查询语句时，如果涉及到索引的使用，相关的索引块会被加载到数据缓冲区中，以提供更快的索引访问。</p>
</li>
<li><p>控制块（Control Blocks）：<br>控制块包括数据块头（Data Block Header）和索引块头（Index Block Header）等。它们存储了有关数据块和索引块的元数据信息，如块的状态、版本号、块的大小等。控制块通常也会被加载到数据缓冲区中，以支持对数据块和索引块的管理和访问。</p>
</li>
</ol>
<p>当用户请求读取或修改数据库中的数据时，Oracle数据库会首先检查数据缓冲区中是否已经存在相应的数据块或索引块。如果存在，则直接从数据缓冲区中读取或修改数据，避免了磁盘I&#x2F;O操作，从而提高了数据库的读取性能。如果数据缓冲区中不存在所需的数据块或索引块，则需要从磁盘读取相应的块到数据缓冲区中，然后再进行数据访问或修改。</p>
<p>通过数据缓冲区，Oracle数据库能够在内存中缓存常用的数据块和索引块，以提供更快的数据访问速度，并减少对磁盘的频繁读写，从而提高数据库的性能和响应速度。</p>
<h4 id="数据缓冲区的数据是如何更替的？"><a href="#数据缓冲区的数据是如何更替的？" class="headerlink" title="数据缓冲区的数据是如何更替的？"></a>数据缓冲区的数据是如何更替的？</h4><p>数据缓冲区中数据块的替换是通过缓冲区管理器（Buffer Cache Manager）来进行的。缓冲区管理器负责管理数据缓冲区的内容和替换策略，以确保高效的数据访问和存储。</p>
<p>Oracle数据库使用了一种称为LRU（Least Recently Used，最近最少使用）算法来进行数据块的替换。LRU算法基于以下原则：最近被访问的数据块是最有可能在未来被再次访问的，而较长时间没有被访问的数据块则可能被替换出缓冲区。</p>
<p>当需要将一个新的数据块加载到数据缓冲区时，缓冲区管理器会首先检查数据缓冲区中是否有空闲的位置。如果有空闲位置，则将新的数据块直接放入空闲位置，并更新相关的元数据信息。</p>
<p>如果数据缓冲区已满，缓冲区管理器需要选择一个合适的数据块进行替换。它会根据LRU算法选择最久未被访问的数据块进行替换。具体的替换过程如下：</p>
<ol>
<li><p>缓冲区管理器维护一个链表，称为LRU链表（Least Recently Used List），用于记录数据缓冲区中数据块的访问顺序。最近被访问的数据块位于链表的前端，而最久未被访问的数据块位于链表的末尾。</p>
</li>
<li><p>当需要替换一个数据块时，缓冲区管理器会选择链表末尾的数据块进行替换，即选择最久未被访问的数据块。</p>
</li>
<li><p>替换选中的数据块之前，缓冲区管理器会将其中的脏数据（已被修改但尚未写回磁盘的数据）写回到磁盘，以确保数据的持久性。</p>
</li>
<li><p>替换完成后，新的数据块会被加载到空出的位置，并更新LRU链表的顺序，将新的数据块放置在链表的前端。</p>
</li>
</ol>
<p>通过使用LRU算法，Oracle数据库能够保持数据缓冲区中的常用数据块，提高数据的访问速度。同时，较长时间未被访问的数据块会被替换出缓冲区，以保持缓冲区的有效利用和适应变化的访问模式。</p>
<h4 id="ARC自适应缓存交替算法"><a href="#ARC自适应缓存交替算法" class="headerlink" title="ARC自适应缓存交替算法"></a>ARC自适应缓存交替算法</h4><p>ARC（Adaptive Replacement Cache，自适应缓存交替）算法是一种用于替换数据缓冲区中数据块的混合算法，它结合了LRU算法和LFU算法的特性，旨在提供更好的缓存性能。</p>
<p>ARC算法的设计目标是在不同的访问模式下自适应地选择最适合的替换策略。它维护两个列表：T1和T2。T1列表用于记录最近被访问的数据块，类似于LRU算法；T2列表用于记录最常被访问的数据块，类似于LFU算法。</p>
<p>ARC算法的替换过程如下：</p>
<ol>
<li><p>当需要替换一个数据块时，ARC算法首先检查T1列表，如果数据块在T1列表中，则选择最近未被访问的数据块进行替换，类似于LRU算法。</p>
</li>
<li><p>如果数据块不在T1列表中，ARC算法会检查T2列表。如果数据块在T2列表中，则选择最近未被访问的数据块进行替换，类似于LRU算法。</p>
</li>
<li><p>如果数据块既不在T1列表中也不在T2列表中，ARC算法需要根据当前的访问模式来进行调整。它会根据两个列表的大小比例来判断当前的访问模式是偏向于LRU还是LFU。如果T1列表的大小比例较大，说明当前偏向于LRU访问模式，ARC算法会选择从T1列表中选择最近未被访问的数据块进行替换。如果T2列表的大小比例较大，说明当前偏向于LFU访问模式，ARC算法会选择从T2列表中选择最近未被访问的数据块进行替换。</p>
</li>
<li><p>替换完成后，ARC算法会根据替换的结果来调整T1和T2列表的大小，以适应不同的访问模式。如果替换的数据块来自T1列表，ARC算法会将一部分T1列表的数据块移动到T2列表中。如果替换的数据块来自T2列表，ARC算法会将一部分T2列表的数据块移动到T1列表中。</p>
</li>
</ol>
<p>通过自适应地选择LRU和LFU替换策略，ARC算法能够根据实际的访问模式来优化数据缓冲区的性能。它可以适应不同的访问模式，提供更好的缓存命中率和数据访问性能。</p>
<h4 id="其他更替算法"><a href="#其他更替算法" class="headerlink" title="其他更替算法"></a>其他更替算法</h4><p>除了LRU算法，Oracle数据库还支持其他一些替换算法来管理数据缓冲区中的数据块。以下是其中几种常见的算法：</p>
<ol>
<li><p>MRU（Most Recently Used，最近最常使用）算法：<br>MRU算法与LRU算法相反，它选择最近被访问的数据块进行替换。MRU算法假设最近被访问的数据块是最有可能在未来被再次访问的，因此选择最近被访问的数据块进行替换。</p>
</li>
<li><p>LFU（Least Frequently Used，最不经常使用）算法：<br>LFU算法根据数据块被访问的频率来进行替换。它记录每个数据块被访问的次数，并选择访问次数最少的数据块进行替换。LFU算法适用于一些访问模式呈现频繁变化的场景。</p>
</li>
<li><p>LRU-K算法：<br>LRU-K算法是对LRU算法的一种改进。它考虑了数据块的历史访问模式，除了最近被访问的数据块外，还考虑了最近K次访问的数据块。通过增加历史访问的考虑，LRU-K算法可以更好地适应特定的访问模式。</p>
</li>
</ol>
<p>这些替换算法的选择取决于数据库管理员根据应用程序的访问模式和性能需求进行配置。Oracle数据库默认使用LRU算法，因为它在大多数情况下能够提供良好的性能。但在某些特殊情况下，根据实际需求选择其他算法可能会更加合适。</p>
<h4 id="如何修改数据缓冲区的算法策略？"><a href="#如何修改数据缓冲区的算法策略？" class="headerlink" title="如何修改数据缓冲区的算法策略？"></a>如何修改数据缓冲区的算法策略？</h4><p>要修改Oracle数据库中数据缓冲区的算法策略，您可以采取以下步骤：</p>
<ol>
<li><p>确定当前的缓冲区算法策略：首先，您需要确定当前数据库实例正在使用的缓冲区算法策略。您可以查询数据库的参数设置或使用以下命令来获取当前的缓冲区算法策略：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">PARAMETER</span> db_cache_advice</span><br></pre></td></tr></table></figure>

<p>该参数显示了当前数据库实例推荐的缓冲区大小和算法策略。</p>
</li>
<li><p>修改缓冲区算法策略：要修改缓冲区算法策略，您可以使用<code>ALTER SYSTEM</code>语句来更改相关的参数设置。以下是一些常用的参数和示例：</p>
<ul>
<li><p><code>DB_CACHE_SIZE</code>：该参数用于设置数据库实例的缓冲区大小。您可以根据实际需求调整缓冲区的大小，以适应数据库的工作负载。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> <span class="keyword">SET</span> DB_CACHE_SIZE <span class="operator">=</span> <span class="operator">&lt;</span>size<span class="operator">&gt;</span> [G<span class="operator">|</span>M<span class="operator">|</span>K];</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>DB_KEEP_CACHE_SIZE</code>：该参数用于设置保留缓冲区的大小。保留缓冲区用于存储经常访问的数据块，以提高缓存命中率。您可以根据常用数据块的大小和访问模式来调整保留缓冲区的大小。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> <span class="keyword">SET</span> DB_KEEP_CACHE_SIZE <span class="operator">=</span> <span class="operator">&lt;</span>size<span class="operator">&gt;</span> [G<span class="operator">|</span>M<span class="operator">|</span>K];</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>DB_RECYCLE_CACHE_SIZE</code>：该参数用于设置回收缓冲区的大小。回收缓冲区用于存储不常访问的数据块，以减少缓冲区的浪费。您可以根据不常用数据块的大小和访问模式来调整回收缓冲区的大小。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> <span class="keyword">SET</span> DB_RECYCLE_CACHE_SIZE <span class="operator">=</span> <span class="operator">&lt;</span>size<span class="operator">&gt;</span> [G<span class="operator">|</span>M<span class="operator">|</span>K];</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>DB_2K_CACHE_SIZE</code>、<code>DB_4K_CACHE_SIZE</code>、<code>DB_8K_CACHE_SIZE</code>、<code>DB_16K_CACHE_SIZE</code>、<code>DB_32K_CACHE_SIZE</code>：这些参数用于设置不同大小数据块的缓冲区大小。您可以根据不同大小数据块的访问模式来调整相应缓冲区的大小。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> <span class="keyword">SET</span> DB_2K_CACHE_SIZE <span class="operator">=</span> <span class="operator">&lt;</span>size<span class="operator">&gt;</span> [G<span class="operator">|</span>M<span class="operator">|</span>K];</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> <span class="keyword">SET</span> DB_4K_CACHE_SIZE <span class="operator">=</span> <span class="operator">&lt;</span>size<span class="operator">&gt;</span> [G<span class="operator">|</span>M<span class="operator">|</span>K];</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> <span class="keyword">SET</span> DB_8K_CACHE_SIZE <span class="operator">=</span> <span class="operator">&lt;</span>size<span class="operator">&gt;</span> [G<span class="operator">|</span>M<span class="operator">|</span>K];</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> <span class="keyword">SET</span> DB_16K_CACHE_SIZE <span class="operator">=</span> <span class="operator">&lt;</span>size<span class="operator">&gt;</span> [G<span class="operator">|</span>M<span class="operator">|</span>K];</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> <span class="keyword">SET</span> DB_32K_CACHE_SIZE <span class="operator">=</span> <span class="operator">&lt;</span>size<span class="operator">&gt;</span> [G<span class="operator">|</span>M<span class="operator">|</span>K];</span><br></pre></td></tr></table></figure></li>
</ul>
<p>注意：在修改参数之前，请确保您对数据库的工作负载和访问模式有一定的了解，并根据实际需求进行调整。</p>
</li>
<li><p>重新启动数据库实例：修改缓冲区算法策略后，您需要重新启动数据库实例以使更改生效。</p>
</li>
</ol>
<p>请注意，在修改数据库参数之前，请确保您具备适当的权限，并在生产环境中进行谨慎测试和评估。修改缓冲区算法策略可能会对数据库性能产生影响，因此建议在进行任何更改之前备份数据库并进行充分测试。</p>
<h4 id="什么是共享池？"><a href="#什么是共享池？" class="headerlink" title="什么是共享池？"></a>什么是共享池？</h4><p>共享池（Shared Pool）是Oracle数据库中的一个重要组件，用于缓存和共享SQL语句的执行计划、共享游标、共享SQL区域和共享PL&#x2F;SQL代码等重要结构。它位于数据库系统全局区域（System Global Area，SGA）内，用于提高数据库的性能和资源利用率。</p>
<p>共享池主要包括以下几个重要的组件：</p>
<ol>
<li><p>SQL区域（SQL Area）：共享池中的SQL区域用于缓存SQL语句的解析信息、执行计划和运行时统计信息。当应用程序执行一个SQL语句时，数据库会首先检查共享池中是否存在相同的SQL语句。如果存在，数据库可以重用已经解析过的SQL语句，从而避免重复的解析和优化过程，提高执行效率。</p>
</li>
<li><p>共享游标（Shared Cursor）：共享池还用于缓存共享游标，这些游标是数据库为SQL语句分配的内部结构，用于执行和管理SQL语句的执行计划和结果集。共享游标的缓存可以减少游标的重复分配和释放操作，提高数据库的性能和资源利用率。</p>
</li>
<li><p>PL&#x2F;SQL代码区域（PL&#x2F;SQL Code Area）：共享池中还包括一个专门用于缓存共享PL&#x2F;SQL代码的区域。PL&#x2F;SQL代码区域用于存储经常使用的PL&#x2F;SQL存储过程、函数和包等对象的编译代码，以便在需要时可以重用这些编译代码，提高执行效率。</p>
</li>
</ol>
<p>通过共享池，Oracle数据库可以重用已经解析过的SQL语句、共享游标和PL&#x2F;SQL代码，从而减少系统资源的消耗，提高数据库的性能和响应速度。共享池的大小可以通过调整相关的数据库参数来进行配置，以满足具体应用的需求。</p>
<p>七宝言：共享池里面最关心的应该是就是执行计划的内容了，之后再单独写一篇关于执行计划和对应优化的内容。</p>
<h4 id="什么是重做日志缓冲区？"><a href="#什么是重做日志缓冲区？" class="headerlink" title="什么是重做日志缓冲区？"></a>什么是重做日志缓冲区？</h4><p>重做日志缓冲区（Redo Log Buffer）是数据库管理系统中的一个重要组件，用于记录事务对数据库所做的更改操作。下面是对重做日志缓冲区的介绍：</p>
<ol>
<li><p>定义：<br>重做日志缓冲区是数据库管理系统中的一块内存区域，用于临时存储事务对数据库所做的更改操作。当事务提交或数据库发生故障时，重做日志缓冲区中的数据将被写入到磁盘上的重做日志文件中，以确保数据的持久性和一致性。</p>
</li>
<li><p>功能：<br>重做日志缓冲区的主要功能是记录事务对数据库的更改操作，包括插入、更新和删除等操作。它的作用是将这些更改操作以日志的形式保存下来，以便在数据库发生故障时进行恢复。通过将更改操作记录到重做日志缓冲区中，可以避免频繁地写入磁盘，提高数据库的性能。</p>
</li>
<li><p>写入策略：<br>重做日志缓冲区的数据在内存中进行写入，并不直接写入磁盘。数据库管理系统会根据一定的策略将重做日志缓冲区中的数据写入到磁盘上的重做日志文件中。常见的写入策略包括：</p>
<ul>
<li>基于事务提交：当事务提交时，相关的重做日志缓冲区数据将被写入磁盘。</li>
<li>基于日志刷新：当重做日志缓冲区满或数据库系统空闲时，将缓冲区中的数据写入磁盘。</li>
<li>基于时间间隔：定期将重做日志缓冲区中的数据写入磁盘，无论事务是否提交。</li>
</ul>
</li>
<li><p>重做日志文件：<br>重做日志缓冲区中的数据在写入磁盘时，会被追加到重做日志文件中。重做日志文件记录了数据库中所有事务的更改操作，以及其发生的顺序。这些日志文件是循环使用的，当一个日志文件写满后，会继续写入下一个日志文件。数据库管理系统会定期将已经提交的事务的日志文件进行归档，以释放磁盘空间。</p>
</li>
</ol>
<p>总结：<br>重做日志缓冲区是数据库管理系统中的一个关键组件，用于记录事务对数据库的更改操作。它的作用是确保数据的持久性和一致性，并在数据库发生故障时进行恢复。通过将更改操作记录到重做日志缓冲区中，可以提高数据库的性能并减少频繁的磁盘写入操作。</p>
<h4 id="重做日志文件的有效期"><a href="#重做日志文件的有效期" class="headerlink" title="重做日志文件的有效期"></a>重做日志文件的有效期</h4><p>在Oracle数据库中，重做日志文件的有效期是相对较短的，通常是几天到几周的时间范围。有效期的具体长度取决于多个因素，包括数据库的活动水平、重做日志文件的大小和数量、数据库的恢复策略以及数据库管理员的配置设置。</p>
<p>Oracle数据库使用了一种称为”重做日志切换”（Redo Log Switch）的机制来管理重做日志文件的切换和重用。当当前组的重做日志文件被写满或数据库需要切换到下一个组时，数据库会自动进行重做日志切换。这意味着旧的重做日志文件将不再被使用，并可以被重复利用。</p>
<p>数据库管理员可以配置数据库的日志切换频率和重做日志文件的大小，以满足数据库的需求。通常情况下，为了保证数据库的恢复能力和故障恢复能力，数据库管理员会确保有足够的重做日志文件可供使用，并设置适当的重做日志文件大小和数量。</p>
<p>需要注意的是，如果数据库的活动水平很高或者进行了大量的事务更改操作，重做日志文件可能会更快地被写满和切换。相反，如果数据库的活动水平较低，重做日志文件可能会保持较长时间的有效期。</p>
<p>总结来说，重做日志文件的有效期在Oracle数据库中通常是几天到几周的范围，具体取决于数据库的活动水平和管理员的配置设置。数据库管理员需要根据实际情况进行适当的配置和管理，以确保数据库的恢复能力和故障恢复能力。</p>
<h4 id="如何设置重做日志文件大小和数量。"><a href="#如何设置重做日志文件大小和数量。" class="headerlink" title="如何设置重做日志文件大小和数量。"></a>如何设置重做日志文件大小和数量。</h4><p>在Oracle数据库中，可以通过以下步骤来设置重做日志文件的大小和数量：</p>
<ol>
<li><p>查询当前的重做日志配置：<br>使用以下SQL语句查询当前的重做日志配置信息：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">GROUP</span>#, THREAD#, SEQUENCE#, ARCHIVED, STATUS, <span class="keyword">MEMBER</span>, BYTES<span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span> <span class="keyword">AS</span> SIZE_MB</span><br><span class="line"><span class="keyword">FROM</span> V$LOG;</span><br></pre></td></tr></table></figure>
</li>
<li><p>确定重做日志文件的大小：<br>根据数据库的需求和性能考虑，确定每个重做日志文件的大小。一般建议将重做日志文件大小设置为几百兆字节（MB）到几千兆字节（GB）之间。</p>
</li>
<li><p>确定重做日志文件的数量：<br>根据数据库的活动水平和性能需求，确定需要配置的重做日志文件的数量。一般建议至少配置两到三个重做日志组，每个组包含多个重做日志文件。</p>
</li>
<li><p>创建新的重做日志组：<br>使用以下SQL语句创建新的重做日志组：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE <span class="keyword">ADD</span> LOGFILE <span class="keyword">GROUP</span> <span class="operator">&lt;</span>group_number<span class="operator">&gt;</span> (<span class="string">&#x27;&lt;log_file_1&gt;&#x27;</span>, <span class="string">&#x27;&lt;log_file_2&gt;&#x27;</span>, <span class="string">&#x27;&lt;log_file_3&gt;&#x27;</span>) SIZE <span class="operator">&lt;</span>size<span class="operator">&gt;</span> [G<span class="operator">|</span>M];</span><br></pre></td></tr></table></figure>

<p>其中，<code>&lt;group_number&gt;</code>是组的编号，<code>&lt;log_file_1&gt;</code>, <code>&lt;log_file_2&gt;</code>, <code>&lt;log_file_3&gt;</code>是重做日志文件的路径和名称，<code>&lt;size&gt;</code>是重做日志文件的大小。</p>
</li>
<li><p>激活新的重做日志组：<br>使用以下SQL语句激活新的重做日志组：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE SWITCH LOGFILE;</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证新的重做日志配置：<br>使用步骤1中的SQL语句再次查询重做日志配置，确保新的重做日志组已经生效。</p>
</li>
</ol>
<p>需要注意的是，对于正在运行的生产数据库，更改重做日志配置可能需要谨慎操作，并且可能需要在数据库维护窗口或离线期间进行。在进行任何更改之前，建议备份数据库并参考Oracle官方文档以获取更详细的指导和最佳实践。</p>
<p>以上是一般设置重做日志文件大小和数量的步骤，具体的配置和调整应根据实际情况和需求进行。</p>
<h4 id="如果备用数据库需要定时同步主数据库的数据，是否可以使用重做日志文件来实现？"><a href="#如果备用数据库需要定时同步主数据库的数据，是否可以使用重做日志文件来实现？" class="headerlink" title="如果备用数据库需要定时同步主数据库的数据，是否可以使用重做日志文件来实现？"></a>如果备用数据库需要定时同步主数据库的数据，是否可以使用重做日志文件来实现？</h4><p>是的，备用数据库可以使用重做日志文件来实现与主数据库的数据同步。这种方法被称为基于重做日志的数据复制或基于日志的数据复制。</p>
<p>基于重做日志的数据复制涉及以下步骤：</p>
<ol>
<li><p>主数据库记录重做日志：<br>在主数据库上，所有的事务更改操作都会被记录到重做日志文件中。这些日志记录包含了对数据库的修改操作的详细信息。</p>
</li>
<li><p>传输重做日志：<br>备用数据库通过某种方式获取主数据库的重做日志文件。这可以通过网络传输、共享存储或其他数据传输机制来完成。</p>
</li>
<li><p>应用重做日志：<br>备用数据库将接收到的重做日志文件应用到自身的数据库中。这个过程涉及将重做日志中的事务更改操作重新应用到备用数据库中，以使备用数据库与主数据库保持一致。</p>
</li>
<li><p>同步延迟：<br>由于网络传输和应用重做日志的过程需要一定的时间，备用数据库的数据可能会有一定的同步延迟。这意味着备用数据库中的数据可能不是实时的，而是稍微滞后于主数据库。</p>
</li>
</ol>
<p>基于重做日志的数据复制提供了较高的数据一致性和完整性，因为它记录了主数据库上发生的所有事务更改操作，并将其应用到备用数据库中。在主数据库发生故障或不可用时，备用数据库可以接管并继续提供服务。</p>
<p>需要注意的是，实施基于重做日志的数据复制需要考虑网络带宽、传输安全性、日志应用的性能等因素。此外，备用数据库的配置和设置也需要与主数据库保持一致，以确保数据的一致性和可用性。</p>
<p>总结来说，基于重做日志的数据复制是一种常见的方法，可用于实现备用数据库与主数据库之间的数据同步。这种方法可以提供较高的数据一致性和完整性，并在主数据库故障时提供故障转移和容灾能力。</p>
<h4 id="什么是大池？"><a href="#什么是大池？" class="headerlink" title="什么是大池？"></a>什么是大池？</h4><p>大池是SGA的一个可选组件，它提供了一块专门用于支持特定功能和操作的内存区域。大池的主要作用是提供额外的共享内存，用于支持一些需要较大内存缓冲区的功能，如备份和恢复、并行查询、共享服务器进程（Shared Server Processes）等。</p>
<p>大池的主要特点和功能包括：</p>
<ol>
<li><p>备份和恢复：大池用于存储备份和恢复操作期间使用的内存结构，如备份缓冲区（Backup Buffer）和恢复管理区（Recovery Manager Area）。这些结构可以提高备份和恢复的性能和效率。</p>
</li>
<li><p>并行查询：在执行并行查询时，大池用于存储并行执行操作所需的内存结构，如并行执行消息缓冲区（Parallel Execution Message Buffers）和并行执行服务器（Parallel Execution Servers）。这些结构可以提高并行查询的效率和扩展性。</p>
</li>
<li><p>共享服务器进程：在使用共享服务器架构（Shared Server Architecture）时，大池用于存储共享服务器进程所需的内存结构，如共享池（Shared Pool）和会话信息（Session Information）。这些结构可以提高共享服务器的性能和资源利用率。</p>
</li>
</ol>
<p>为了启用大池，需要在数据库的初始化参数文件（init.ora或spfile）中设置相关的参数，如<code>LARGE_POOL_SIZE</code>。通过适当配置大池的大小，可以根据数据库的需求提供足够的内存来支持备份和恢复、并行查询和共享服务器等功能。</p>
<p>需要注意的是，大池的大小应根据实际需求和数据库的工作负载进行调整。如果数据库不需要备份和恢复、并行查询或共享服务器功能，或者已经使用其他内存区域满足了这些需求，那么大池可以不进行配置或设置为较小的值。</p>
<p>总结来说，大池是Oracle数据库中SGA的一个可选组件，用于提供额外的共享内存来支持备份和恢复、并行查询和共享服务器等功能。通过适当配置大池的大小，可以根据数据库的需求提供足够的内存支持这些功能，并提高数据库的性能和效率。</p>
<h4 id="什么是JAVA池？"><a href="#什么是JAVA池？" class="headerlink" title="什么是JAVA池？"></a>什么是JAVA池？</h4><p>Java池是SGA中的一个可选组件，用于存储和管理Java对象和Java执行环境所需的内存。它主要用于支持Oracle数据库中的Java相关功能，如Java存储过程、Java触发器、Java类和Java应用程序等。</p>
<p>Java池的主要作用是提供一个专门的内存区域来存放Java对象的定义和实例。它包括以下两个主要部分：</p>
<ol>
<li><p>Java对象池（Java Object Pool）：Java对象池用于存储已加载的Java类的定义和实例。当数据库中的Java程序被调用时，相关的Java类和对象将被加载到Java对象池中，并在需要时进行重用。这样可以提高Java程序的性能和执行效率。</p>
</li>
<li><p>Java执行环境（Java Execution Environment）：Java执行环境是Java池中的另一个重要组成部分，用于支持Java程序的执行和运行。它包括Java虚拟机（Java Virtual Machine，JVM）和与Java相关的运行时环境。Java执行环境提供了必要的资源和功能，以便在数据库中执行Java程序。</p>
</li>
</ol>
<p>通过适当配置Java池的大小，可以根据数据库的需求提供足够的内存来支持Java相关功能。可以使用初始化参数文件（init.ora或spfile）中的相关参数来设置Java池的大小，如<code>JAVA_POOL_SIZE</code>。</p>
<p>需要注意的是，Java池的大小应根据实际需求和数据库中Java程序的使用情况进行调整。如果数据库中没有使用Java相关功能，或者Java程序的使用较少，那么可以不进行配置或设置较小的Java池大小。</p>
<p>总结来说，Java池是Oracle数据库中SGA的一个可选组件，用于存储和管理Java对象和Java执行环境所需的内存。通过适当配置Java池的大小，可以根据数据库的需求提供足够的内存支持Java相关功能，并提高数据库的性能和效率。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>切噜语(Kotlin版)，附带Java版</title>
    <url>/2023/07/19/qieru/</url>
    <content><![CDATA[<h4 id="切噜语介绍"><a href="#切噜语介绍" class="headerlink" title="切噜语介绍"></a>切噜语介绍</h4><h3><span id=".E5.88.87.E5.99.9C.E8.AF.AD"></span><span class="mw-headline" id="切噜语">切噜语</span></h3>
<table style="display: table; border-collapse: collapse; margin: auto; background-color:transparent;">
<tbody><tr>
<td style="vertical-align: top; color:#B2B7F2; font-size:36px; font-family:'Times New Roman',serif; font-weight:bold; text-align:left; padding:10px 10px; line-height:100%">“</td>
<td style="text-align: left; padding: 1em; vertical-align: middle;"><big><b><span style="color:#F164B0;"><span lang="ja">ちぇるーん♪</span><br><span lang="ja">ちぇるちぇる、ちぇちぇるぱ、ちぇるるるん！</span><br><span lang="ja">ちぇらるれ、ちぇらちぇら、ちぇるちぇぽぱぴ？</span></span></b></big></td>
<td style="vertical-align: bottom; color:#B2B7F2; font-size:36px; font-family:'Times New Roman',serif; font-weight:bold; text-align:left; padding:10px 10px; line-height:100%">”</td>
</tr>
</tbody></table>
<p><a href="https://mzh.moegirl.org.cn/%E5%85%AC%E4%B8%BB%E8%BF%9E%E7%BB%93Re:Dive/%E9%A3%8E%E9%97%B4%E5%8D%83%E7%88%B1%E7%91%A0" title="风间千爱瑠">千爱瑠</a>在剧情中所使用的一种不明所以的表达方式，其基本形态为千爱瑠的口头禅“<span style="color:#F164B0;"><ruby><rb data-id="template-ruby">切噜<span class="template-ruby-hidden">（</span></rb><rt style="font-size:0.75em"><span lang="ja">ちぇるーん</span></rt><span class="template-ruby-hidden">）</span></ruby></span>”，详见“<a href="https://mzh.moegirl.org.cn/%E5%85%AC%E4%B8%BB%E8%BF%9E%E7%BB%93Re:Dive/%E9%A3%8E%E9%97%B4%E5%8D%83%E7%88%B1%E7%91%A0" title="风间千爱瑠">风间千爱瑠</a>”。
</p>

<p>来源于<a href="https://mzh.moegirl.org.cn/%E5%85%AC%E4%B8%BB%E8%BF%9E%E7%BB%93Re:Dive/%E6%A2%97#%E5%88%87%E5%99%9C%E8%AF%AD">萌娘百科</a></p>
<h4 id="编码介绍"><a href="#编码介绍" class="headerlink" title="编码介绍"></a>编码介绍</h4><p>将汉字的UTF-8编码的前4位和后4位，分别对应16位长度的字符集中位置，拿到对应的字符重新编码成的一种加密语言。<br><img src="https://resources.kagerou.top/img/blog/qieru-encode.webp" alt="qieru"></p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>编码：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> QIERU =</span><br><span class="line">    arrayOf(<span class="string">&quot;切&quot;</span>, <span class="string">&quot;卟&quot;</span>, <span class="string">&quot;叮&quot;</span>, <span class="string">&quot;咧&quot;</span>, <span class="string">&quot;哔&quot;</span>, <span class="string">&quot;唎&quot;</span>, <span class="string">&quot;啪&quot;</span>, <span class="string">&quot;啰&quot;</span>, <span class="string">&quot;啵&quot;</span>, <span class="string">&quot;嘭&quot;</span>, <span class="string">&quot;噜&quot;</span>, <span class="string">&quot;噼&quot;</span>, <span class="string">&quot;巴&quot;</span>, <span class="string">&quot;拉&quot;</span>, <span class="string">&quot;蹦&quot;</span>, <span class="string">&quot;铃&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> qstr: String = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">//编码 encode</span></span><br><span class="line"><span class="keyword">val</span> str = <span class="string">&quot;七宝&quot;</span>.toByteArray()</span><br><span class="line">str.forEach &#123; it -&gt;</span><br><span class="line">    qstr += QIERU[it.toInt().and(<span class="number">15</span>)]</span><br><span class="line">    qstr += QIERU[it.toInt().shr(<span class="number">4</span>).and(<span class="number">15</span>)]</span><br><span class="line">&#125;</span><br><span class="line">println(qstr) <span class="comment">//哔蹦波噼咧波喇蹦蹦噜拉嘭</span></span><br></pre></td></tr></table></figure>

<p>解码：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> QIERU =</span><br><span class="line">    arrayOf(<span class="string">&quot;切&quot;</span>, <span class="string">&quot;卟&quot;</span>, <span class="string">&quot;叮&quot;</span>, <span class="string">&quot;咧&quot;</span>, <span class="string">&quot;哔&quot;</span>, <span class="string">&quot;唎&quot;</span>, <span class="string">&quot;啪&quot;</span>, <span class="string">&quot;啰&quot;</span>, <span class="string">&quot;啵&quot;</span>, <span class="string">&quot;嘭&quot;</span>, <span class="string">&quot;噜&quot;</span>, <span class="string">&quot;噼&quot;</span>, <span class="string">&quot;巴&quot;</span>, <span class="string">&quot;拉&quot;</span>, <span class="string">&quot;蹦&quot;</span>, <span class="string">&quot;铃&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> qstr = <span class="string">&quot;哔蹦波噼咧波喇蹦蹦噜拉嘭&quot;</span></span><br><span class="line"><span class="keyword">var</span> pstr: ByteArray = ByteArray(qstr.length / <span class="number">2</span>)</span><br><span class="line"><span class="comment">//解码时两个编码为一组</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until qstr.length step <span class="number">2</span>) &#123;</span><br><span class="line">    println(<span class="string">&quot;index: <span class="subst">$&#123;i / <span class="number">2</span>&#125;</span>,element1: <span class="subst">$&#123;qstr[i]&#125;</span>,element2: <span class="subst">$&#123;qstr[i + <span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    pstr[i / <span class="number">2</span>] = QIERU.indexOf(qstr[i].toString()).or(QIERU.indexOf(qstr[i + <span class="number">1</span>].toString()).shl(<span class="number">4</span>)).toByte()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> s = pstr.toString(Charsets.UTF_8)</span><br><span class="line">println(s) <span class="comment">//七宝</span></span><br></pre></td></tr></table></figure>

<p>Java版</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//回去翻数据库</span></span><br></pre></td></tr></table></figure>

<h4 id="基于狼宝机器人的实际应用"><a href="#基于狼宝机器人的实际应用" class="headerlink" title="基于狼宝机器人的实际应用"></a>基于狼宝机器人的实际应用</h4><p>通过两个关键词来判定是否触发相应功能。</p>
<p>编码：“切噜一下[内容]”</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">msg.startsWith(<span class="string">&quot;切噜一下&quot;</span>) -&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> QIERU =</span><br><span class="line">        arrayOf(<span class="string">&quot;切&quot;</span>, <span class="string">&quot;卟&quot;</span>, <span class="string">&quot;叮&quot;</span>, <span class="string">&quot;咧&quot;</span>, <span class="string">&quot;哔&quot;</span>, <span class="string">&quot;唎&quot;</span>, <span class="string">&quot;啪&quot;</span>, <span class="string">&quot;啰&quot;</span>, <span class="string">&quot;啵&quot;</span>, <span class="string">&quot;嘭&quot;</span>, <span class="string">&quot;噜&quot;</span>, <span class="string">&quot;噼&quot;</span>, <span class="string">&quot;巴&quot;</span>, <span class="string">&quot;拉&quot;</span>, <span class="string">&quot;蹦&quot;</span>, <span class="string">&quot;铃&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> qieru = msg.substring(<span class="number">4</span>,msg.length).replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> encode: String = <span class="string">&quot;切噜～♪切&quot;</span></span><br><span class="line">    qieru.toByteArray().forEach &#123;</span><br><span class="line">        encode += QIERU[it.toInt().and(<span class="number">15</span>)]</span><br><span class="line">        encode += QIERU[it.toInt().shr(<span class="number">4</span>).and(<span class="number">15</span>)]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.group.sendMessage(encode)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解码：切噜～♪切</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">msg.startsWith(<span class="string">&quot;切噜～♪切&quot;</span>) -&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> QIERU =</span><br><span class="line">        arrayOf(<span class="string">&quot;切&quot;</span>, <span class="string">&quot;卟&quot;</span>, <span class="string">&quot;叮&quot;</span>, <span class="string">&quot;咧&quot;</span>, <span class="string">&quot;哔&quot;</span>, <span class="string">&quot;唎&quot;</span>, <span class="string">&quot;啪&quot;</span>, <span class="string">&quot;啰&quot;</span>, <span class="string">&quot;啵&quot;</span>, <span class="string">&quot;嘭&quot;</span>, <span class="string">&quot;噜&quot;</span>, <span class="string">&quot;噼&quot;</span>, <span class="string">&quot;巴&quot;</span>, <span class="string">&quot;拉&quot;</span>, <span class="string">&quot;蹦&quot;</span>, <span class="string">&quot;铃&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> qieru = msg.substring(<span class="number">5</span>,msg.length).replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="comment">//todo 判断包含符号报错</span></span><br><span class="line">    <span class="keyword">var</span> decode: ByteArray = ByteArray(qieru.length / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until qieru.length step <span class="number">2</span>) &#123;</span><br><span class="line">        decode[i / <span class="number">2</span>] = QIERU.indexOf(qieru[i].toString()).or(QIERU.indexOf(qieru[i + <span class="number">1</span>].toString()).shl(<span class="number">4</span>)).toByte()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> s = decode.toString(Charsets.UTF_8)</span><br><span class="line">    <span class="keyword">this</span>.group.sendMessage(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>结束，下一篇</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
        <tag>utf-8</tag>
      </tags>
  </entry>
  <entry>
    <title>Toad for Oracle的安装记录。</title>
    <url>/2023/07/11/toad4oracle/</url>
    <content><![CDATA[<h4 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h4><p>安装Toad需要本地有一个Oracle的客户端，所有先去下载一个Oracle客户端。<a href="https://www.oracle.com/database/technologies/instant-client/microsoft-windows-32-downloads.html">下载地址</a><br>我这里下载一个Light(轻量)版的32位的客户端就好了。<br><img src="https://resources.kagerou.top/img/blog/oracledownload.webp" alt="oracle下载图片"></p>
<p>解压之后，在环境变量的PATH中添加你的Oracle客户端的路径。<br><img src="https://resources.kagerou.top/img/blog/oraclepath.webp" alt="path路径图片"></p>
<p>最后在network&#x2F;admin文件夹下在新建tnsnames.ora、sqlnet.ora、ldap.ora文件，内容可以为空。如果你懂的怎么配置或者已经有现成的配置，可以优先配置好。<br><img src="https://resources.kagerou.top/img/blog/network_admin.webp" alt="新建文件的图片"></p>
<h4 id="下载Toad软件"><a href="#下载Toad软件" class="headerlink" title="下载Toad软件"></a>下载Toad软件</h4><p>本网站暂不支持提供下载服务。建议去<a href="https://www.jb51.net/database/840251.html">jb51网站</a>中下载，点击下载地址-普通下载地址。注意甄别广告。</p>
<h4 id="安装Toad软件"><a href="#安装Toad软件" class="headerlink" title="安装Toad软件"></a>安装Toad软件</h4><p>解压下载完成的文件后，打开直接点击Setup_x86.exe开始安装引导程序。在同意条款之后，输入license。<br><code>License key</code> : CJ2PFCQ6P49Q4WHQT2D03GNTVX2AN5DG6FWD04YL4QW625KT391J9YF38VKB92SNBWNW-RU-BOARD-BD<br><code>Site message</code> : cr2384<br><img src="https://resources.kagerou.top/img/blog/license.webp" alt="License"><br>接着一路Next等待安装完成。</p>
<p>tips: 如果没有提前安装oracl客户端，在安装前检查时候会提示您，你可以暂时搁置安装进程，去配置好oracl客户端环境再来继续安装Toad。</p>
<h4 id="配置Toad软件"><a href="#配置Toad软件" class="headerlink" title="配置Toad软件"></a>配置Toad软件</h4><p><code>首先请获取到数据库相关的链接信息！</code></p>
<p>双击软件图标打开后，如果没有自动弹出配置数据库链接的对话框，您可以点击菜单栏的Session-New Connection。<br><img src="https://resources.kagerou.top/img/blog/NewConnection.webp" alt="New Connection"></p>
<p>在新建链接的右下角，点击TNSNAME Editor,新建一个TNSNAME信息，如果已经编辑了tnsnames.ora文件，可以忽略，这一步是在帮助不懂tnsnames.ora的人创建一个新的tnsnames.ora文件内容。<br><img src="https://resources.kagerou.top/img/blog/TNSNAMEEDITOR.webp" alt="TNSNAME Editor"></p>
<p>点击左上 add login record 按钮，添加一个新的登录履历。填写数据库登录的用户名&#x2F;密码，TNS选择上一步中配置的TNSNAME。<br><img src="https://resources.kagerou.top/img/blog/addloginrecord.webp" alt="add login record"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>Toad</tag>
      </tags>
  </entry>
  <entry>
    <title>Vite 跨域问题中vite.config.ts的配置</title>
    <url>/2023/05/09/vite-proxy/</url>
    <content><![CDATA[<p><strong>问题描述：</strong><br>Access to XMLHttpRequest at ‘<a href="http://lxxx:9407/login">http://lxxx:9407/login</a>‘ from origin ‘<a href="http://localhost:8888/">http://localhost:8888</a>‘ has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource.</p>
<p><img src="http://rr8o9naqf.bkt.clouddn.com/blog/image-44.png" alt="error"><br>只需要配置vite.config.ts中的server-proxy选项。</p>
<p><strong>代码如下：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://xxl:9407&quot;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">&quot;&quot;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>使用：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> httpClinet = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;/api&#x27;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123; <span class="string">&#x27;Content-type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>baseURL处使用&#x2F;api来代替原来的链接路径就好了。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Vite</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>部署vscode server服务器</title>
    <url>/2023/05/10/vscode-server/</url>
    <content><![CDATA[<h3 id="vscode-server简介"><a href="#vscode-server简介" class="headerlink" title="vscode server简介"></a>vscode server简介</h3><p>&#x2F;&#x2F;TODO</p>
<h3 id="安装vscode-server"><a href="#安装vscode-server" class="headerlink" title="安装vscode server"></a>安装vscode server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://code-server.dev/install.sh | sh</span><br></pre></td></tr></table></figure>

<p>直接安装，安装好之后使用code-server就可以直接启动服务了</p>
<h3 id="修改配置文件-x2F-config-x2F-code-server-x2F-config-yaml"><a href="#修改配置文件-x2F-config-x2F-code-server-x2F-config-yaml" class="headerlink" title="修改配置文件 ~&#x2F;.config&#x2F;code-server&#x2F;config.yaml"></a>修改配置文件 ~&#x2F;.config&#x2F;code-server&#x2F;config.yaml</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">bind-addr:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:8080</span> <span class="comment">#设置IP权限和端口</span></span><br><span class="line"><span class="attr">auth:</span> <span class="string">password</span> <span class="comment">#设置认证方式</span></span><br><span class="line"><span class="attr">password:</span> <span class="number">12345679</span> <span class="comment">#设置登录密码</span></span><br><span class="line"><span class="attr">cert:</span> <span class="literal">false</span> <span class="comment">#默认</span></span><br></pre></td></tr></table></figure>

<p>访问方式为 ip:8080</p>
<h3 id="安装screen来实现后台运行"><a href="#安装screen来实现后台运行" class="headerlink" title="安装screen来实现后台运行"></a>安装screen来实现后台运行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install screen -y</span><br></pre></td></tr></table></figure>

<p>使用screen来新建一个视窗 code（名字随意不要与已有的视窗重复）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screen -R code </span><br></pre></td></tr></table></figure>

<p>在新的视窗里面启动code-server，启动成功之后，使用Ctrl + Alt + D 退出视窗返回主shell窗口。这样code-server就一直在后台运行了。</p>
<h3 id="nginx配置二级域名访问"><a href="#nginx配置二级域名访问" class="headerlink" title="nginx配置二级域名访问"></a>nginx配置二级域名访问</h3><h4 id="配置DNS解析"><a href="#配置DNS解析" class="headerlink" title="配置DNS解析"></a>配置DNS解析</h4><p>示例域名为 code.exmaple.com</p>
<p>在你的域名DNS解析控制台里面，添加code的A解析到你的服务器ip上。</p>
<p>如下图<br>【图片】</p>
<h4 id="安装nginx服务"><a href="#安装nginx服务" class="headerlink" title="安装nginx服务"></a>安装nginx服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install nginx -y</span><br></pre></td></tr></table></figure>

<h4 id="配置nginx服务"><a href="#配置nginx服务" class="headerlink" title="配置nginx服务"></a>配置nginx服务</h4><p>修改&#x2F;etc&#x2F;nginx&#x2F;nginx.conf文件,注释掉部分关于80端口的server描述。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># For more information on configuration, see:</span><br><span class="line">#   * Official English Documentation: http://nginx.org/en/docs/</span><br><span class="line">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span><br><span class="line"></span><br><span class="line">user nginx;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log /var/log/nginx/error.log;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line"></span><br><span class="line"># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span><br><span class="line">include /usr/share/nginx/modules/*.conf;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile            on;</span><br><span class="line">    tcp_nopush          on;</span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line"></span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    # Load modular configuration files from the /etc/nginx/conf.d directory.</span><br><span class="line">    # See http://nginx.org/en/docs/ngx_core_module.html#include</span><br><span class="line">    # for more information.</span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line"></span><br><span class="line">    # 从这里开始注释</span><br><span class="line">    # server &#123;</span><br><span class="line">    #    listen       80 default_server;</span><br><span class="line">    #    listen       [::]:80 default_server;</span><br><span class="line">    #    server_name  _;</span><br><span class="line">    #    root         /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">        # Load configuration files for the default server block.</span><br><span class="line">    #    include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #    &#125;</span><br><span class="line"></span><br><span class="line">    #    error_page 404 /404.html;</span><br><span class="line">    #        location = /40x.html &#123;</span><br><span class="line">    #    &#125;</span><br><span class="line"></span><br><span class="line">    #    error_page 500 502 503 504 /50x.html;</span><br><span class="line">    #        location = /50x.html &#123;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line">    #直到这里解释</span><br><span class="line"></span><br><span class="line"># Settings for a TLS enabled server.</span><br><span class="line">#</span><br><span class="line">#    server &#123;</span><br><span class="line">#        listen       443 ssl http2 default_server;</span><br><span class="line">#        listen       [::]:443 ssl http2 default_server;</span><br><span class="line">#        server_name  _;</span><br><span class="line">#        root         /usr/share/nginx/html;</span><br><span class="line">#</span><br><span class="line">#        ssl_certificate &quot;/etc/pki/nginx/server.crt&quot;;</span><br><span class="line">#        ssl_certificate_key &quot;/etc/pki/nginx/private/server.key&quot;;</span><br><span class="line">#        ssl_session_cache shared:SSL:1m;</span><br><span class="line">#        ssl_session_timeout  10m;</span><br><span class="line">#        ssl_ciphers PROFILE=SYSTEM;</span><br><span class="line">#        ssl_prefer_server_ciphers on;</span><br><span class="line">#</span><br><span class="line">#        # Load configuration files for the default server block.</span><br><span class="line">#        include /etc/nginx/default.d/*.conf;</span><br><span class="line">#</span><br><span class="line">#        location / &#123;</span><br><span class="line">#        &#125;</span><br><span class="line">#</span><br><span class="line">#        error_page 404 /404.html;</span><br><span class="line">#            location = /40x.html &#123;</span><br><span class="line">#        &#125;</span><br><span class="line">#</span><br><span class="line">#        error_page 500 502 503 504 /50x.html;</span><br><span class="line">#            location = /50x.html &#123;</span><br><span class="line">#        &#125;</span><br><span class="line">#    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;code.exmaple.com.conf 配置文件，将code server的8080端口转发到80端口。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen          80 default_server;</span><br><span class="line">        listen          [::]:80 default_server;</span><br><span class="line">        server_name     code.exmaple.com;</span><br><span class="line">        #auth_basic      &quot;Plz input qibao‘s password&quot;;</span><br><span class="line">        #auth_basic_user_file &quot;/usr/local/nginx/pass&quot;;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                #root   html;</span><br><span class="line">                proxy_pass http:// 127.0.0.1:8080;</span><br><span class="line"></span><br><span class="line">                proxy_set_header Host $host;</span><br><span class="line">                proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">                proxy_set_header Connection upgrade;</span><br><span class="line">                proxy_set_header Accept-Encoding gzip;</span><br><span class="line">                #</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启nginx服务或者重载nginx配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart nginx</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>

<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>你就可以同过code.exmaple.com来直接访问你的code server服务了，在登录界面输入配置文件中的密码既可以开始使用code server。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
</search>
